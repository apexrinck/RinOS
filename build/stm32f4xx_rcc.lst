ARM GAS  C:\Users\rinck\AppData\Local\Temp\ccnBBAPb.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 1
   4              		.eabi_attribute 28, 1
   5              		.fpu fpv4-sp-d16
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 1
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.thumb
  16              		.syntax unified
  17              		.file	"stm32f4xx_rcc.c"
  18              		.text
  19              	.Ltext0:
  20              		.cfi_sections	.debug_frame
  21              		.section	.text.RCC_DeInit,"ax",%progbits
  22              		.align	2
  23              		.global	RCC_DeInit
  24              		.thumb
  25              		.thumb_func
  27              	RCC_DeInit:
  28              	.LFB123:
  29              		.file 1 "lib/src/stm32f4xx_rcc.c"
   1:lib/src/stm32f4xx_rcc.c **** /**
   2:lib/src/stm32f4xx_rcc.c ****   ******************************************************************************
   3:lib/src/stm32f4xx_rcc.c ****   * @file    stm32f4xx_rcc.c
   4:lib/src/stm32f4xx_rcc.c ****   * @author  MCD Application Team
   5:lib/src/stm32f4xx_rcc.c ****   * @version V1.8.0
   6:lib/src/stm32f4xx_rcc.c ****   * @date    04-November-2016
   7:lib/src/stm32f4xx_rcc.c ****   * @brief   This file provides firmware functions to manage the following 
   8:lib/src/stm32f4xx_rcc.c ****   *          functionalities of the Reset and clock control (RCC) peripheral:
   9:lib/src/stm32f4xx_rcc.c ****   *           + Internal/external clocks, PLL, CSS and MCO configuration
  10:lib/src/stm32f4xx_rcc.c ****   *           + System, AHB and APB busses clocks configuration
  11:lib/src/stm32f4xx_rcc.c ****   *           + Peripheral clocks configuration
  12:lib/src/stm32f4xx_rcc.c ****   *           + Interrupts and flags management
  13:lib/src/stm32f4xx_rcc.c ****   *
  14:lib/src/stm32f4xx_rcc.c ****  @verbatim
  15:lib/src/stm32f4xx_rcc.c ****  ===============================================================================
  16:lib/src/stm32f4xx_rcc.c ****                       ##### RCC specific features #####
  17:lib/src/stm32f4xx_rcc.c ****  ===============================================================================
  18:lib/src/stm32f4xx_rcc.c ****     [..]  
  19:lib/src/stm32f4xx_rcc.c ****       After reset the device is running from Internal High Speed oscillator 
  20:lib/src/stm32f4xx_rcc.c ****       (HSI 16MHz) with Flash 0 wait state, Flash prefetch buffer, D-Cache 
  21:lib/src/stm32f4xx_rcc.c ****       and I-Cache are disabled, and all peripherals are off except internal
  22:lib/src/stm32f4xx_rcc.c ****       SRAM, Flash and JTAG.
  23:lib/src/stm32f4xx_rcc.c ****       (+) There is no prescaler on High speed (AHB) and Low speed (APB) busses;
  24:lib/src/stm32f4xx_rcc.c ****           all peripherals mapped on these busses are running at HSI speed.
  25:lib/src/stm32f4xx_rcc.c ****       (+) The clock for all peripherals is switched off, except the SRAM and FLASH.
  26:lib/src/stm32f4xx_rcc.c ****       (+) All GPIOs are in input floating state, except the JTAG pins which
  27:lib/src/stm32f4xx_rcc.c ****           are assigned to be used for debug purpose.
  28:lib/src/stm32f4xx_rcc.c ****     [..]          
  29:lib/src/stm32f4xx_rcc.c ****       Once the device started from reset, the user application has to:
ARM GAS  C:\Users\rinck\AppData\Local\Temp\ccnBBAPb.s 			page 2


  30:lib/src/stm32f4xx_rcc.c ****       (+) Configure the clock source to be used to drive the System clock
  31:lib/src/stm32f4xx_rcc.c ****           (if the application needs higher frequency/performance)
  32:lib/src/stm32f4xx_rcc.c ****       (+) Configure the System clock frequency and Flash settings  
  33:lib/src/stm32f4xx_rcc.c ****       (+) Configure the AHB and APB busses prescalers
  34:lib/src/stm32f4xx_rcc.c ****       (+) Enable the clock for the peripheral(s) to be used
  35:lib/src/stm32f4xx_rcc.c ****       (+) Configure the clock source(s) for peripherals which clocks are not
  36:lib/src/stm32f4xx_rcc.c ****           derived from the System clock (I2S, RTC, ADC, USB OTG FS/SDIO/RNG)
  37:lib/src/stm32f4xx_rcc.c ****  @endverbatim    
  38:lib/src/stm32f4xx_rcc.c ****   ******************************************************************************
  39:lib/src/stm32f4xx_rcc.c ****   * @attention
  40:lib/src/stm32f4xx_rcc.c ****   *
  41:lib/src/stm32f4xx_rcc.c ****   * <h2><center>&copy; COPYRIGHT 2016 STMicroelectronics</center></h2>
  42:lib/src/stm32f4xx_rcc.c ****   *
  43:lib/src/stm32f4xx_rcc.c ****   * Licensed under MCD-ST Liberty SW License Agreement V2, (the "License");
  44:lib/src/stm32f4xx_rcc.c ****   * You may not use this file except in compliance with the License.
  45:lib/src/stm32f4xx_rcc.c ****   * You may obtain a copy of the License at:
  46:lib/src/stm32f4xx_rcc.c ****   *
  47:lib/src/stm32f4xx_rcc.c ****   *        http://www.st.com/software_license_agreement_liberty_v2
  48:lib/src/stm32f4xx_rcc.c ****   *
  49:lib/src/stm32f4xx_rcc.c ****   * Unless required by applicable law or agreed to in writing, software 
  50:lib/src/stm32f4xx_rcc.c ****   * distributed under the License is distributed on an "AS IS" BASIS, 
  51:lib/src/stm32f4xx_rcc.c ****   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  52:lib/src/stm32f4xx_rcc.c ****   * See the License for the specific language governing permissions and
  53:lib/src/stm32f4xx_rcc.c ****   * limitations under the License.
  54:lib/src/stm32f4xx_rcc.c ****   *
  55:lib/src/stm32f4xx_rcc.c ****   ******************************************************************************
  56:lib/src/stm32f4xx_rcc.c ****   */
  57:lib/src/stm32f4xx_rcc.c **** 
  58:lib/src/stm32f4xx_rcc.c **** /* Includes ------------------------------------------------------------------*/
  59:lib/src/stm32f4xx_rcc.c **** #include "stm32f4xx_rcc.h"
  60:lib/src/stm32f4xx_rcc.c **** 
  61:lib/src/stm32f4xx_rcc.c **** /** @addtogroup STM32F4xx_StdPeriph_Driver
  62:lib/src/stm32f4xx_rcc.c ****   * @{
  63:lib/src/stm32f4xx_rcc.c ****   */
  64:lib/src/stm32f4xx_rcc.c **** 
  65:lib/src/stm32f4xx_rcc.c **** /** @defgroup RCC 
  66:lib/src/stm32f4xx_rcc.c ****   * @brief RCC driver modules
  67:lib/src/stm32f4xx_rcc.c ****   * @{
  68:lib/src/stm32f4xx_rcc.c ****   */ 
  69:lib/src/stm32f4xx_rcc.c **** 
  70:lib/src/stm32f4xx_rcc.c **** /* Private typedef -----------------------------------------------------------*/
  71:lib/src/stm32f4xx_rcc.c **** /* Private define ------------------------------------------------------------*/
  72:lib/src/stm32f4xx_rcc.c **** /* ------------ RCC registers bit address in the alias region ----------- */
  73:lib/src/stm32f4xx_rcc.c **** #define RCC_OFFSET                (RCC_BASE - PERIPH_BASE)
  74:lib/src/stm32f4xx_rcc.c **** /* --- CR Register ---*/
  75:lib/src/stm32f4xx_rcc.c **** /* Alias word address of HSION bit */
  76:lib/src/stm32f4xx_rcc.c **** #define CR_OFFSET                 (RCC_OFFSET + 0x00)
  77:lib/src/stm32f4xx_rcc.c **** #define HSION_BitNumber           0x00
  78:lib/src/stm32f4xx_rcc.c **** #define CR_HSION_BB               (PERIPH_BB_BASE + (CR_OFFSET * 32) + (HSION_BitNumber * 4))
  79:lib/src/stm32f4xx_rcc.c **** /* Alias word address of CSSON bit */
  80:lib/src/stm32f4xx_rcc.c **** #define CSSON_BitNumber           0x13
  81:lib/src/stm32f4xx_rcc.c **** #define CR_CSSON_BB               (PERIPH_BB_BASE + (CR_OFFSET * 32) + (CSSON_BitNumber * 4))
  82:lib/src/stm32f4xx_rcc.c **** /* Alias word address of PLLON bit */
  83:lib/src/stm32f4xx_rcc.c **** #define PLLON_BitNumber           0x18
  84:lib/src/stm32f4xx_rcc.c **** #define CR_PLLON_BB               (PERIPH_BB_BASE + (CR_OFFSET * 32) + (PLLON_BitNumber * 4))
  85:lib/src/stm32f4xx_rcc.c **** /* Alias word address of PLLI2SON bit */
  86:lib/src/stm32f4xx_rcc.c **** #define PLLI2SON_BitNumber        0x1A
ARM GAS  C:\Users\rinck\AppData\Local\Temp\ccnBBAPb.s 			page 3


  87:lib/src/stm32f4xx_rcc.c **** #define CR_PLLI2SON_BB            (PERIPH_BB_BASE + (CR_OFFSET * 32) + (PLLI2SON_BitNumber * 4))
  88:lib/src/stm32f4xx_rcc.c **** 
  89:lib/src/stm32f4xx_rcc.c **** /* Alias word address of PLLSAION bit */
  90:lib/src/stm32f4xx_rcc.c **** #define PLLSAION_BitNumber        0x1C
  91:lib/src/stm32f4xx_rcc.c **** #define CR_PLLSAION_BB            (PERIPH_BB_BASE + (CR_OFFSET * 32) + (PLLSAION_BitNumber * 4))
  92:lib/src/stm32f4xx_rcc.c **** 
  93:lib/src/stm32f4xx_rcc.c **** /* --- CFGR Register ---*/
  94:lib/src/stm32f4xx_rcc.c **** /* Alias word address of I2SSRC bit */
  95:lib/src/stm32f4xx_rcc.c **** #define CFGR_OFFSET               (RCC_OFFSET + 0x08)
  96:lib/src/stm32f4xx_rcc.c **** #define I2SSRC_BitNumber          0x17
  97:lib/src/stm32f4xx_rcc.c **** #define CFGR_I2SSRC_BB            (PERIPH_BB_BASE + (CFGR_OFFSET * 32) + (I2SSRC_BitNumber * 4))
  98:lib/src/stm32f4xx_rcc.c **** 
  99:lib/src/stm32f4xx_rcc.c **** /* --- BDCR Register ---*/
 100:lib/src/stm32f4xx_rcc.c **** /* Alias word address of RTCEN bit */
 101:lib/src/stm32f4xx_rcc.c **** #define BDCR_OFFSET               (RCC_OFFSET + 0x70)
 102:lib/src/stm32f4xx_rcc.c **** #define RTCEN_BitNumber           0x0F
 103:lib/src/stm32f4xx_rcc.c **** #define BDCR_RTCEN_BB             (PERIPH_BB_BASE + (BDCR_OFFSET * 32) + (RTCEN_BitNumber * 4))
 104:lib/src/stm32f4xx_rcc.c **** /* Alias word address of BDRST bit */
 105:lib/src/stm32f4xx_rcc.c **** #define BDRST_BitNumber           0x10
 106:lib/src/stm32f4xx_rcc.c **** #define BDCR_BDRST_BB             (PERIPH_BB_BASE + (BDCR_OFFSET * 32) + (BDRST_BitNumber * 4))
 107:lib/src/stm32f4xx_rcc.c **** 
 108:lib/src/stm32f4xx_rcc.c **** /* --- CSR Register ---*/
 109:lib/src/stm32f4xx_rcc.c **** /* Alias word address of LSION bit */
 110:lib/src/stm32f4xx_rcc.c **** #define CSR_OFFSET                (RCC_OFFSET + 0x74)
 111:lib/src/stm32f4xx_rcc.c **** #define LSION_BitNumber           0x00
 112:lib/src/stm32f4xx_rcc.c **** #define CSR_LSION_BB              (PERIPH_BB_BASE + (CSR_OFFSET * 32) + (LSION_BitNumber * 4))
 113:lib/src/stm32f4xx_rcc.c **** 
 114:lib/src/stm32f4xx_rcc.c **** /* --- DCKCFGR Register ---*/
 115:lib/src/stm32f4xx_rcc.c **** /* Alias word address of TIMPRE bit */
 116:lib/src/stm32f4xx_rcc.c **** #define DCKCFGR_OFFSET            (RCC_OFFSET + 0x8C)
 117:lib/src/stm32f4xx_rcc.c **** #define TIMPRE_BitNumber          0x18
 118:lib/src/stm32f4xx_rcc.c **** #define DCKCFGR_TIMPRE_BB         (PERIPH_BB_BASE + (DCKCFGR_OFFSET * 32) + (TIMPRE_BitNumber * 4))
 119:lib/src/stm32f4xx_rcc.c ****     
 120:lib/src/stm32f4xx_rcc.c **** /* --- CFGR Register ---*/
 121:lib/src/stm32f4xx_rcc.c **** #define RCC_CFGR_OFFSET            (RCC_OFFSET + 0x08)
 122:lib/src/stm32f4xx_rcc.c ****  #if defined(STM32F410xx)
 123:lib/src/stm32f4xx_rcc.c **** /* Alias word address of MCO1EN bit */
 124:lib/src/stm32f4xx_rcc.c **** #define RCC_MCO1EN_BIT_NUMBER      0x8
 125:lib/src/stm32f4xx_rcc.c **** #define RCC_CFGR_MCO1EN_BB         (PERIPH_BB_BASE + (RCC_CFGR_OFFSET * 32) + (RCC_MCO1EN_BIT_NUMBE
 126:lib/src/stm32f4xx_rcc.c **** 
 127:lib/src/stm32f4xx_rcc.c **** /* Alias word address of MCO2EN bit */
 128:lib/src/stm32f4xx_rcc.c **** #define RCC_MCO2EN_BIT_NUMBER      0x9
 129:lib/src/stm32f4xx_rcc.c **** #define RCC_CFGR_MCO2EN_BB         (PERIPH_BB_BASE + (RCC_CFGR_OFFSET * 32) + (RCC_MCO2EN_BIT_NUMBE
 130:lib/src/stm32f4xx_rcc.c **** #endif /* STM32F410xx */
 131:lib/src/stm32f4xx_rcc.c **** /* ---------------------- RCC registers bit mask ------------------------ */
 132:lib/src/stm32f4xx_rcc.c **** /* CFGR register bit mask */
 133:lib/src/stm32f4xx_rcc.c **** #define CFGR_MCO2_RESET_MASK      ((uint32_t)0x07FFFFFF)
 134:lib/src/stm32f4xx_rcc.c **** #define CFGR_MCO1_RESET_MASK      ((uint32_t)0xF89FFFFF)
 135:lib/src/stm32f4xx_rcc.c **** 
 136:lib/src/stm32f4xx_rcc.c **** /* RCC Flag Mask */
 137:lib/src/stm32f4xx_rcc.c **** #define FLAG_MASK                 ((uint8_t)0x1F)
 138:lib/src/stm32f4xx_rcc.c **** 
 139:lib/src/stm32f4xx_rcc.c **** /* CR register byte 3 (Bits[23:16]) base address */
 140:lib/src/stm32f4xx_rcc.c **** #define CR_BYTE3_ADDRESS          ((uint32_t)0x40023802)
 141:lib/src/stm32f4xx_rcc.c **** 
 142:lib/src/stm32f4xx_rcc.c **** /* CIR register byte 2 (Bits[15:8]) base address */
 143:lib/src/stm32f4xx_rcc.c **** #define CIR_BYTE2_ADDRESS         ((uint32_t)(RCC_BASE + 0x0C + 0x01))
ARM GAS  C:\Users\rinck\AppData\Local\Temp\ccnBBAPb.s 			page 4


 144:lib/src/stm32f4xx_rcc.c **** 
 145:lib/src/stm32f4xx_rcc.c **** /* CIR register byte 3 (Bits[23:16]) base address */
 146:lib/src/stm32f4xx_rcc.c **** #define CIR_BYTE3_ADDRESS         ((uint32_t)(RCC_BASE + 0x0C + 0x02))
 147:lib/src/stm32f4xx_rcc.c **** 
 148:lib/src/stm32f4xx_rcc.c **** /* BDCR register base address */
 149:lib/src/stm32f4xx_rcc.c **** #define BDCR_ADDRESS              (PERIPH_BASE + BDCR_OFFSET)
 150:lib/src/stm32f4xx_rcc.c **** 
 151:lib/src/stm32f4xx_rcc.c **** /* Private macro -------------------------------------------------------------*/
 152:lib/src/stm32f4xx_rcc.c **** /* Private variables ---------------------------------------------------------*/
 153:lib/src/stm32f4xx_rcc.c **** static __I uint8_t APBAHBPrescTable[16] = {0, 0, 0, 0, 1, 2, 3, 4, 1, 2, 3, 4, 6, 7, 8, 9};
 154:lib/src/stm32f4xx_rcc.c **** 
 155:lib/src/stm32f4xx_rcc.c **** /* Private function prototypes -----------------------------------------------*/
 156:lib/src/stm32f4xx_rcc.c **** /* Private functions ---------------------------------------------------------*/
 157:lib/src/stm32f4xx_rcc.c **** 
 158:lib/src/stm32f4xx_rcc.c **** /** @defgroup RCC_Private_Functions
 159:lib/src/stm32f4xx_rcc.c ****   * @{
 160:lib/src/stm32f4xx_rcc.c ****   */ 
 161:lib/src/stm32f4xx_rcc.c **** 
 162:lib/src/stm32f4xx_rcc.c **** /** @defgroup RCC_Group1 Internal and external clocks, PLL, CSS and MCO configuration functions
 163:lib/src/stm32f4xx_rcc.c ****  *  @brief   Internal and external clocks, PLL, CSS and MCO configuration functions 
 164:lib/src/stm32f4xx_rcc.c ****  *
 165:lib/src/stm32f4xx_rcc.c **** @verbatim   
 166:lib/src/stm32f4xx_rcc.c ****  ===================================================================================
 167:lib/src/stm32f4xx_rcc.c ****  ##### Internal and  external clocks, PLL, CSS and MCO configuration functions #####
 168:lib/src/stm32f4xx_rcc.c ****  ===================================================================================
 169:lib/src/stm32f4xx_rcc.c ****     [..]
 170:lib/src/stm32f4xx_rcc.c ****       This section provide functions allowing to configure the internal/external clocks,
 171:lib/src/stm32f4xx_rcc.c ****       PLLs, CSS and MCO pins.
 172:lib/src/stm32f4xx_rcc.c ****   
 173:lib/src/stm32f4xx_rcc.c ****       (#) HSI (high-speed internal), 16 MHz factory-trimmed RC used directly or through
 174:lib/src/stm32f4xx_rcc.c ****           the PLL as System clock source.
 175:lib/src/stm32f4xx_rcc.c **** 
 176:lib/src/stm32f4xx_rcc.c ****       (#) LSI (low-speed internal), 32 KHz low consumption RC used as IWDG and/or RTC
 177:lib/src/stm32f4xx_rcc.c ****           clock source.
 178:lib/src/stm32f4xx_rcc.c **** 
 179:lib/src/stm32f4xx_rcc.c ****       (#) HSE (high-speed external), 4 to 26 MHz crystal oscillator used directly or
 180:lib/src/stm32f4xx_rcc.c ****           through the PLL as System clock source. Can be used also as RTC clock source.
 181:lib/src/stm32f4xx_rcc.c **** 
 182:lib/src/stm32f4xx_rcc.c ****       (#) LSE (low-speed external), 32 KHz oscillator used as RTC clock source.   
 183:lib/src/stm32f4xx_rcc.c **** 
 184:lib/src/stm32f4xx_rcc.c ****       (#) PLL (clocked by HSI or HSE), featuring two different output clocks:
 185:lib/src/stm32f4xx_rcc.c ****         (++) The first output is used to generate the high speed system clock (up to 168 MHz)
 186:lib/src/stm32f4xx_rcc.c ****         (++) The second output is used to generate the clock for the USB OTG FS (48 MHz),
 187:lib/src/stm32f4xx_rcc.c ****              the random analog generator (<=48 MHz) and the SDIO (<= 48 MHz).
 188:lib/src/stm32f4xx_rcc.c **** 
 189:lib/src/stm32f4xx_rcc.c ****       (#) PLLI2S (clocked by HSI or HSE), used to generate an accurate clock to achieve 
 190:lib/src/stm32f4xx_rcc.c ****           high-quality audio performance on the I2S interface or SAI interface in case 
 191:lib/src/stm32f4xx_rcc.c ****           of STM32F429x/439x devices.
 192:lib/src/stm32f4xx_rcc.c ****      
 193:lib/src/stm32f4xx_rcc.c ****       (#) PLLSAI clocked by (HSI or HSE), used to generate an accurate clock to SAI 
 194:lib/src/stm32f4xx_rcc.c ****           interface and LCD TFT controller available only for STM32F42xxx/43xxx/446xx/469xx/479xx d
 195:lib/src/stm32f4xx_rcc.c ****   
 196:lib/src/stm32f4xx_rcc.c ****       (#) CSS (Clock security system), once enable and if a HSE clock failure occurs 
 197:lib/src/stm32f4xx_rcc.c ****          (HSE used directly or through PLL as System clock source), the System clock
 198:lib/src/stm32f4xx_rcc.c ****          is automatically switched to HSI and an interrupt is generated if enabled. 
 199:lib/src/stm32f4xx_rcc.c ****          The interrupt is linked to the Cortex-M4 NMI (Non-Maskable Interrupt) 
 200:lib/src/stm32f4xx_rcc.c ****          exception vector.   
ARM GAS  C:\Users\rinck\AppData\Local\Temp\ccnBBAPb.s 			page 5


 201:lib/src/stm32f4xx_rcc.c **** 
 202:lib/src/stm32f4xx_rcc.c ****       (#) MCO1 (microcontroller clock output), used to output HSI, LSE, HSE or PLL
 203:lib/src/stm32f4xx_rcc.c ****           clock (through a configurable prescaler) on PA8 pin.
 204:lib/src/stm32f4xx_rcc.c **** 
 205:lib/src/stm32f4xx_rcc.c ****       (#) MCO2 (microcontroller clock output), used to output HSE, PLL, SYSCLK or PLLI2S
 206:lib/src/stm32f4xx_rcc.c ****           clock (through a configurable prescaler) on PC9 pin.
 207:lib/src/stm32f4xx_rcc.c ****  @endverbatim
 208:lib/src/stm32f4xx_rcc.c ****   * @{
 209:lib/src/stm32f4xx_rcc.c ****   */
 210:lib/src/stm32f4xx_rcc.c **** 
 211:lib/src/stm32f4xx_rcc.c **** /**
 212:lib/src/stm32f4xx_rcc.c ****   * @brief  Resets the RCC clock configuration to the default reset state.
 213:lib/src/stm32f4xx_rcc.c ****   * @note   The default reset state of the clock configuration is given below:
 214:lib/src/stm32f4xx_rcc.c ****   *            - HSI ON and used as system clock source
 215:lib/src/stm32f4xx_rcc.c ****   *            - HSE, PLL and PLLI2S OFF
 216:lib/src/stm32f4xx_rcc.c ****   *            - AHB, APB1 and APB2 prescaler set to 1.
 217:lib/src/stm32f4xx_rcc.c ****   *            - CSS, MCO1 and MCO2 OFF
 218:lib/src/stm32f4xx_rcc.c ****   *            - All interrupts disabled
 219:lib/src/stm32f4xx_rcc.c ****   * @note   This function doesn't modify the configuration of the
 220:lib/src/stm32f4xx_rcc.c ****   *            - Peripheral clocks  
 221:lib/src/stm32f4xx_rcc.c ****   *            - LSI, LSE and RTC clocks 
 222:lib/src/stm32f4xx_rcc.c ****   * @param  None
 223:lib/src/stm32f4xx_rcc.c ****   * @retval None
 224:lib/src/stm32f4xx_rcc.c ****   */
 225:lib/src/stm32f4xx_rcc.c **** void RCC_DeInit(void)
 226:lib/src/stm32f4xx_rcc.c **** {
  30              		.loc 1 226 0
  31              		.cfi_startproc
  32              		@ args = 0, pretend = 0, frame = 0
  33              		@ frame_needed = 0, uses_anonymous_args = 0
  34              		@ link register save eliminated.
 227:lib/src/stm32f4xx_rcc.c ****   /* Set HSION bit */
 228:lib/src/stm32f4xx_rcc.c ****   RCC->CR |= (uint32_t)0x00000001;
  35              		.loc 1 228 0
  36 0000 0E4B     		ldr	r3, .L2
  37 0002 1A68     		ldr	r2, [r3]
  38 0004 42F00102 		orr	r2, r2, #1
  39 0008 1A60     		str	r2, [r3]
 229:lib/src/stm32f4xx_rcc.c **** 
 230:lib/src/stm32f4xx_rcc.c ****   /* Reset CFGR register */
 231:lib/src/stm32f4xx_rcc.c ****   RCC->CFGR = 0x00000000;
  40              		.loc 1 231 0
  41 000a 0021     		movs	r1, #0
  42 000c 9960     		str	r1, [r3, #8]
 232:lib/src/stm32f4xx_rcc.c **** 
 233:lib/src/stm32f4xx_rcc.c ****   /* Reset HSEON, CSSON, PLLON, PLLI2S and PLLSAI(STM32F42xxx/43xxx/446xx/469xx/479xx devices) bits
 234:lib/src/stm32f4xx_rcc.c ****   RCC->CR &= (uint32_t)0xEAF6FFFF;
  43              		.loc 1 234 0
  44 000e 1A68     		ldr	r2, [r3]
  45 0010 22F0A852 		bic	r2, r2, #352321536
  46 0014 22F41022 		bic	r2, r2, #589824
  47 0018 1A60     		str	r2, [r3]
 235:lib/src/stm32f4xx_rcc.c ****   
 236:lib/src/stm32f4xx_rcc.c ****   /* Reset PLLCFGR register */
 237:lib/src/stm32f4xx_rcc.c ****   RCC->PLLCFGR = 0x24003010;
  48              		.loc 1 237 0
  49 001a 094A     		ldr	r2, .L2+4
ARM GAS  C:\Users\rinck\AppData\Local\Temp\ccnBBAPb.s 			page 6


  50 001c 5A60     		str	r2, [r3, #4]
 238:lib/src/stm32f4xx_rcc.c **** 
 239:lib/src/stm32f4xx_rcc.c **** #if defined(STM32F40_41xxx) || defined(STM32F427_437xx) || defined(STM32F429_439xx) || defined(STM3
 240:lib/src/stm32f4xx_rcc.c ****   /* Reset PLLI2SCFGR register */
 241:lib/src/stm32f4xx_rcc.c ****   RCC->PLLI2SCFGR = 0x20003000;
  51              		.loc 1 241 0
  52 001e 094A     		ldr	r2, .L2+8
  53 0020 C3F88420 		str	r2, [r3, #132]
 242:lib/src/stm32f4xx_rcc.c **** #endif /* STM32F40_41xxx || STM32F427_437xx || STM32F429_439xx || STM32F401xx || STM32F411xE || STM
 243:lib/src/stm32f4xx_rcc.c **** 
 244:lib/src/stm32f4xx_rcc.c **** #if defined(STM32F40_41xxx) || defined(STM32F427_437xx) || defined(STM32F429_439xx) || defined(STM3
 245:lib/src/stm32f4xx_rcc.c ****   /* Reset PLLSAICFGR register, only available for STM32F42xxx/43xxx/446xx/469xx/479xx devices */
 246:lib/src/stm32f4xx_rcc.c ****   RCC->PLLSAICFGR = 0x24003000;
  54              		.loc 1 246 0
  55 0024 02F18062 		add	r2, r2, #67108864
  56 0028 C3F88820 		str	r2, [r3, #136]
 247:lib/src/stm32f4xx_rcc.c **** #endif /* STM32F40_41xxx || STM32F427_437xx || STM32F429_439xx || STM32F446xx || STM32F469_479xx */
 248:lib/src/stm32f4xx_rcc.c ****   
 249:lib/src/stm32f4xx_rcc.c ****   /* Reset HSEBYP bit */
 250:lib/src/stm32f4xx_rcc.c ****   RCC->CR &= (uint32_t)0xFFFBFFFF;
  57              		.loc 1 250 0
  58 002c 1A68     		ldr	r2, [r3]
  59 002e 22F48022 		bic	r2, r2, #262144
  60 0032 1A60     		str	r2, [r3]
 251:lib/src/stm32f4xx_rcc.c **** 
 252:lib/src/stm32f4xx_rcc.c ****   /* Disable all interrupts */
 253:lib/src/stm32f4xx_rcc.c ****   RCC->CIR = 0x00000000;
  61              		.loc 1 253 0
  62 0034 D960     		str	r1, [r3, #12]
 254:lib/src/stm32f4xx_rcc.c **** 
 255:lib/src/stm32f4xx_rcc.c ****   /* Disable Timers clock prescalers selection, only available for STM32F42/43xxx and STM32F413_423
 256:lib/src/stm32f4xx_rcc.c ****   RCC->DCKCFGR = 0x00000000;
  63              		.loc 1 256 0
  64 0036 C3F88C10 		str	r1, [r3, #140]
  65 003a 7047     		bx	lr
  66              	.L3:
  67              		.align	2
  68              	.L2:
  69 003c 00380240 		.word	1073887232
  70 0040 10300024 		.word	603992080
  71 0044 00300020 		.word	536883200
  72              		.cfi_endproc
  73              	.LFE123:
  75              		.section	.text.RCC_HSEConfig,"ax",%progbits
  76              		.align	2
  77              		.global	RCC_HSEConfig
  78              		.thumb
  79              		.thumb_func
  81              	RCC_HSEConfig:
  82              	.LFB124:
 257:lib/src/stm32f4xx_rcc.c ****   
 258:lib/src/stm32f4xx_rcc.c **** #if defined(STM32F410xx) || defined(STM32F413_423xx)
 259:lib/src/stm32f4xx_rcc.c ****   /* Disable LPTIM and FMPI2C clock prescalers selection, only available for STM32F410xx and STM32F
 260:lib/src/stm32f4xx_rcc.c ****   RCC->DCKCFGR2 = 0x00000000;
 261:lib/src/stm32f4xx_rcc.c **** #endif /* STM32F410xx || STM32F413_423xx */  
 262:lib/src/stm32f4xx_rcc.c **** }
 263:lib/src/stm32f4xx_rcc.c **** 
ARM GAS  C:\Users\rinck\AppData\Local\Temp\ccnBBAPb.s 			page 7


 264:lib/src/stm32f4xx_rcc.c **** /**
 265:lib/src/stm32f4xx_rcc.c ****   * @brief  Configures the External High Speed oscillator (HSE).
 266:lib/src/stm32f4xx_rcc.c ****   * @note   After enabling the HSE (RCC_HSE_ON or RCC_HSE_Bypass), the application
 267:lib/src/stm32f4xx_rcc.c ****   *         software should wait on HSERDY flag to be set indicating that HSE clock
 268:lib/src/stm32f4xx_rcc.c ****   *         is stable and can be used to clock the PLL and/or system clock.
 269:lib/src/stm32f4xx_rcc.c ****   * @note   HSE state can not be changed if it is used directly or through the
 270:lib/src/stm32f4xx_rcc.c ****   *         PLL as system clock. In this case, you have to select another source
 271:lib/src/stm32f4xx_rcc.c ****   *         of the system clock then change the HSE state (ex. disable it).
 272:lib/src/stm32f4xx_rcc.c ****   * @note   The HSE is stopped by hardware when entering STOP and STANDBY modes.  
 273:lib/src/stm32f4xx_rcc.c ****   * @note   This function reset the CSSON bit, so if the Clock security system(CSS)
 274:lib/src/stm32f4xx_rcc.c ****   *         was previously enabled you have to enable it again after calling this
 275:lib/src/stm32f4xx_rcc.c ****   *         function.    
 276:lib/src/stm32f4xx_rcc.c ****   * @param  RCC_HSE: specifies the new state of the HSE.
 277:lib/src/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
 278:lib/src/stm32f4xx_rcc.c ****   *            @arg RCC_HSE_OFF: turn OFF the HSE oscillator, HSERDY flag goes low after
 279:lib/src/stm32f4xx_rcc.c ****   *                              6 HSE oscillator clock cycles.
 280:lib/src/stm32f4xx_rcc.c ****   *            @arg RCC_HSE_ON: turn ON the HSE oscillator
 281:lib/src/stm32f4xx_rcc.c ****   *            @arg RCC_HSE_Bypass: HSE oscillator bypassed with external clock
 282:lib/src/stm32f4xx_rcc.c ****   * @retval None
 283:lib/src/stm32f4xx_rcc.c ****   */
 284:lib/src/stm32f4xx_rcc.c **** void RCC_HSEConfig(uint8_t RCC_HSE)
 285:lib/src/stm32f4xx_rcc.c **** {
  83              		.loc 1 285 0
  84              		.cfi_startproc
  85              		@ args = 0, pretend = 0, frame = 0
  86              		@ frame_needed = 0, uses_anonymous_args = 0
  87              		@ link register save eliminated.
  88              	.LVL0:
 286:lib/src/stm32f4xx_rcc.c ****   /* Check the parameters */
 287:lib/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_HSE(RCC_HSE));
 288:lib/src/stm32f4xx_rcc.c **** 
 289:lib/src/stm32f4xx_rcc.c ****   /* Reset HSEON and HSEBYP bits before configuring the HSE ------------------*/
 290:lib/src/stm32f4xx_rcc.c ****   *(__IO uint8_t *) CR_BYTE3_ADDRESS = RCC_HSE_OFF;
  89              		.loc 1 290 0
  90 0000 024B     		ldr	r3, .L5
  91 0002 0022     		movs	r2, #0
  92 0004 1A70     		strb	r2, [r3]
 291:lib/src/stm32f4xx_rcc.c **** 
 292:lib/src/stm32f4xx_rcc.c ****   /* Set the new HSE configuration -------------------------------------------*/
 293:lib/src/stm32f4xx_rcc.c ****   *(__IO uint8_t *) CR_BYTE3_ADDRESS = RCC_HSE;
  93              		.loc 1 293 0
  94 0006 1870     		strb	r0, [r3]
  95 0008 7047     		bx	lr
  96              	.L6:
  97 000a 00BF     		.align	2
  98              	.L5:
  99 000c 02380240 		.word	1073887234
 100              		.cfi_endproc
 101              	.LFE124:
 103              		.section	.text.RCC_AdjustHSICalibrationValue,"ax",%progbits
 104              		.align	2
 105              		.global	RCC_AdjustHSICalibrationValue
 106              		.thumb
 107              		.thumb_func
 109              	RCC_AdjustHSICalibrationValue:
 110              	.LFB126:
 294:lib/src/stm32f4xx_rcc.c **** }
ARM GAS  C:\Users\rinck\AppData\Local\Temp\ccnBBAPb.s 			page 8


 295:lib/src/stm32f4xx_rcc.c **** 
 296:lib/src/stm32f4xx_rcc.c **** /**
 297:lib/src/stm32f4xx_rcc.c ****   * @brief  Waits for HSE start-up.
 298:lib/src/stm32f4xx_rcc.c ****   * @note   This functions waits on HSERDY flag to be set and return SUCCESS if 
 299:lib/src/stm32f4xx_rcc.c ****   *         this flag is set, otherwise returns ERROR if the timeout is reached 
 300:lib/src/stm32f4xx_rcc.c ****   *         and this flag is not set. The timeout value is defined by the constant
 301:lib/src/stm32f4xx_rcc.c ****   *         HSE_STARTUP_TIMEOUT in stm32f4xx.h file. You can tailor it depending
 302:lib/src/stm32f4xx_rcc.c ****   *         on the HSE crystal used in your application. 
 303:lib/src/stm32f4xx_rcc.c ****   * @param  None
 304:lib/src/stm32f4xx_rcc.c ****   * @retval An ErrorStatus enumeration value:
 305:lib/src/stm32f4xx_rcc.c ****   *          - SUCCESS: HSE oscillator is stable and ready to use
 306:lib/src/stm32f4xx_rcc.c ****   *          - ERROR: HSE oscillator not yet ready
 307:lib/src/stm32f4xx_rcc.c ****   */
 308:lib/src/stm32f4xx_rcc.c **** ErrorStatus RCC_WaitForHSEStartUp(void)
 309:lib/src/stm32f4xx_rcc.c **** {
 310:lib/src/stm32f4xx_rcc.c ****   __IO uint32_t startupcounter = 0;
 311:lib/src/stm32f4xx_rcc.c ****   ErrorStatus status = ERROR;
 312:lib/src/stm32f4xx_rcc.c ****   FlagStatus hsestatus = RESET;
 313:lib/src/stm32f4xx_rcc.c ****   /* Wait till HSE is ready and if Time out is reached exit */
 314:lib/src/stm32f4xx_rcc.c ****   do
 315:lib/src/stm32f4xx_rcc.c ****   {
 316:lib/src/stm32f4xx_rcc.c ****     hsestatus = RCC_GetFlagStatus(RCC_FLAG_HSERDY);
 317:lib/src/stm32f4xx_rcc.c ****     startupcounter++;
 318:lib/src/stm32f4xx_rcc.c ****   } while((startupcounter != HSE_STARTUP_TIMEOUT) && (hsestatus == RESET));
 319:lib/src/stm32f4xx_rcc.c **** 
 320:lib/src/stm32f4xx_rcc.c ****   if (RCC_GetFlagStatus(RCC_FLAG_HSERDY) != RESET)
 321:lib/src/stm32f4xx_rcc.c ****   {
 322:lib/src/stm32f4xx_rcc.c ****     status = SUCCESS;
 323:lib/src/stm32f4xx_rcc.c ****   }
 324:lib/src/stm32f4xx_rcc.c ****   else
 325:lib/src/stm32f4xx_rcc.c ****   {
 326:lib/src/stm32f4xx_rcc.c ****     status = ERROR;
 327:lib/src/stm32f4xx_rcc.c ****   }
 328:lib/src/stm32f4xx_rcc.c ****   return (status);
 329:lib/src/stm32f4xx_rcc.c **** }
 330:lib/src/stm32f4xx_rcc.c **** 
 331:lib/src/stm32f4xx_rcc.c **** /**
 332:lib/src/stm32f4xx_rcc.c ****   * @brief  Adjusts the Internal High Speed oscillator (HSI) calibration value.
 333:lib/src/stm32f4xx_rcc.c ****   * @note   The calibration is used to compensate for the variations in voltage
 334:lib/src/stm32f4xx_rcc.c ****   *         and temperature that influence the frequency of the internal HSI RC.
 335:lib/src/stm32f4xx_rcc.c ****   * @param  HSICalibrationValue: specifies the calibration trimming value.
 336:lib/src/stm32f4xx_rcc.c ****   *         This parameter must be a number between 0 and 0x1F.
 337:lib/src/stm32f4xx_rcc.c ****   * @retval None
 338:lib/src/stm32f4xx_rcc.c ****   */
 339:lib/src/stm32f4xx_rcc.c **** void RCC_AdjustHSICalibrationValue(uint8_t HSICalibrationValue)
 340:lib/src/stm32f4xx_rcc.c **** {
 111              		.loc 1 340 0
 112              		.cfi_startproc
 113              		@ args = 0, pretend = 0, frame = 0
 114              		@ frame_needed = 0, uses_anonymous_args = 0
 115              		@ link register save eliminated.
 116              	.LVL1:
 341:lib/src/stm32f4xx_rcc.c ****   uint32_t tmpreg = 0;
 342:lib/src/stm32f4xx_rcc.c ****   /* Check the parameters */
 343:lib/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_CALIBRATION_VALUE(HSICalibrationValue));
 344:lib/src/stm32f4xx_rcc.c **** 
 345:lib/src/stm32f4xx_rcc.c ****   tmpreg = RCC->CR;
ARM GAS  C:\Users\rinck\AppData\Local\Temp\ccnBBAPb.s 			page 9


 117              		.loc 1 345 0
 118 0000 034A     		ldr	r2, .L8
 119 0002 1368     		ldr	r3, [r2]
 120              	.LVL2:
 346:lib/src/stm32f4xx_rcc.c **** 
 347:lib/src/stm32f4xx_rcc.c ****   /* Clear HSITRIM[4:0] bits */
 348:lib/src/stm32f4xx_rcc.c ****   tmpreg &= ~RCC_CR_HSITRIM;
 121              		.loc 1 348 0
 122 0004 23F0F803 		bic	r3, r3, #248
 123              	.LVL3:
 349:lib/src/stm32f4xx_rcc.c **** 
 350:lib/src/stm32f4xx_rcc.c ****   /* Set the HSITRIM[4:0] bits according to HSICalibrationValue value */
 351:lib/src/stm32f4xx_rcc.c ****   tmpreg |= (uint32_t)HSICalibrationValue << 3;
 124              		.loc 1 351 0
 125 0008 43EAC000 		orr	r0, r3, r0, lsl #3
 126              	.LVL4:
 352:lib/src/stm32f4xx_rcc.c **** 
 353:lib/src/stm32f4xx_rcc.c ****   /* Store the new value */
 354:lib/src/stm32f4xx_rcc.c ****   RCC->CR = tmpreg;
 127              		.loc 1 354 0
 128 000c 1060     		str	r0, [r2]
 129 000e 7047     		bx	lr
 130              	.L9:
 131              		.align	2
 132              	.L8:
 133 0010 00380240 		.word	1073887232
 134              		.cfi_endproc
 135              	.LFE126:
 137              		.section	.text.RCC_HSICmd,"ax",%progbits
 138              		.align	2
 139              		.global	RCC_HSICmd
 140              		.thumb
 141              		.thumb_func
 143              	RCC_HSICmd:
 144              	.LFB127:
 355:lib/src/stm32f4xx_rcc.c **** }
 356:lib/src/stm32f4xx_rcc.c **** 
 357:lib/src/stm32f4xx_rcc.c **** /**
 358:lib/src/stm32f4xx_rcc.c ****   * @brief  Enables or disables the Internal High Speed oscillator (HSI).
 359:lib/src/stm32f4xx_rcc.c ****   * @note   The HSI is stopped by hardware when entering STOP and STANDBY modes.
 360:lib/src/stm32f4xx_rcc.c ****   *         It is used (enabled by hardware) as system clock source after startup
 361:lib/src/stm32f4xx_rcc.c ****   *         from Reset, wakeup from STOP and STANDBY mode, or in case of failure
 362:lib/src/stm32f4xx_rcc.c ****   *         of the HSE used directly or indirectly as system clock (if the Clock
 363:lib/src/stm32f4xx_rcc.c ****   *         Security System CSS is enabled).             
 364:lib/src/stm32f4xx_rcc.c ****   * @note   HSI can not be stopped if it is used as system clock source. In this case,
 365:lib/src/stm32f4xx_rcc.c ****   *         you have to select another source of the system clock then stop the HSI.  
 366:lib/src/stm32f4xx_rcc.c ****   * @note   After enabling the HSI, the application software should wait on HSIRDY
 367:lib/src/stm32f4xx_rcc.c ****   *         flag to be set indicating that HSI clock is stable and can be used as
 368:lib/src/stm32f4xx_rcc.c ****   *         system clock source.  
 369:lib/src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the HSI.
 370:lib/src/stm32f4xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
 371:lib/src/stm32f4xx_rcc.c ****   * @note   When the HSI is stopped, HSIRDY flag goes low after 6 HSI oscillator
 372:lib/src/stm32f4xx_rcc.c ****   *         clock cycles.  
 373:lib/src/stm32f4xx_rcc.c ****   * @retval None
 374:lib/src/stm32f4xx_rcc.c ****   */
 375:lib/src/stm32f4xx_rcc.c **** void RCC_HSICmd(FunctionalState NewState)
 376:lib/src/stm32f4xx_rcc.c **** {
ARM GAS  C:\Users\rinck\AppData\Local\Temp\ccnBBAPb.s 			page 10


 145              		.loc 1 376 0
 146              		.cfi_startproc
 147              		@ args = 0, pretend = 0, frame = 0
 148              		@ frame_needed = 0, uses_anonymous_args = 0
 149              		@ link register save eliminated.
 150              	.LVL5:
 377:lib/src/stm32f4xx_rcc.c ****   /* Check the parameters */
 378:lib/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 379:lib/src/stm32f4xx_rcc.c **** 
 380:lib/src/stm32f4xx_rcc.c ****   *(__IO uint32_t *) CR_HSION_BB = (uint32_t)NewState;
 151              		.loc 1 380 0
 152 0000 014B     		ldr	r3, .L11
 153 0002 1860     		str	r0, [r3]
 154 0004 7047     		bx	lr
 155              	.L12:
 156 0006 00BF     		.align	2
 157              	.L11:
 158 0008 00004742 		.word	1111949312
 159              		.cfi_endproc
 160              	.LFE127:
 162              		.section	.text.RCC_LSEConfig,"ax",%progbits
 163              		.align	2
 164              		.global	RCC_LSEConfig
 165              		.thumb
 166              		.thumb_func
 168              	RCC_LSEConfig:
 169              	.LFB128:
 381:lib/src/stm32f4xx_rcc.c **** }
 382:lib/src/stm32f4xx_rcc.c **** 
 383:lib/src/stm32f4xx_rcc.c **** /**
 384:lib/src/stm32f4xx_rcc.c ****   * @brief  Configures the External Low Speed oscillator (LSE).
 385:lib/src/stm32f4xx_rcc.c ****   * @note   As the LSE is in the Backup domain and write access is denied to
 386:lib/src/stm32f4xx_rcc.c ****   *         this domain after reset, you have to enable write access using 
 387:lib/src/stm32f4xx_rcc.c ****   *         PWR_BackupAccessCmd(ENABLE) function before to configure the LSE
 388:lib/src/stm32f4xx_rcc.c ****   *         (to be done once after reset).  
 389:lib/src/stm32f4xx_rcc.c ****   * @note   After enabling the LSE (RCC_LSE_ON or RCC_LSE_Bypass), the application
 390:lib/src/stm32f4xx_rcc.c ****   *         software should wait on LSERDY flag to be set indicating that LSE clock
 391:lib/src/stm32f4xx_rcc.c ****   *         is stable and can be used to clock the RTC.
 392:lib/src/stm32f4xx_rcc.c ****   * @param  RCC_LSE: specifies the new state of the LSE.
 393:lib/src/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
 394:lib/src/stm32f4xx_rcc.c ****   *            @arg RCC_LSE_OFF: turn OFF the LSE oscillator, LSERDY flag goes low after
 395:lib/src/stm32f4xx_rcc.c ****   *                              6 LSE oscillator clock cycles.
 396:lib/src/stm32f4xx_rcc.c ****   *            @arg RCC_LSE_ON: turn ON the LSE oscillator
 397:lib/src/stm32f4xx_rcc.c ****   *            @arg RCC_LSE_Bypass: LSE oscillator bypassed with external clock
 398:lib/src/stm32f4xx_rcc.c ****   * @retval None
 399:lib/src/stm32f4xx_rcc.c ****   */
 400:lib/src/stm32f4xx_rcc.c **** void RCC_LSEConfig(uint8_t RCC_LSE)
 401:lib/src/stm32f4xx_rcc.c **** {
 170              		.loc 1 401 0
 171              		.cfi_startproc
 172              		@ args = 0, pretend = 0, frame = 0
 173              		@ frame_needed = 0, uses_anonymous_args = 0
 174              		@ link register save eliminated.
 175              	.LVL6:
 402:lib/src/stm32f4xx_rcc.c ****   /* Check the parameters */
 403:lib/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_LSE(RCC_LSE));
 404:lib/src/stm32f4xx_rcc.c **** 
ARM GAS  C:\Users\rinck\AppData\Local\Temp\ccnBBAPb.s 			page 11


 405:lib/src/stm32f4xx_rcc.c ****   /* Reset LSEON and LSEBYP bits before configuring the LSE ------------------*/
 406:lib/src/stm32f4xx_rcc.c ****   /* Reset LSEON bit */
 407:lib/src/stm32f4xx_rcc.c ****   *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
 176              		.loc 1 407 0
 177 0000 084B     		ldr	r3, .L17
 178 0002 0022     		movs	r2, #0
 179 0004 1A70     		strb	r2, [r3]
 408:lib/src/stm32f4xx_rcc.c **** 
 409:lib/src/stm32f4xx_rcc.c ****   /* Reset LSEBYP bit */
 410:lib/src/stm32f4xx_rcc.c ****   *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
 180              		.loc 1 410 0
 181 0006 1A70     		strb	r2, [r3]
 411:lib/src/stm32f4xx_rcc.c **** 
 412:lib/src/stm32f4xx_rcc.c ****   /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
 413:lib/src/stm32f4xx_rcc.c ****   switch (RCC_LSE)
 182              		.loc 1 413 0
 183 0008 0128     		cmp	r0, #1
 184 000a 02D0     		beq	.L15
 185 000c 0428     		cmp	r0, #4
 186 000e 04D0     		beq	.L16
 187 0010 7047     		bx	lr
 188              	.L15:
 414:lib/src/stm32f4xx_rcc.c ****   {
 415:lib/src/stm32f4xx_rcc.c ****     case RCC_LSE_ON:
 416:lib/src/stm32f4xx_rcc.c ****       /* Set LSEON bit */
 417:lib/src/stm32f4xx_rcc.c ****       *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_ON;
 189              		.loc 1 417 0
 190 0012 0122     		movs	r2, #1
 191 0014 034B     		ldr	r3, .L17
 192 0016 1A70     		strb	r2, [r3]
 418:lib/src/stm32f4xx_rcc.c ****       break;
 193              		.loc 1 418 0
 194 0018 7047     		bx	lr
 195              	.L16:
 419:lib/src/stm32f4xx_rcc.c ****     case RCC_LSE_Bypass:
 420:lib/src/stm32f4xx_rcc.c ****       /* Set LSEBYP and LSEON bits */
 421:lib/src/stm32f4xx_rcc.c ****       *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_Bypass | RCC_LSE_ON;
 196              		.loc 1 421 0
 197 001a 0522     		movs	r2, #5
 198 001c 014B     		ldr	r3, .L17
 199 001e 1A70     		strb	r2, [r3]
 200 0020 7047     		bx	lr
 201              	.L18:
 202 0022 00BF     		.align	2
 203              	.L17:
 204 0024 70380240 		.word	1073887344
 205              		.cfi_endproc
 206              	.LFE128:
 208              		.section	.text.RCC_LSICmd,"ax",%progbits
 209              		.align	2
 210              		.global	RCC_LSICmd
 211              		.thumb
 212              		.thumb_func
 214              	RCC_LSICmd:
 215              	.LFB129:
 422:lib/src/stm32f4xx_rcc.c ****       break;
 423:lib/src/stm32f4xx_rcc.c ****     default:
ARM GAS  C:\Users\rinck\AppData\Local\Temp\ccnBBAPb.s 			page 12


 424:lib/src/stm32f4xx_rcc.c ****       break;
 425:lib/src/stm32f4xx_rcc.c ****   }
 426:lib/src/stm32f4xx_rcc.c **** }
 427:lib/src/stm32f4xx_rcc.c **** 
 428:lib/src/stm32f4xx_rcc.c **** /**
 429:lib/src/stm32f4xx_rcc.c ****   * @brief  Enables or disables the Internal Low Speed oscillator (LSI).
 430:lib/src/stm32f4xx_rcc.c ****   * @note   After enabling the LSI, the application software should wait on 
 431:lib/src/stm32f4xx_rcc.c ****   *         LSIRDY flag to be set indicating that LSI clock is stable and can
 432:lib/src/stm32f4xx_rcc.c ****   *         be used to clock the IWDG and/or the RTC.
 433:lib/src/stm32f4xx_rcc.c ****   * @note   LSI can not be disabled if the IWDG is running.  
 434:lib/src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the LSI.
 435:lib/src/stm32f4xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
 436:lib/src/stm32f4xx_rcc.c ****   * @note   When the LSI is stopped, LSIRDY flag goes low after 6 LSI oscillator
 437:lib/src/stm32f4xx_rcc.c ****   *         clock cycles. 
 438:lib/src/stm32f4xx_rcc.c ****   * @retval None
 439:lib/src/stm32f4xx_rcc.c ****   */
 440:lib/src/stm32f4xx_rcc.c **** void RCC_LSICmd(FunctionalState NewState)
 441:lib/src/stm32f4xx_rcc.c **** {
 216              		.loc 1 441 0
 217              		.cfi_startproc
 218              		@ args = 0, pretend = 0, frame = 0
 219              		@ frame_needed = 0, uses_anonymous_args = 0
 220              		@ link register save eliminated.
 221              	.LVL7:
 442:lib/src/stm32f4xx_rcc.c ****   /* Check the parameters */
 443:lib/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 444:lib/src/stm32f4xx_rcc.c **** 
 445:lib/src/stm32f4xx_rcc.c ****   *(__IO uint32_t *) CSR_LSION_BB = (uint32_t)NewState;
 222              		.loc 1 445 0
 223 0000 014B     		ldr	r3, .L20
 224 0002 1860     		str	r0, [r3]
 225 0004 7047     		bx	lr
 226              	.L21:
 227 0006 00BF     		.align	2
 228              	.L20:
 229 0008 800E4742 		.word	1111953024
 230              		.cfi_endproc
 231              	.LFE129:
 233              		.section	.text.RCC_PLLConfig,"ax",%progbits
 234              		.align	2
 235              		.global	RCC_PLLConfig
 236              		.thumb
 237              		.thumb_func
 239              	RCC_PLLConfig:
 240              	.LFB130:
 446:lib/src/stm32f4xx_rcc.c **** }
 447:lib/src/stm32f4xx_rcc.c **** 
 448:lib/src/stm32f4xx_rcc.c **** #if defined(STM32F410xx) || defined(STM32F412xG) || defined(STM32F413_423xx) || defined(STM32F446xx
 449:lib/src/stm32f4xx_rcc.c **** /**
 450:lib/src/stm32f4xx_rcc.c ****   * @brief  Configures the main PLL clock source, multiplication and division factors.
 451:lib/src/stm32f4xx_rcc.c ****   * @note   This function must be used only when the main PLL is disabled.
 452:lib/src/stm32f4xx_rcc.c ****   *  
 453:lib/src/stm32f4xx_rcc.c ****   * @param  RCC_PLLSource: specifies the PLL entry clock source.
 454:lib/src/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
 455:lib/src/stm32f4xx_rcc.c ****   *            @arg RCC_PLLSource_HSI: HSI oscillator clock selected as PLL clock entry
 456:lib/src/stm32f4xx_rcc.c ****   *            @arg RCC_PLLSource_HSE: HSE oscillator clock selected as PLL clock entry
 457:lib/src/stm32f4xx_rcc.c ****   * @note   This clock source (RCC_PLLSource) is common for the main PLL and PLLI2S.  
ARM GAS  C:\Users\rinck\AppData\Local\Temp\ccnBBAPb.s 			page 13


 458:lib/src/stm32f4xx_rcc.c ****   *  
 459:lib/src/stm32f4xx_rcc.c ****   * @param  PLLM: specifies the division factor for PLL VCO input clock
 460:lib/src/stm32f4xx_rcc.c ****   *          This parameter must be a number between 0 and 63.
 461:lib/src/stm32f4xx_rcc.c ****   * @note   You have to set the PLLM parameter correctly to ensure that the VCO input
 462:lib/src/stm32f4xx_rcc.c ****   *         frequency ranges from 1 to 2 MHz. It is recommended to select a frequency
 463:lib/src/stm32f4xx_rcc.c ****   *         of 2 MHz to limit PLL jitter.
 464:lib/src/stm32f4xx_rcc.c ****   *  
 465:lib/src/stm32f4xx_rcc.c ****   * @param  PLLN: specifies the multiplication factor for PLL VCO output clock
 466:lib/src/stm32f4xx_rcc.c ****   *          This parameter must be a number between 50 and 432.
 467:lib/src/stm32f4xx_rcc.c ****   * @note   You have to set the PLLN parameter correctly to ensure that the VCO
 468:lib/src/stm32f4xx_rcc.c ****   *         output frequency is between 100 and 432 MHz.
 469:lib/src/stm32f4xx_rcc.c ****   *   
 470:lib/src/stm32f4xx_rcc.c ****   * @param  PLLP: specifies the division factor for main system clock (SYSCLK)
 471:lib/src/stm32f4xx_rcc.c ****   *          This parameter must be a number in the range {2, 4, 6, or 8}.
 472:lib/src/stm32f4xx_rcc.c ****   * @note   You have to set the PLLP parameter correctly to not exceed 168 MHz on
 473:lib/src/stm32f4xx_rcc.c ****   *         the System clock frequency.
 474:lib/src/stm32f4xx_rcc.c ****   *  
 475:lib/src/stm32f4xx_rcc.c ****   * @param  PLLQ: specifies the division factor for OTG FS, SDIO and RNG clocks
 476:lib/src/stm32f4xx_rcc.c ****   *          This parameter must be a number between 4 and 15.
 477:lib/src/stm32f4xx_rcc.c ****   *
 478:lib/src/stm32f4xx_rcc.c ****   * @param  PLLR: specifies the division factor for I2S, SAI, SYSTEM, SPDIF in STM32F446xx devices
 479:lib/src/stm32f4xx_rcc.c ****   *          This parameter must be a number between 2 and 7.
 480:lib/src/stm32f4xx_rcc.c ****   *
 481:lib/src/stm32f4xx_rcc.c ****   * @note   If the USB OTG FS is used in your application, you have to set the
 482:lib/src/stm32f4xx_rcc.c ****   *         PLLQ parameter correctly to have 48 MHz clock for the USB. However,
 483:lib/src/stm32f4xx_rcc.c ****   *         the SDIO and RNG need a frequency lower than or equal to 48 MHz to work
 484:lib/src/stm32f4xx_rcc.c ****   *         correctly.
 485:lib/src/stm32f4xx_rcc.c ****   *   
 486:lib/src/stm32f4xx_rcc.c ****   * @retval None
 487:lib/src/stm32f4xx_rcc.c ****   */
 488:lib/src/stm32f4xx_rcc.c **** void RCC_PLLConfig(uint32_t RCC_PLLSource, uint32_t PLLM, uint32_t PLLN, uint32_t PLLP, uint32_t PL
 489:lib/src/stm32f4xx_rcc.c **** {
 490:lib/src/stm32f4xx_rcc.c ****   /* Check the parameters */
 491:lib/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLL_SOURCE(RCC_PLLSource));
 492:lib/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLLM_VALUE(PLLM));
 493:lib/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLLN_VALUE(PLLN));
 494:lib/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLLP_VALUE(PLLP));
 495:lib/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLLQ_VALUE(PLLQ));
 496:lib/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLLR_VALUE(PLLR));
 497:lib/src/stm32f4xx_rcc.c ****   
 498:lib/src/stm32f4xx_rcc.c ****   RCC->PLLCFGR = PLLM | (PLLN << 6) | (((PLLP >> 1) -1) << 16) | (RCC_PLLSource) |
 499:lib/src/stm32f4xx_rcc.c ****                  (PLLQ << 24) | (PLLR << 28);
 500:lib/src/stm32f4xx_rcc.c **** }
 501:lib/src/stm32f4xx_rcc.c **** #endif /* STM32F410xx || STM32F412xG || STM32F413_423xx || STM32F446xx || STM32F469_479xx */
 502:lib/src/stm32f4xx_rcc.c **** 
 503:lib/src/stm32f4xx_rcc.c **** #if defined(STM32F40_41xxx) || defined(STM32F427_437xx) || defined(STM32F429_439xx) || defined(STM3
 504:lib/src/stm32f4xx_rcc.c **** /**
 505:lib/src/stm32f4xx_rcc.c ****   * @brief  Configures the main PLL clock source, multiplication and division factors.
 506:lib/src/stm32f4xx_rcc.c ****   * @note   This function must be used only when the main PLL is disabled.
 507:lib/src/stm32f4xx_rcc.c ****   *  
 508:lib/src/stm32f4xx_rcc.c ****   * @param  RCC_PLLSource: specifies the PLL entry clock source.
 509:lib/src/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
 510:lib/src/stm32f4xx_rcc.c ****   *            @arg RCC_PLLSource_HSI: HSI oscillator clock selected as PLL clock entry
 511:lib/src/stm32f4xx_rcc.c ****   *            @arg RCC_PLLSource_HSE: HSE oscillator clock selected as PLL clock entry
 512:lib/src/stm32f4xx_rcc.c ****   * @note   This clock source (RCC_PLLSource) is common for the main PLL and PLLI2S.  
 513:lib/src/stm32f4xx_rcc.c ****   *  
 514:lib/src/stm32f4xx_rcc.c ****   * @param  PLLM: specifies the division factor for PLL VCO input clock
ARM GAS  C:\Users\rinck\AppData\Local\Temp\ccnBBAPb.s 			page 14


 515:lib/src/stm32f4xx_rcc.c ****   *          This parameter must be a number between 0 and 63.
 516:lib/src/stm32f4xx_rcc.c ****   * @note   You have to set the PLLM parameter correctly to ensure that the VCO input
 517:lib/src/stm32f4xx_rcc.c ****   *         frequency ranges from 1 to 2 MHz. It is recommended to select a frequency
 518:lib/src/stm32f4xx_rcc.c ****   *         of 2 MHz to limit PLL jitter.
 519:lib/src/stm32f4xx_rcc.c ****   *  
 520:lib/src/stm32f4xx_rcc.c ****   * @param  PLLN: specifies the multiplication factor for PLL VCO output clock
 521:lib/src/stm32f4xx_rcc.c ****   *          This parameter must be a number between 50 and 432.
 522:lib/src/stm32f4xx_rcc.c ****   * @note   You have to set the PLLN parameter correctly to ensure that the VCO
 523:lib/src/stm32f4xx_rcc.c ****   *         output frequency is between 100 and 432 MHz.
 524:lib/src/stm32f4xx_rcc.c ****   *   
 525:lib/src/stm32f4xx_rcc.c ****   * @param  PLLP: specifies the division factor for main system clock (SYSCLK)
 526:lib/src/stm32f4xx_rcc.c ****   *          This parameter must be a number in the range {2, 4, 6, or 8}.
 527:lib/src/stm32f4xx_rcc.c ****   * @note   You have to set the PLLP parameter correctly to not exceed 168 MHz on
 528:lib/src/stm32f4xx_rcc.c ****   *         the System clock frequency.
 529:lib/src/stm32f4xx_rcc.c ****   *  
 530:lib/src/stm32f4xx_rcc.c ****   * @param  PLLQ: specifies the division factor for OTG FS, SDIO and RNG clocks
 531:lib/src/stm32f4xx_rcc.c ****   *          This parameter must be a number between 4 and 15.
 532:lib/src/stm32f4xx_rcc.c ****   * @note   If the USB OTG FS is used in your application, you have to set the
 533:lib/src/stm32f4xx_rcc.c ****   *         PLLQ parameter correctly to have 48 MHz clock for the USB. However,
 534:lib/src/stm32f4xx_rcc.c ****   *         the SDIO and RNG need a frequency lower than or equal to 48 MHz to work
 535:lib/src/stm32f4xx_rcc.c ****   *         correctly.
 536:lib/src/stm32f4xx_rcc.c ****   *   
 537:lib/src/stm32f4xx_rcc.c ****   * @retval None
 538:lib/src/stm32f4xx_rcc.c ****   */
 539:lib/src/stm32f4xx_rcc.c **** void RCC_PLLConfig(uint32_t RCC_PLLSource, uint32_t PLLM, uint32_t PLLN, uint32_t PLLP, uint32_t PL
 540:lib/src/stm32f4xx_rcc.c **** {
 241              		.loc 1 540 0
 242              		.cfi_startproc
 243              		@ args = 4, pretend = 0, frame = 0
 244              		@ frame_needed = 0, uses_anonymous_args = 0
 245              		@ link register save eliminated.
 246              	.LVL8:
 541:lib/src/stm32f4xx_rcc.c ****   /* Check the parameters */
 542:lib/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLL_SOURCE(RCC_PLLSource));
 543:lib/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLLM_VALUE(PLLM));
 544:lib/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLLN_VALUE(PLLN));
 545:lib/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLLP_VALUE(PLLP));
 546:lib/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLLQ_VALUE(PLLQ));
 547:lib/src/stm32f4xx_rcc.c **** 
 548:lib/src/stm32f4xx_rcc.c ****   RCC->PLLCFGR = PLLM | (PLLN << 6) | (((PLLP >> 1) -1) << 16) | (RCC_PLLSource) |
 247              		.loc 1 548 0
 248 0000 41EA8211 		orr	r1, r1, r2, lsl #6
 249              	.LVL9:
 250 0004 5B08     		lsrs	r3, r3, #1
 251              	.LVL10:
 252 0006 013B     		subs	r3, r3, #1
 253 0008 41EA0341 		orr	r1, r1, r3, lsl #16
 254 000c 0843     		orrs	r0, r0, r1
 255              	.LVL11:
 256 000e 009B     		ldr	r3, [sp]
 257 0010 40EA0361 		orr	r1, r0, r3, lsl #24
 258 0014 014B     		ldr	r3, .L23
 259 0016 5960     		str	r1, [r3, #4]
 260              	.LVL12:
 261 0018 7047     		bx	lr
 262              	.L24:
 263 001a 00BF     		.align	2
ARM GAS  C:\Users\rinck\AppData\Local\Temp\ccnBBAPb.s 			page 15


 264              	.L23:
 265 001c 00380240 		.word	1073887232
 266              		.cfi_endproc
 267              	.LFE130:
 269              		.section	.text.RCC_PLLCmd,"ax",%progbits
 270              		.align	2
 271              		.global	RCC_PLLCmd
 272              		.thumb
 273              		.thumb_func
 275              	RCC_PLLCmd:
 276              	.LFB131:
 549:lib/src/stm32f4xx_rcc.c ****                  (PLLQ << 24);
 550:lib/src/stm32f4xx_rcc.c **** }
 551:lib/src/stm32f4xx_rcc.c **** #endif /* STM32F40_41xxx || STM32F427_437xx || STM32F429_439xx || STM32F401xx || STM32F411xE */
 552:lib/src/stm32f4xx_rcc.c **** 
 553:lib/src/stm32f4xx_rcc.c **** /**
 554:lib/src/stm32f4xx_rcc.c ****   * @brief  Enables or disables the main PLL.
 555:lib/src/stm32f4xx_rcc.c ****   * @note   After enabling the main PLL, the application software should wait on 
 556:lib/src/stm32f4xx_rcc.c ****   *         PLLRDY flag to be set indicating that PLL clock is stable and can
 557:lib/src/stm32f4xx_rcc.c ****   *         be used as system clock source.
 558:lib/src/stm32f4xx_rcc.c ****   * @note   The main PLL can not be disabled if it is used as system clock source
 559:lib/src/stm32f4xx_rcc.c ****   * @note   The main PLL is disabled by hardware when entering STOP and STANDBY modes.
 560:lib/src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the main PLL. This parameter can be: ENABLE or DISABLE.
 561:lib/src/stm32f4xx_rcc.c ****   * @retval None
 562:lib/src/stm32f4xx_rcc.c ****   */
 563:lib/src/stm32f4xx_rcc.c **** void RCC_PLLCmd(FunctionalState NewState)
 564:lib/src/stm32f4xx_rcc.c **** {
 277              		.loc 1 564 0
 278              		.cfi_startproc
 279              		@ args = 0, pretend = 0, frame = 0
 280              		@ frame_needed = 0, uses_anonymous_args = 0
 281              		@ link register save eliminated.
 282              	.LVL13:
 565:lib/src/stm32f4xx_rcc.c ****   /* Check the parameters */
 566:lib/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 567:lib/src/stm32f4xx_rcc.c ****   *(__IO uint32_t *) CR_PLLON_BB = (uint32_t)NewState;
 283              		.loc 1 567 0
 284 0000 014B     		ldr	r3, .L26
 285 0002 1860     		str	r0, [r3]
 286 0004 7047     		bx	lr
 287              	.L27:
 288 0006 00BF     		.align	2
 289              	.L26:
 290 0008 60004742 		.word	1111949408
 291              		.cfi_endproc
 292              	.LFE131:
 294              		.section	.text.RCC_PLLI2SConfig,"ax",%progbits
 295              		.align	2
 296              		.global	RCC_PLLI2SConfig
 297              		.thumb
 298              		.thumb_func
 300              	RCC_PLLI2SConfig:
 301              	.LFB132:
 568:lib/src/stm32f4xx_rcc.c **** }
 569:lib/src/stm32f4xx_rcc.c **** 
 570:lib/src/stm32f4xx_rcc.c **** #if defined(STM32F40_41xxx) || defined(STM32F401xx)
 571:lib/src/stm32f4xx_rcc.c **** /**
ARM GAS  C:\Users\rinck\AppData\Local\Temp\ccnBBAPb.s 			page 16


 572:lib/src/stm32f4xx_rcc.c ****   * @brief  Configures the PLLI2S clock multiplication and division factors.
 573:lib/src/stm32f4xx_rcc.c ****   *  
 574:lib/src/stm32f4xx_rcc.c ****   * @note   This function can be used only for STM32F405xx/407xx, STM32F415xx/417xx 
 575:lib/src/stm32f4xx_rcc.c ****   *         or STM32F401xx devices. 
 576:lib/src/stm32f4xx_rcc.c ****   *    
 577:lib/src/stm32f4xx_rcc.c ****   * @note   This function must be used only when the PLLI2S is disabled.
 578:lib/src/stm32f4xx_rcc.c ****   * @note   PLLI2S clock source is common with the main PLL (configured in 
 579:lib/src/stm32f4xx_rcc.c ****   *         RCC_PLLConfig function )  
 580:lib/src/stm32f4xx_rcc.c ****   *             
 581:lib/src/stm32f4xx_rcc.c ****   * @param  PLLI2SN: specifies the multiplication factor for PLLI2S VCO output clock
 582:lib/src/stm32f4xx_rcc.c ****   *          This parameter must be a number between 50 and 432.
 583:lib/src/stm32f4xx_rcc.c ****   * @note   You have to set the PLLI2SN parameter correctly to ensure that the VCO 
 584:lib/src/stm32f4xx_rcc.c ****   *         output frequency is between 100 and 432 MHz.
 585:lib/src/stm32f4xx_rcc.c ****   *    
 586:lib/src/stm32f4xx_rcc.c ****   * @param  PLLI2SR: specifies the division factor for I2S clock
 587:lib/src/stm32f4xx_rcc.c ****   *          This parameter must be a number between 2 and 7.
 588:lib/src/stm32f4xx_rcc.c ****   * @note   You have to set the PLLI2SR parameter correctly to not exceed 192 MHz
 589:lib/src/stm32f4xx_rcc.c ****   *         on the I2S clock frequency.
 590:lib/src/stm32f4xx_rcc.c ****   *   
 591:lib/src/stm32f4xx_rcc.c ****   * @retval None
 592:lib/src/stm32f4xx_rcc.c ****   */
 593:lib/src/stm32f4xx_rcc.c **** void RCC_PLLI2SConfig(uint32_t PLLI2SN, uint32_t PLLI2SR)
 594:lib/src/stm32f4xx_rcc.c **** {
 302              		.loc 1 594 0
 303              		.cfi_startproc
 304              		@ args = 0, pretend = 0, frame = 0
 305              		@ frame_needed = 0, uses_anonymous_args = 0
 306              		@ link register save eliminated.
 307              	.LVL14:
 595:lib/src/stm32f4xx_rcc.c ****   /* Check the parameters */
 596:lib/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLLI2SN_VALUE(PLLI2SN));
 597:lib/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLLI2SR_VALUE(PLLI2SR));
 598:lib/src/stm32f4xx_rcc.c **** 
 599:lib/src/stm32f4xx_rcc.c ****   RCC->PLLI2SCFGR = (PLLI2SN << 6) | (PLLI2SR << 28);
 308              		.loc 1 599 0
 309 0000 0907     		lsls	r1, r1, #28
 310              	.LVL15:
 311 0002 41EA8010 		orr	r0, r1, r0, lsl #6
 312              	.LVL16:
 313 0006 024B     		ldr	r3, .L29
 314 0008 C3F88400 		str	r0, [r3, #132]
 315 000c 7047     		bx	lr
 316              	.L30:
 317 000e 00BF     		.align	2
 318              	.L29:
 319 0010 00380240 		.word	1073887232
 320              		.cfi_endproc
 321              	.LFE132:
 323              		.section	.text.RCC_PLLI2SCmd,"ax",%progbits
 324              		.align	2
 325              		.global	RCC_PLLI2SCmd
 326              		.thumb
 327              		.thumb_func
 329              	RCC_PLLI2SCmd:
 330              	.LFB133:
 600:lib/src/stm32f4xx_rcc.c **** }
 601:lib/src/stm32f4xx_rcc.c **** #endif /* STM32F40_41xxx || STM32F401xx */
ARM GAS  C:\Users\rinck\AppData\Local\Temp\ccnBBAPb.s 			page 17


 602:lib/src/stm32f4xx_rcc.c **** 
 603:lib/src/stm32f4xx_rcc.c **** #if defined(STM32F411xE)
 604:lib/src/stm32f4xx_rcc.c **** /**
 605:lib/src/stm32f4xx_rcc.c ****   * @brief  Configures the PLLI2S clock multiplication and division factors.
 606:lib/src/stm32f4xx_rcc.c ****   *  
 607:lib/src/stm32f4xx_rcc.c ****   * @note   This function can be used only for STM32F411xE devices. 
 608:lib/src/stm32f4xx_rcc.c ****   *    
 609:lib/src/stm32f4xx_rcc.c ****   * @note   This function must be used only when the PLLI2S is disabled.
 610:lib/src/stm32f4xx_rcc.c ****   * @note   PLLI2S clock source is common with the main PLL (configured in 
 611:lib/src/stm32f4xx_rcc.c ****   *         RCC_PLLConfig function )  
 612:lib/src/stm32f4xx_rcc.c ****   *
 613:lib/src/stm32f4xx_rcc.c ****   * @param  PLLI2SM: specifies the division factor for PLLI2S VCO input clock
 614:lib/src/stm32f4xx_rcc.c ****   *         This parameter must be a number between Min_Data = 2 and Max_Data = 63.
 615:lib/src/stm32f4xx_rcc.c ****   * @note   You have to set the PLLI2SM parameter correctly to ensure that the VCO input
 616:lib/src/stm32f4xx_rcc.c ****   *         frequency ranges from 1 to 2 MHz. It is recommended to select a frequency
 617:lib/src/stm32f4xx_rcc.c ****   *         of 2 MHz to limit PLLI2S jitter.
 618:lib/src/stm32f4xx_rcc.c ****   *
 619:lib/src/stm32f4xx_rcc.c ****   * @param  PLLI2SN: specifies the multiplication factor for PLLI2S VCO output clock
 620:lib/src/stm32f4xx_rcc.c ****   *          This parameter must be a number between 50 and 432.
 621:lib/src/stm32f4xx_rcc.c ****   * @note   You have to set the PLLI2SN parameter correctly to ensure that the VCO 
 622:lib/src/stm32f4xx_rcc.c ****   *         output frequency is between 100 and 432 MHz.
 623:lib/src/stm32f4xx_rcc.c ****   *    
 624:lib/src/stm32f4xx_rcc.c ****   * @param  PLLI2SR: specifies the division factor for I2S clock
 625:lib/src/stm32f4xx_rcc.c ****   *          This parameter must be a number between 2 and 7.
 626:lib/src/stm32f4xx_rcc.c ****   * @note   You have to set the PLLI2SR parameter correctly to not exceed 192 MHz
 627:lib/src/stm32f4xx_rcc.c ****   *         on the I2S clock frequency.
 628:lib/src/stm32f4xx_rcc.c ****   *   
 629:lib/src/stm32f4xx_rcc.c ****   * @retval None
 630:lib/src/stm32f4xx_rcc.c ****   */
 631:lib/src/stm32f4xx_rcc.c **** void RCC_PLLI2SConfig(uint32_t PLLI2SN, uint32_t PLLI2SR, uint32_t PLLI2SM)
 632:lib/src/stm32f4xx_rcc.c **** {
 633:lib/src/stm32f4xx_rcc.c ****   /* Check the parameters */
 634:lib/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLLI2SN_VALUE(PLLI2SN));
 635:lib/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLLI2SM_VALUE(PLLI2SM));
 636:lib/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLLI2SR_VALUE(PLLI2SR));
 637:lib/src/stm32f4xx_rcc.c **** 
 638:lib/src/stm32f4xx_rcc.c ****   RCC->PLLI2SCFGR = (PLLI2SN << 6) | (PLLI2SR << 28) | PLLI2SM;
 639:lib/src/stm32f4xx_rcc.c **** }
 640:lib/src/stm32f4xx_rcc.c **** #endif /* STM32F411xE */
 641:lib/src/stm32f4xx_rcc.c **** 
 642:lib/src/stm32f4xx_rcc.c **** #if defined(STM32F427_437xx) || defined(STM32F429_439xx) || defined(STM32F469_479xx)
 643:lib/src/stm32f4xx_rcc.c **** /**
 644:lib/src/stm32f4xx_rcc.c ****   * @brief  Configures the PLLI2S clock multiplication and division factors.
 645:lib/src/stm32f4xx_rcc.c ****   * 
 646:lib/src/stm32f4xx_rcc.c ****   * @note   This function can be used only for STM32F42xxx/43xxx devices 
 647:lib/src/stm32f4xx_rcc.c ****   *         
 648:lib/src/stm32f4xx_rcc.c ****   * @note   This function must be used only when the PLLI2S is disabled.
 649:lib/src/stm32f4xx_rcc.c ****   * @note   PLLI2S clock source is common with the main PLL (configured in 
 650:lib/src/stm32f4xx_rcc.c ****   *         RCC_PLLConfig function )  
 651:lib/src/stm32f4xx_rcc.c ****   *             
 652:lib/src/stm32f4xx_rcc.c ****   * @param  PLLI2SN: specifies the multiplication factor for PLLI2S VCO output clock
 653:lib/src/stm32f4xx_rcc.c ****   *          This parameter must be a number between 50 and 432.
 654:lib/src/stm32f4xx_rcc.c ****   * @note   You have to set the PLLI2SN parameter correctly to ensure that the VCO 
 655:lib/src/stm32f4xx_rcc.c ****   *         output frequency is between 100 and 432 MHz.
 656:lib/src/stm32f4xx_rcc.c ****   * 
 657:lib/src/stm32f4xx_rcc.c ****   * @param  PLLI2SQ: specifies the division factor for SAI1 clock
 658:lib/src/stm32f4xx_rcc.c ****   *          This parameter must be a number between 2 and 15.
ARM GAS  C:\Users\rinck\AppData\Local\Temp\ccnBBAPb.s 			page 18


 659:lib/src/stm32f4xx_rcc.c ****   *                 
 660:lib/src/stm32f4xx_rcc.c ****   * @param  PLLI2SR: specifies the division factor for I2S clock
 661:lib/src/stm32f4xx_rcc.c ****   *          This parameter must be a number between 2 and 7.
 662:lib/src/stm32f4xx_rcc.c ****   * @note   You have to set the PLLI2SR parameter correctly to not exceed 192 MHz
 663:lib/src/stm32f4xx_rcc.c ****   *         on the I2S clock frequency.
 664:lib/src/stm32f4xx_rcc.c ****   *   
 665:lib/src/stm32f4xx_rcc.c ****   * @retval None
 666:lib/src/stm32f4xx_rcc.c ****   */
 667:lib/src/stm32f4xx_rcc.c **** void RCC_PLLI2SConfig(uint32_t PLLI2SN, uint32_t PLLI2SQ, uint32_t PLLI2SR)
 668:lib/src/stm32f4xx_rcc.c **** {
 669:lib/src/stm32f4xx_rcc.c ****   /* Check the parameters */
 670:lib/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLLI2SN_VALUE(PLLI2SN));
 671:lib/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLLI2SQ_VALUE(PLLI2SQ));
 672:lib/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLLI2SR_VALUE(PLLI2SR));
 673:lib/src/stm32f4xx_rcc.c **** 
 674:lib/src/stm32f4xx_rcc.c ****   RCC->PLLI2SCFGR = (PLLI2SN << 6) | (PLLI2SQ << 24) | (PLLI2SR << 28);
 675:lib/src/stm32f4xx_rcc.c **** }
 676:lib/src/stm32f4xx_rcc.c **** #endif /* STM32F427_437xx || STM32F429_439xx || STM32F469_479xx */
 677:lib/src/stm32f4xx_rcc.c **** 
 678:lib/src/stm32f4xx_rcc.c **** #if defined(STM32F412xG ) || defined(STM32F413_423xx) || defined(STM32F446xx)
 679:lib/src/stm32f4xx_rcc.c **** /**
 680:lib/src/stm32f4xx_rcc.c ****   * @brief  Configures the PLLI2S clock multiplication and division factors.
 681:lib/src/stm32f4xx_rcc.c ****   * 
 682:lib/src/stm32f4xx_rcc.c ****   * @note   This function can be used only for STM32F446xx devices 
 683:lib/src/stm32f4xx_rcc.c ****   *         
 684:lib/src/stm32f4xx_rcc.c ****   * @note   This function must be used only when the PLLI2S is disabled.
 685:lib/src/stm32f4xx_rcc.c ****   * @note   PLLI2S clock source is common with the main PLL (configured in 
 686:lib/src/stm32f4xx_rcc.c ****   *         RCC_PLLConfig function )  
 687:lib/src/stm32f4xx_rcc.c ****   * 
 688:lib/src/stm32f4xx_rcc.c ****   * @param  PLLI2SM: specifies the division factor for PLLI2S VCO input clock
 689:lib/src/stm32f4xx_rcc.c ****   *         This parameter must be a number between Min_Data = 2 and Max_Data = 63.
 690:lib/src/stm32f4xx_rcc.c ****   * @note   You have to set the PLLI2SM parameter correctly to ensure that the VCO input
 691:lib/src/stm32f4xx_rcc.c ****   *         frequency ranges from 1 to 2 MHz. It is recommended to select a frequency
 692:lib/src/stm32f4xx_rcc.c ****   *         of 2 MHz to limit PLLI2S jitter.
 693:lib/src/stm32f4xx_rcc.c ****   *
 694:lib/src/stm32f4xx_rcc.c ****   * @param  PLLI2SN: specifies the multiplication factor for PLLI2S VCO output clock
 695:lib/src/stm32f4xx_rcc.c ****   *          This parameter must be a number between 50 and 432.
 696:lib/src/stm32f4xx_rcc.c ****   * @note   You have to set the PLLI2SN parameter correctly to ensure that the VCO 
 697:lib/src/stm32f4xx_rcc.c ****   *         output frequency is between 100 and 432 MHz.
 698:lib/src/stm32f4xx_rcc.c ****   *
 699:lib/src/stm32f4xx_rcc.c ****   * @param  PLLI2SP: specifies the division factor for PLL 48Mhz clock output
 700:lib/src/stm32f4xx_rcc.c ****   *          This parameter must be a number in the range {2, 4, 6, or 8}.
 701:lib/src/stm32f4xx_rcc.c ****   *
 702:lib/src/stm32f4xx_rcc.c ****   * @param  PLLI2SQ: specifies the division factor for SAI1 clock
 703:lib/src/stm32f4xx_rcc.c ****   *          This parameter must be a number between 2 and 15.
 704:lib/src/stm32f4xx_rcc.c ****   *                 
 705:lib/src/stm32f4xx_rcc.c ****   * @param  PLLI2SR: specifies the division factor for I2S clock
 706:lib/src/stm32f4xx_rcc.c ****   *          This parameter must be a number between 2 and 7.
 707:lib/src/stm32f4xx_rcc.c ****   * @note   You have to set the PLLI2SR parameter correctly to not exceed 192 MHz
 708:lib/src/stm32f4xx_rcc.c ****   *         on the I2S clock frequency.
 709:lib/src/stm32f4xx_rcc.c ****   * @note   the PLLI2SR parameter is only available with STM32F42xxx/43xxx devices.  
 710:lib/src/stm32f4xx_rcc.c ****   *   
 711:lib/src/stm32f4xx_rcc.c ****   * @retval None
 712:lib/src/stm32f4xx_rcc.c ****   */
 713:lib/src/stm32f4xx_rcc.c **** void RCC_PLLI2SConfig(uint32_t PLLI2SM, uint32_t PLLI2SN, uint32_t PLLI2SP, uint32_t PLLI2SQ, uint3
 714:lib/src/stm32f4xx_rcc.c **** {
 715:lib/src/stm32f4xx_rcc.c ****   /* Check the parameters */
ARM GAS  C:\Users\rinck\AppData\Local\Temp\ccnBBAPb.s 			page 19


 716:lib/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLLI2SM_VALUE(PLLI2SM));
 717:lib/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLLI2SN_VALUE(PLLI2SN));
 718:lib/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLLI2SP_VALUE(PLLI2SP));
 719:lib/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLLI2SQ_VALUE(PLLI2SQ));
 720:lib/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLLI2SR_VALUE(PLLI2SR));
 721:lib/src/stm32f4xx_rcc.c **** 
 722:lib/src/stm32f4xx_rcc.c ****   RCC->PLLI2SCFGR =  PLLI2SM | (PLLI2SN << 6) | (((PLLI2SP >> 1) -1) << 16) | (PLLI2SQ << 24) | (PL
 723:lib/src/stm32f4xx_rcc.c **** }
 724:lib/src/stm32f4xx_rcc.c **** #endif /* STM32F412xG || STM32F413_423xx || STM32F446xx */
 725:lib/src/stm32f4xx_rcc.c **** 
 726:lib/src/stm32f4xx_rcc.c **** /**
 727:lib/src/stm32f4xx_rcc.c ****   * @brief  Enables or disables the PLLI2S. 
 728:lib/src/stm32f4xx_rcc.c ****   * @note   The PLLI2S is disabled by hardware when entering STOP and STANDBY modes.  
 729:lib/src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the PLLI2S. This parameter can be: ENABLE or DISABLE.
 730:lib/src/stm32f4xx_rcc.c ****   * @retval None
 731:lib/src/stm32f4xx_rcc.c ****   */
 732:lib/src/stm32f4xx_rcc.c **** void RCC_PLLI2SCmd(FunctionalState NewState)
 733:lib/src/stm32f4xx_rcc.c **** {
 331              		.loc 1 733 0
 332              		.cfi_startproc
 333              		@ args = 0, pretend = 0, frame = 0
 334              		@ frame_needed = 0, uses_anonymous_args = 0
 335              		@ link register save eliminated.
 336              	.LVL17:
 734:lib/src/stm32f4xx_rcc.c ****   /* Check the parameters */
 735:lib/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 736:lib/src/stm32f4xx_rcc.c ****   *(__IO uint32_t *) CR_PLLI2SON_BB = (uint32_t)NewState;
 337              		.loc 1 736 0
 338 0000 014B     		ldr	r3, .L32
 339 0002 1860     		str	r0, [r3]
 340 0004 7047     		bx	lr
 341              	.L33:
 342 0006 00BF     		.align	2
 343              	.L32:
 344 0008 68004742 		.word	1111949416
 345              		.cfi_endproc
 346              	.LFE133:
 348              		.section	.text.RCC_PLLSAIConfig,"ax",%progbits
 349              		.align	2
 350              		.global	RCC_PLLSAIConfig
 351              		.thumb
 352              		.thumb_func
 354              	RCC_PLLSAIConfig:
 355              	.LFB134:
 737:lib/src/stm32f4xx_rcc.c **** }
 738:lib/src/stm32f4xx_rcc.c **** 
 739:lib/src/stm32f4xx_rcc.c **** #if defined(STM32F469_479xx)
 740:lib/src/stm32f4xx_rcc.c **** /**
 741:lib/src/stm32f4xx_rcc.c ****   * @brief  Configures the PLLSAI clock multiplication and division factors.
 742:lib/src/stm32f4xx_rcc.c ****   *
 743:lib/src/stm32f4xx_rcc.c ****   * @note   This function can be used only for STM32F469_479xx devices 
 744:lib/src/stm32f4xx_rcc.c ****   *        
 745:lib/src/stm32f4xx_rcc.c ****   * @note   This function must be used only when the PLLSAI is disabled.
 746:lib/src/stm32f4xx_rcc.c ****   * @note   PLLSAI clock source is common with the main PLL (configured in 
 747:lib/src/stm32f4xx_rcc.c ****   *         RCC_PLLConfig function )  
 748:lib/src/stm32f4xx_rcc.c ****   *
 749:lib/src/stm32f4xx_rcc.c ****   * @param  PLLSAIN: specifies the multiplication factor for PLLSAI VCO output clock
ARM GAS  C:\Users\rinck\AppData\Local\Temp\ccnBBAPb.s 			page 20


 750:lib/src/stm32f4xx_rcc.c ****   *         This parameter must be a number between 50 and 432.
 751:lib/src/stm32f4xx_rcc.c ****   * @note   You have to set the PLLSAIN parameter correctly to ensure that the VCO 
 752:lib/src/stm32f4xx_rcc.c ****   *         output frequency is between 100 and 432 MHz.
 753:lib/src/stm32f4xx_rcc.c ****   *
 754:lib/src/stm32f4xx_rcc.c ****   * @param  PLLSAIP: specifies the division factor for PLL 48Mhz clock output
 755:lib/src/stm32f4xx_rcc.c ****   *         This parameter must be a number in the range {2, 4, 6, or 8}..
 756:lib/src/stm32f4xx_rcc.c ****   *           
 757:lib/src/stm32f4xx_rcc.c ****   * @param  PLLSAIQ: specifies the division factor for SAI1 clock
 758:lib/src/stm32f4xx_rcc.c ****   *         This parameter must be a number between 2 and 15.
 759:lib/src/stm32f4xx_rcc.c ****   *            
 760:lib/src/stm32f4xx_rcc.c ****   * @param  PLLSAIR: specifies the division factor for LTDC clock
 761:lib/src/stm32f4xx_rcc.c ****   *          This parameter must be a number between 2 and 7.
 762:lib/src/stm32f4xx_rcc.c ****   *   
 763:lib/src/stm32f4xx_rcc.c ****   * @retval None
 764:lib/src/stm32f4xx_rcc.c ****   */
 765:lib/src/stm32f4xx_rcc.c **** void RCC_PLLSAIConfig(uint32_t PLLSAIN, uint32_t PLLSAIP, uint32_t PLLSAIQ, uint32_t PLLSAIR)
 766:lib/src/stm32f4xx_rcc.c **** {
 767:lib/src/stm32f4xx_rcc.c ****   /* Check the parameters */
 768:lib/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLLSAIN_VALUE(PLLSAIN));
 769:lib/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLLSAIP_VALUE(PLLSAIP));
 770:lib/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLLSAIQ_VALUE(PLLSAIQ));
 771:lib/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLLSAIR_VALUE(PLLSAIR));
 772:lib/src/stm32f4xx_rcc.c **** 
 773:lib/src/stm32f4xx_rcc.c ****   RCC->PLLSAICFGR = (PLLSAIN << 6) | (((PLLSAIP >> 1) -1) << 16) | (PLLSAIQ << 24) | (PLLSAIR << 28
 774:lib/src/stm32f4xx_rcc.c **** }
 775:lib/src/stm32f4xx_rcc.c **** #endif /* STM32F469_479xx */
 776:lib/src/stm32f4xx_rcc.c **** 
 777:lib/src/stm32f4xx_rcc.c **** #if defined(STM32F446xx)
 778:lib/src/stm32f4xx_rcc.c **** /**
 779:lib/src/stm32f4xx_rcc.c ****   * @brief  Configures the PLLSAI clock multiplication and division factors.
 780:lib/src/stm32f4xx_rcc.c ****   *
 781:lib/src/stm32f4xx_rcc.c ****   * @note   This function can be used only for STM32F446xx devices 
 782:lib/src/stm32f4xx_rcc.c ****   *        
 783:lib/src/stm32f4xx_rcc.c ****   * @note   This function must be used only when the PLLSAI is disabled.
 784:lib/src/stm32f4xx_rcc.c ****   * @note   PLLSAI clock source is common with the main PLL (configured in 
 785:lib/src/stm32f4xx_rcc.c ****   *         RCC_PLLConfig function )  
 786:lib/src/stm32f4xx_rcc.c ****   * 
 787:lib/src/stm32f4xx_rcc.c ****   * @param  PLLSAIM: specifies the division factor for PLLSAI VCO input clock
 788:lib/src/stm32f4xx_rcc.c ****   *         This parameter must be a number between Min_Data = 2 and Max_Data = 63.
 789:lib/src/stm32f4xx_rcc.c ****   * @note   You have to set the PLLSAIM parameter correctly to ensure that the VCO input
 790:lib/src/stm32f4xx_rcc.c ****   *         frequency ranges from 1 to 2 MHz. It is recommended to select a frequency
 791:lib/src/stm32f4xx_rcc.c ****   *         of 2 MHz to limit PLLSAI jitter.
 792:lib/src/stm32f4xx_rcc.c ****   *
 793:lib/src/stm32f4xx_rcc.c ****   * @param  PLLSAIN: specifies the multiplication factor for PLLSAI VCO output clock
 794:lib/src/stm32f4xx_rcc.c ****   *         This parameter must be a number between 50 and 432.
 795:lib/src/stm32f4xx_rcc.c ****   * @note   You have to set the PLLSAIN parameter correctly to ensure that the VCO 
 796:lib/src/stm32f4xx_rcc.c ****   *         output frequency is between 100 and 432 MHz.
 797:lib/src/stm32f4xx_rcc.c ****   * 
 798:lib/src/stm32f4xx_rcc.c ****   * @param  PLLSAIP: specifies the division factor for PLL 48Mhz clock output
 799:lib/src/stm32f4xx_rcc.c ****   *         This parameter must be a number in the range {2, 4, 6, or 8}.
 800:lib/src/stm32f4xx_rcc.c ****   *
 801:lib/src/stm32f4xx_rcc.c ****   * @param  PLLSAIQ: specifies the division factor for SAI1 clock
 802:lib/src/stm32f4xx_rcc.c ****   *         This parameter must be a number between 2 and 15.
 803:lib/src/stm32f4xx_rcc.c ****   *   
 804:lib/src/stm32f4xx_rcc.c ****   * @retval None
 805:lib/src/stm32f4xx_rcc.c ****   */
 806:lib/src/stm32f4xx_rcc.c **** void RCC_PLLSAIConfig(uint32_t PLLSAIM, uint32_t PLLSAIN, uint32_t PLLSAIP, uint32_t PLLSAIQ)
ARM GAS  C:\Users\rinck\AppData\Local\Temp\ccnBBAPb.s 			page 21


 807:lib/src/stm32f4xx_rcc.c **** {
 808:lib/src/stm32f4xx_rcc.c ****   /* Check the parameters */
 809:lib/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLLSAIM_VALUE(PLLSAIM));
 810:lib/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLLSAIN_VALUE(PLLSAIN));
 811:lib/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLLSAIP_VALUE(PLLSAIP));
 812:lib/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLLSAIQ_VALUE(PLLSAIQ));
 813:lib/src/stm32f4xx_rcc.c **** 
 814:lib/src/stm32f4xx_rcc.c ****   RCC->PLLSAICFGR = PLLSAIM | (PLLSAIN << 6) | (((PLLSAIP >> 1) -1) << 16)  | (PLLSAIQ << 24);
 815:lib/src/stm32f4xx_rcc.c **** }
 816:lib/src/stm32f4xx_rcc.c **** #endif /* STM32F446xx */
 817:lib/src/stm32f4xx_rcc.c **** 
 818:lib/src/stm32f4xx_rcc.c **** #if defined(STM32F40_41xxx) || defined(STM32F427_437xx) || defined(STM32F429_439xx) || defined(STM3
 819:lib/src/stm32f4xx_rcc.c **** /**
 820:lib/src/stm32f4xx_rcc.c ****   * @brief  Configures the PLLSAI clock multiplication and division factors.
 821:lib/src/stm32f4xx_rcc.c ****   *
 822:lib/src/stm32f4xx_rcc.c ****   * @note   This function can be used only for STM32F42xxx/43xxx devices 
 823:lib/src/stm32f4xx_rcc.c ****   *        
 824:lib/src/stm32f4xx_rcc.c ****   * @note   This function must be used only when the PLLSAI is disabled.
 825:lib/src/stm32f4xx_rcc.c ****   * @note   PLLSAI clock source is common with the main PLL (configured in 
 826:lib/src/stm32f4xx_rcc.c ****   *         RCC_PLLConfig function )  
 827:lib/src/stm32f4xx_rcc.c ****   *             
 828:lib/src/stm32f4xx_rcc.c ****   * @param  PLLSAIN: specifies the multiplication factor for PLLSAI VCO output clock
 829:lib/src/stm32f4xx_rcc.c ****   *          This parameter must be a number between 50 and 432.
 830:lib/src/stm32f4xx_rcc.c ****   * @note   You have to set the PLLSAIN parameter correctly to ensure that the VCO 
 831:lib/src/stm32f4xx_rcc.c ****   *         output frequency is between 100 and 432 MHz.
 832:lib/src/stm32f4xx_rcc.c ****   *           
 833:lib/src/stm32f4xx_rcc.c ****   * @param  PLLSAIQ: specifies the division factor for SAI1 clock
 834:lib/src/stm32f4xx_rcc.c ****   *          This parameter must be a number between 2 and 15.
 835:lib/src/stm32f4xx_rcc.c ****   *            
 836:lib/src/stm32f4xx_rcc.c ****   * @param  PLLSAIR: specifies the division factor for LTDC clock
 837:lib/src/stm32f4xx_rcc.c ****   *          This parameter must be a number between 2 and 7.
 838:lib/src/stm32f4xx_rcc.c ****   *   
 839:lib/src/stm32f4xx_rcc.c ****   * @retval None
 840:lib/src/stm32f4xx_rcc.c ****   */
 841:lib/src/stm32f4xx_rcc.c **** void RCC_PLLSAIConfig(uint32_t PLLSAIN, uint32_t PLLSAIQ, uint32_t PLLSAIR)
 842:lib/src/stm32f4xx_rcc.c **** {
 356              		.loc 1 842 0
 357              		.cfi_startproc
 358              		@ args = 0, pretend = 0, frame = 0
 359              		@ frame_needed = 0, uses_anonymous_args = 0
 360              		@ link register save eliminated.
 361              	.LVL18:
 843:lib/src/stm32f4xx_rcc.c ****   /* Check the parameters */
 844:lib/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLLSAIN_VALUE(PLLSAIN));
 845:lib/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLLSAIR_VALUE(PLLSAIR));
 846:lib/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLLSAIQ_VALUE(PLLSAIQ));
 847:lib/src/stm32f4xx_rcc.c ****   
 848:lib/src/stm32f4xx_rcc.c ****   RCC->PLLSAICFGR = (PLLSAIN << 6) | (PLLSAIQ << 24) | (PLLSAIR << 28);
 362              		.loc 1 848 0
 363 0000 0906     		lsls	r1, r1, #24
 364              	.LVL19:
 365 0002 41EA8010 		orr	r0, r1, r0, lsl #6
 366              	.LVL20:
 367 0006 40EA0272 		orr	r2, r0, r2, lsl #28
 368              	.LVL21:
 369 000a 024B     		ldr	r3, .L35
 370 000c C3F88820 		str	r2, [r3, #136]
ARM GAS  C:\Users\rinck\AppData\Local\Temp\ccnBBAPb.s 			page 22


 371 0010 7047     		bx	lr
 372              	.L36:
 373 0012 00BF     		.align	2
 374              	.L35:
 375 0014 00380240 		.word	1073887232
 376              		.cfi_endproc
 377              	.LFE134:
 379              		.section	.text.RCC_PLLSAICmd,"ax",%progbits
 380              		.align	2
 381              		.global	RCC_PLLSAICmd
 382              		.thumb
 383              		.thumb_func
 385              	RCC_PLLSAICmd:
 386              	.LFB135:
 849:lib/src/stm32f4xx_rcc.c **** }
 850:lib/src/stm32f4xx_rcc.c **** #endif /* STM32F40_41xxx || STM32F427_437xx || STM32F429_439xx || STM32F401xx || STM32F411xE */
 851:lib/src/stm32f4xx_rcc.c **** 
 852:lib/src/stm32f4xx_rcc.c **** /**
 853:lib/src/stm32f4xx_rcc.c ****   * @brief  Enables or disables the PLLSAI. 
 854:lib/src/stm32f4xx_rcc.c ****   * 
 855:lib/src/stm32f4xx_rcc.c ****   * @note   This function can be used only for STM32F42xxx/43xxx/446xx/469xx/479xx devices 
 856:lib/src/stm32f4xx_rcc.c ****   *       
 857:lib/src/stm32f4xx_rcc.c ****   * @note   The PLLSAI is disabled by hardware when entering STOP and STANDBY modes.  
 858:lib/src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the PLLSAI. This parameter can be: ENABLE or DISABLE.
 859:lib/src/stm32f4xx_rcc.c ****   * @retval None
 860:lib/src/stm32f4xx_rcc.c ****   */
 861:lib/src/stm32f4xx_rcc.c **** void RCC_PLLSAICmd(FunctionalState NewState)
 862:lib/src/stm32f4xx_rcc.c **** {
 387              		.loc 1 862 0
 388              		.cfi_startproc
 389              		@ args = 0, pretend = 0, frame = 0
 390              		@ frame_needed = 0, uses_anonymous_args = 0
 391              		@ link register save eliminated.
 392              	.LVL22:
 863:lib/src/stm32f4xx_rcc.c ****   /* Check the parameters */
 864:lib/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 865:lib/src/stm32f4xx_rcc.c ****   *(__IO uint32_t *) CR_PLLSAION_BB = (uint32_t)NewState;
 393              		.loc 1 865 0
 394 0000 014B     		ldr	r3, .L38
 395 0002 1860     		str	r0, [r3]
 396 0004 7047     		bx	lr
 397              	.L39:
 398 0006 00BF     		.align	2
 399              	.L38:
 400 0008 70004742 		.word	1111949424
 401              		.cfi_endproc
 402              	.LFE135:
 404              		.section	.text.RCC_ClockSecuritySystemCmd,"ax",%progbits
 405              		.align	2
 406              		.global	RCC_ClockSecuritySystemCmd
 407              		.thumb
 408              		.thumb_func
 410              	RCC_ClockSecuritySystemCmd:
 411              	.LFB136:
 866:lib/src/stm32f4xx_rcc.c **** }
 867:lib/src/stm32f4xx_rcc.c **** 
 868:lib/src/stm32f4xx_rcc.c **** /**
ARM GAS  C:\Users\rinck\AppData\Local\Temp\ccnBBAPb.s 			page 23


 869:lib/src/stm32f4xx_rcc.c ****   * @brief  Enables or disables the Clock Security System.
 870:lib/src/stm32f4xx_rcc.c ****   * @note   If a failure is detected on the HSE oscillator clock, this oscillator
 871:lib/src/stm32f4xx_rcc.c ****   *         is automatically disabled and an interrupt is generated to inform the
 872:lib/src/stm32f4xx_rcc.c ****   *         software about the failure (Clock Security System Interrupt, CSSI),
 873:lib/src/stm32f4xx_rcc.c ****   *         allowing the MCU to perform rescue operations. The CSSI is linked to 
 874:lib/src/stm32f4xx_rcc.c ****   *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.  
 875:lib/src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the Clock Security System.
 876:lib/src/stm32f4xx_rcc.c ****   *         This parameter can be: ENABLE or DISABLE.
 877:lib/src/stm32f4xx_rcc.c ****   * @retval None
 878:lib/src/stm32f4xx_rcc.c ****   */
 879:lib/src/stm32f4xx_rcc.c **** void RCC_ClockSecuritySystemCmd(FunctionalState NewState)
 880:lib/src/stm32f4xx_rcc.c **** {
 412              		.loc 1 880 0
 413              		.cfi_startproc
 414              		@ args = 0, pretend = 0, frame = 0
 415              		@ frame_needed = 0, uses_anonymous_args = 0
 416              		@ link register save eliminated.
 417              	.LVL23:
 881:lib/src/stm32f4xx_rcc.c ****   /* Check the parameters */
 882:lib/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 883:lib/src/stm32f4xx_rcc.c ****   *(__IO uint32_t *) CR_CSSON_BB = (uint32_t)NewState;
 418              		.loc 1 883 0
 419 0000 014B     		ldr	r3, .L41
 420 0002 1860     		str	r0, [r3]
 421 0004 7047     		bx	lr
 422              	.L42:
 423 0006 00BF     		.align	2
 424              	.L41:
 425 0008 4C004742 		.word	1111949388
 426              		.cfi_endproc
 427              	.LFE136:
 429              		.section	.text.RCC_MCO1Config,"ax",%progbits
 430              		.align	2
 431              		.global	RCC_MCO1Config
 432              		.thumb
 433              		.thumb_func
 435              	RCC_MCO1Config:
 436              	.LFB137:
 884:lib/src/stm32f4xx_rcc.c **** }
 885:lib/src/stm32f4xx_rcc.c **** 
 886:lib/src/stm32f4xx_rcc.c **** /**
 887:lib/src/stm32f4xx_rcc.c ****   * @brief  Selects the clock source to output on MCO1 pin(PA8).
 888:lib/src/stm32f4xx_rcc.c ****   * @note   PA8 should be configured in alternate function mode.
 889:lib/src/stm32f4xx_rcc.c ****   * @param  RCC_MCO1Source: specifies the clock source to output.
 890:lib/src/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
 891:lib/src/stm32f4xx_rcc.c ****   *            @arg RCC_MCO1Source_HSI: HSI clock selected as MCO1 source
 892:lib/src/stm32f4xx_rcc.c ****   *            @arg RCC_MCO1Source_LSE: LSE clock selected as MCO1 source
 893:lib/src/stm32f4xx_rcc.c ****   *            @arg RCC_MCO1Source_HSE: HSE clock selected as MCO1 source
 894:lib/src/stm32f4xx_rcc.c ****   *            @arg RCC_MCO1Source_PLLCLK: main PLL clock selected as MCO1 source
 895:lib/src/stm32f4xx_rcc.c ****   * @param  RCC_MCO1Div: specifies the MCO1 prescaler.
 896:lib/src/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
 897:lib/src/stm32f4xx_rcc.c ****   *            @arg RCC_MCO1Div_1: no division applied to MCO1 clock
 898:lib/src/stm32f4xx_rcc.c ****   *            @arg RCC_MCO1Div_2: division by 2 applied to MCO1 clock
 899:lib/src/stm32f4xx_rcc.c ****   *            @arg RCC_MCO1Div_3: division by 3 applied to MCO1 clock
 900:lib/src/stm32f4xx_rcc.c ****   *            @arg RCC_MCO1Div_4: division by 4 applied to MCO1 clock
 901:lib/src/stm32f4xx_rcc.c ****   *            @arg RCC_MCO1Div_5: division by 5 applied to MCO1 clock
 902:lib/src/stm32f4xx_rcc.c ****   * @retval None
ARM GAS  C:\Users\rinck\AppData\Local\Temp\ccnBBAPb.s 			page 24


 903:lib/src/stm32f4xx_rcc.c ****   */
 904:lib/src/stm32f4xx_rcc.c **** void RCC_MCO1Config(uint32_t RCC_MCO1Source, uint32_t RCC_MCO1Div)
 905:lib/src/stm32f4xx_rcc.c **** {
 437              		.loc 1 905 0
 438              		.cfi_startproc
 439              		@ args = 0, pretend = 0, frame = 0
 440              		@ frame_needed = 0, uses_anonymous_args = 0
 441              		@ link register save eliminated.
 442              	.LVL24:
 906:lib/src/stm32f4xx_rcc.c ****   uint32_t tmpreg = 0;
 907:lib/src/stm32f4xx_rcc.c ****   
 908:lib/src/stm32f4xx_rcc.c ****   /* Check the parameters */
 909:lib/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_MCO1SOURCE(RCC_MCO1Source));
 910:lib/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_MCO1DIV(RCC_MCO1Div));  
 911:lib/src/stm32f4xx_rcc.c **** 
 912:lib/src/stm32f4xx_rcc.c ****   tmpreg = RCC->CFGR;
 443              		.loc 1 912 0
 444 0000 034A     		ldr	r2, .L44
 445 0002 9368     		ldr	r3, [r2, #8]
 446              	.LVL25:
 913:lib/src/stm32f4xx_rcc.c **** 
 914:lib/src/stm32f4xx_rcc.c ****   /* Clear MCO1[1:0] and MCO1PRE[2:0] bits */
 915:lib/src/stm32f4xx_rcc.c ****   tmpreg &= CFGR_MCO1_RESET_MASK;
 447              		.loc 1 915 0
 448 0004 23F0EC63 		bic	r3, r3, #123731968
 449              	.LVL26:
 916:lib/src/stm32f4xx_rcc.c **** 
 917:lib/src/stm32f4xx_rcc.c ****   /* Select MCO1 clock source and prescaler */
 918:lib/src/stm32f4xx_rcc.c ****   tmpreg |= RCC_MCO1Source | RCC_MCO1Div;
 450              		.loc 1 918 0
 451 0008 0143     		orrs	r1, r1, r0
 452              	.LVL27:
 453 000a 1943     		orrs	r1, r1, r3
 454              	.LVL28:
 919:lib/src/stm32f4xx_rcc.c ****   
 920:lib/src/stm32f4xx_rcc.c ****   /* Store the new value */
 921:lib/src/stm32f4xx_rcc.c ****   RCC->CFGR = tmpreg;
 455              		.loc 1 921 0
 456 000c 9160     		str	r1, [r2, #8]
 457 000e 7047     		bx	lr
 458              	.L45:
 459              		.align	2
 460              	.L44:
 461 0010 00380240 		.word	1073887232
 462              		.cfi_endproc
 463              	.LFE137:
 465              		.section	.text.RCC_MCO2Config,"ax",%progbits
 466              		.align	2
 467              		.global	RCC_MCO2Config
 468              		.thumb
 469              		.thumb_func
 471              	RCC_MCO2Config:
 472              	.LFB138:
 922:lib/src/stm32f4xx_rcc.c **** 
 923:lib/src/stm32f4xx_rcc.c **** #if defined(STM32F410xx)
 924:lib/src/stm32f4xx_rcc.c ****   RCC_MCO1Cmd(ENABLE);
 925:lib/src/stm32f4xx_rcc.c **** #endif /* STM32F410xx */   
ARM GAS  C:\Users\rinck\AppData\Local\Temp\ccnBBAPb.s 			page 25


 926:lib/src/stm32f4xx_rcc.c **** }
 927:lib/src/stm32f4xx_rcc.c **** 
 928:lib/src/stm32f4xx_rcc.c **** /**
 929:lib/src/stm32f4xx_rcc.c ****   * @brief  Selects the clock source to output on MCO2 pin(PC9).
 930:lib/src/stm32f4xx_rcc.c ****   * @note   PC9 should be configured in alternate function mode.
 931:lib/src/stm32f4xx_rcc.c ****   * @param  RCC_MCO2Source: specifies the clock source to output.
 932:lib/src/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
 933:lib/src/stm32f4xx_rcc.c ****   *            @arg RCC_MCO2Source_SYSCLK: System clock (SYSCLK) selected as MCO2 source
 934:lib/src/stm32f4xx_rcc.c ****   *            @arg RCC_MCO2SOURCE_PLLI2SCLK: PLLI2S clock selected as MCO2 source, available for a
 935:lib/src/stm32f4xx_rcc.c ****   *            @arg RCC_MCO2SOURCE_I2SCLK: I2SCLK clock selected as MCO2 source, available only for
 936:lib/src/stm32f4xx_rcc.c ****   *            @arg RCC_MCO2Source_HSE: HSE clock selected as MCO2 source
 937:lib/src/stm32f4xx_rcc.c ****   *            @arg RCC_MCO2Source_PLLCLK: main PLL clock selected as MCO2 source
 938:lib/src/stm32f4xx_rcc.c ****   * @param  RCC_MCO2Div: specifies the MCO2 prescaler.
 939:lib/src/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
 940:lib/src/stm32f4xx_rcc.c ****   *            @arg RCC_MCO2Div_1: no division applied to MCO2 clock
 941:lib/src/stm32f4xx_rcc.c ****   *            @arg RCC_MCO2Div_2: division by 2 applied to MCO2 clock
 942:lib/src/stm32f4xx_rcc.c ****   *            @arg RCC_MCO2Div_3: division by 3 applied to MCO2 clock
 943:lib/src/stm32f4xx_rcc.c ****   *            @arg RCC_MCO2Div_4: division by 4 applied to MCO2 clock
 944:lib/src/stm32f4xx_rcc.c ****   *            @arg RCC_MCO2Div_5: division by 5 applied to MCO2 clock
 945:lib/src/stm32f4xx_rcc.c ****   * @note  For STM32F410xx devices to output I2SCLK clock on MCO2 you should have
 946:lib/src/stm32f4xx_rcc.c ****   *        at last one of the SPI clocks enabled (SPI1, SPI2 or SPI5).
 947:lib/src/stm32f4xx_rcc.c ****   * @retval None
 948:lib/src/stm32f4xx_rcc.c ****   */
 949:lib/src/stm32f4xx_rcc.c **** void RCC_MCO2Config(uint32_t RCC_MCO2Source, uint32_t RCC_MCO2Div)
 950:lib/src/stm32f4xx_rcc.c **** {
 473              		.loc 1 950 0
 474              		.cfi_startproc
 475              		@ args = 0, pretend = 0, frame = 0
 476              		@ frame_needed = 0, uses_anonymous_args = 0
 477              		@ link register save eliminated.
 478              	.LVL29:
 951:lib/src/stm32f4xx_rcc.c ****   uint32_t tmpreg = 0;
 952:lib/src/stm32f4xx_rcc.c ****   
 953:lib/src/stm32f4xx_rcc.c ****   /* Check the parameters */
 954:lib/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_MCO2SOURCE(RCC_MCO2Source));
 955:lib/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_MCO2DIV(RCC_MCO2Div));
 956:lib/src/stm32f4xx_rcc.c ****   
 957:lib/src/stm32f4xx_rcc.c ****   tmpreg = RCC->CFGR;
 479              		.loc 1 957 0
 480 0000 034A     		ldr	r2, .L47
 481 0002 9368     		ldr	r3, [r2, #8]
 482              	.LVL30:
 958:lib/src/stm32f4xx_rcc.c ****   
 959:lib/src/stm32f4xx_rcc.c ****   /* Clear MCO2 and MCO2PRE[2:0] bits */
 960:lib/src/stm32f4xx_rcc.c ****   tmpreg &= CFGR_MCO2_RESET_MASK;
 483              		.loc 1 960 0
 484 0004 23F07843 		bic	r3, r3, #-134217728
 485              	.LVL31:
 961:lib/src/stm32f4xx_rcc.c **** 
 962:lib/src/stm32f4xx_rcc.c ****   /* Select MCO2 clock source and prescaler */
 963:lib/src/stm32f4xx_rcc.c ****   tmpreg |= RCC_MCO2Source | RCC_MCO2Div;
 486              		.loc 1 963 0
 487 0008 0143     		orrs	r1, r1, r0
 488              	.LVL32:
 489 000a 1943     		orrs	r1, r1, r3
 490              	.LVL33:
 964:lib/src/stm32f4xx_rcc.c ****   
ARM GAS  C:\Users\rinck\AppData\Local\Temp\ccnBBAPb.s 			page 26


 965:lib/src/stm32f4xx_rcc.c ****   /* Store the new value */
 966:lib/src/stm32f4xx_rcc.c ****   RCC->CFGR = tmpreg;
 491              		.loc 1 966 0
 492 000c 9160     		str	r1, [r2, #8]
 493 000e 7047     		bx	lr
 494              	.L48:
 495              		.align	2
 496              	.L47:
 497 0010 00380240 		.word	1073887232
 498              		.cfi_endproc
 499              	.LFE138:
 501              		.section	.text.RCC_SYSCLKConfig,"ax",%progbits
 502              		.align	2
 503              		.global	RCC_SYSCLKConfig
 504              		.thumb
 505              		.thumb_func
 507              	RCC_SYSCLKConfig:
 508              	.LFB139:
 967:lib/src/stm32f4xx_rcc.c **** 
 968:lib/src/stm32f4xx_rcc.c **** #if defined(STM32F410xx)
 969:lib/src/stm32f4xx_rcc.c ****   RCC_MCO2Cmd(ENABLE);
 970:lib/src/stm32f4xx_rcc.c **** #endif /* STM32F410xx */   
 971:lib/src/stm32f4xx_rcc.c **** }
 972:lib/src/stm32f4xx_rcc.c **** 
 973:lib/src/stm32f4xx_rcc.c **** /**
 974:lib/src/stm32f4xx_rcc.c ****   * @}
 975:lib/src/stm32f4xx_rcc.c ****   */
 976:lib/src/stm32f4xx_rcc.c **** 
 977:lib/src/stm32f4xx_rcc.c **** /** @defgroup RCC_Group2 System AHB and APB busses clocks configuration functions
 978:lib/src/stm32f4xx_rcc.c ****  *  @brief   System, AHB and APB busses clocks configuration functions
 979:lib/src/stm32f4xx_rcc.c ****  *
 980:lib/src/stm32f4xx_rcc.c **** @verbatim   
 981:lib/src/stm32f4xx_rcc.c ****  ===============================================================================
 982:lib/src/stm32f4xx_rcc.c ****       ##### System, AHB and APB busses clocks configuration functions #####
 983:lib/src/stm32f4xx_rcc.c ****  ===============================================================================  
 984:lib/src/stm32f4xx_rcc.c ****     [..]
 985:lib/src/stm32f4xx_rcc.c ****       This section provide functions allowing to configure the System, AHB, APB1 and 
 986:lib/src/stm32f4xx_rcc.c ****       APB2 busses clocks.
 987:lib/src/stm32f4xx_rcc.c ****   
 988:lib/src/stm32f4xx_rcc.c ****       (#) Several clock sources can be used to drive the System clock (SYSCLK): HSI,
 989:lib/src/stm32f4xx_rcc.c ****           HSE and PLL.
 990:lib/src/stm32f4xx_rcc.c ****           The AHB clock (HCLK) is derived from System clock through configurable 
 991:lib/src/stm32f4xx_rcc.c ****           prescaler and used to clock the CPU, memory and peripherals mapped 
 992:lib/src/stm32f4xx_rcc.c ****           on AHB bus (DMA, GPIO...). APB1 (PCLK1) and APB2 (PCLK2) clocks are derived 
 993:lib/src/stm32f4xx_rcc.c ****           from AHB clock through configurable prescalers and used to clock 
 994:lib/src/stm32f4xx_rcc.c ****           the peripherals mapped on these busses. You can use 
 995:lib/src/stm32f4xx_rcc.c ****           "RCC_GetClocksFreq()" function to retrieve the frequencies of these clocks.  
 996:lib/src/stm32f4xx_rcc.c **** 
 997:lib/src/stm32f4xx_rcc.c ****       -@- All the peripheral clocks are derived from the System clock (SYSCLK) except:
 998:lib/src/stm32f4xx_rcc.c ****         (+@) I2S: the I2S clock can be derived either from a specific PLL (PLLI2S) or
 999:lib/src/stm32f4xx_rcc.c ****              from an external clock mapped on the I2S_CKIN pin. 
1000:lib/src/stm32f4xx_rcc.c ****              You have to use RCC_I2SCLKConfig() function to configure this clock. 
1001:lib/src/stm32f4xx_rcc.c ****         (+@) RTC: the RTC clock can be derived either from the LSI, LSE or HSE clock
1002:lib/src/stm32f4xx_rcc.c ****              divided by 2 to 31. You have to use RCC_RTCCLKConfig() and RCC_RTCCLKCmd()
1003:lib/src/stm32f4xx_rcc.c ****              functions to configure this clock. 
1004:lib/src/stm32f4xx_rcc.c ****         (+@) USB OTG FS, SDIO and RTC: USB OTG FS require a frequency equal to 48 MHz
1005:lib/src/stm32f4xx_rcc.c ****              to work correctly, while the SDIO require a frequency equal or lower than
ARM GAS  C:\Users\rinck\AppData\Local\Temp\ccnBBAPb.s 			page 27


1006:lib/src/stm32f4xx_rcc.c ****              to 48. This clock is derived of the main PLL through PLLQ divider.
1007:lib/src/stm32f4xx_rcc.c ****         (+@) IWDG clock which is always the LSI clock.
1008:lib/src/stm32f4xx_rcc.c ****        
1009:lib/src/stm32f4xx_rcc.c ****       (#) For STM32F405xx/407xx and STM32F415xx/417xx devices, the maximum frequency 
1010:lib/src/stm32f4xx_rcc.c ****          of the SYSCLK and HCLK is 168 MHz, PCLK2 84 MHz and PCLK1 42 MHz. Depending 
1011:lib/src/stm32f4xx_rcc.c ****          on the device voltage range, the maximum frequency should be adapted accordingly:
1012:lib/src/stm32f4xx_rcc.c ****  +-------------------------------------------------------------------------------------+
1013:lib/src/stm32f4xx_rcc.c ****  | Latency       |                HCLK clock frequency (MHz)                           |
1014:lib/src/stm32f4xx_rcc.c ****  |               |---------------------------------------------------------------------|
1015:lib/src/stm32f4xx_rcc.c ****  |               | voltage range  | voltage range  | voltage range   | voltage range   |
1016:lib/src/stm32f4xx_rcc.c ****  |               | 2.7 V - 3.6 V  | 2.4 V - 2.7 V  | 2.1 V - 2.4 V   | 1.8 V - 2.1 V   |
1017:lib/src/stm32f4xx_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------|
1018:lib/src/stm32f4xx_rcc.c ****  |0WS(1CPU cycle)|0 < HCLK <= 30  |0 < HCLK <= 24  |0 < HCLK <= 22   |0 < HCLK <= 20   |
1019:lib/src/stm32f4xx_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------|
1020:lib/src/stm32f4xx_rcc.c ****  |1WS(2CPU cycle)|30 < HCLK <= 60 |24 < HCLK <= 48 |22 < HCLK <= 44  |20 < HCLK <= 40  |
1021:lib/src/stm32f4xx_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------|
1022:lib/src/stm32f4xx_rcc.c ****  |2WS(3CPU cycle)|60 < HCLK <= 90 |48 < HCLK <= 72 |44 < HCLK <= 66  |40 < HCLK <= 60  |
1023:lib/src/stm32f4xx_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------|
1024:lib/src/stm32f4xx_rcc.c ****  |3WS(4CPU cycle)|90 < HCLK <= 120|72 < HCLK <= 96 |66 < HCLK <= 88  |60 < HCLK <= 80  |
1025:lib/src/stm32f4xx_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------|
1026:lib/src/stm32f4xx_rcc.c ****  |4WS(5CPU cycle)|120< HCLK <= 150|96 < HCLK <= 120|88 < HCLK <= 110 |80 < HCLK <= 100 |
1027:lib/src/stm32f4xx_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------|
1028:lib/src/stm32f4xx_rcc.c ****  |5WS(6CPU cycle)|150< HCLK <= 168|120< HCLK <= 144|110 < HCLK <= 132|100 < HCLK <= 120|
1029:lib/src/stm32f4xx_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------|
1030:lib/src/stm32f4xx_rcc.c ****  |6WS(7CPU cycle)|      NA        |144< HCLK <= 168|132 < HCLK <= 154|120 < HCLK <= 140|
1031:lib/src/stm32f4xx_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------|
1032:lib/src/stm32f4xx_rcc.c ****  |7WS(8CPU cycle)|      NA        |      NA        |154 < HCLK <= 168|140 < HCLK <= 160|
1033:lib/src/stm32f4xx_rcc.c ****  +---------------|----------------|----------------|-----------------|-----------------+
1034:lib/src/stm32f4xx_rcc.c ****       (#) For STM32F42xxx/43xxx/469xx/479xx devices, the maximum frequency of the SYSCLK and HCLK i
1035:lib/src/stm32f4xx_rcc.c ****           PCLK2 90 MHz and PCLK1 45 MHz. Depending on the device voltage range, the maximum 
1036:lib/src/stm32f4xx_rcc.c ****           frequency should be adapted accordingly:
1037:lib/src/stm32f4xx_rcc.c ****  +-------------------------------------------------------------------------------------+
1038:lib/src/stm32f4xx_rcc.c ****  | Latency       |                HCLK clock frequency (MHz)                           |
1039:lib/src/stm32f4xx_rcc.c ****  |               |---------------------------------------------------------------------|
1040:lib/src/stm32f4xx_rcc.c ****  |               | voltage range  | voltage range  | voltage range   | voltage range   |
1041:lib/src/stm32f4xx_rcc.c ****  |               | 2.7 V - 3.6 V  | 2.4 V - 2.7 V  | 2.1 V - 2.4 V   | 1.8 V - 2.1 V   |
1042:lib/src/stm32f4xx_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------|
1043:lib/src/stm32f4xx_rcc.c ****  |0WS(1CPU cycle)|0 < HCLK <= 30  |0 < HCLK <= 24  |0 < HCLK <= 22   |0 < HCLK <= 20   |
1044:lib/src/stm32f4xx_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------|
1045:lib/src/stm32f4xx_rcc.c ****  |1WS(2CPU cycle)|30 < HCLK <= 60 |24 < HCLK <= 48 |22 < HCLK <= 44  |20 < HCLK <= 40  |
1046:lib/src/stm32f4xx_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------|
1047:lib/src/stm32f4xx_rcc.c ****  |2WS(3CPU cycle)|60 < HCLK <= 90 |48 < HCLK <= 72 |44 < HCLK <= 66  |40 < HCLK <= 60  |
1048:lib/src/stm32f4xx_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------|
1049:lib/src/stm32f4xx_rcc.c ****  |3WS(4CPU cycle)|90 < HCLK <= 120|72 < HCLK <= 96 |66 < HCLK <= 88  |60 < HCLK <= 80  |
1050:lib/src/stm32f4xx_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------|
1051:lib/src/stm32f4xx_rcc.c ****  |4WS(5CPU cycle)|120< HCLK <= 150|96 < HCLK <= 120|88 < HCLK <= 110 |80 < HCLK <= 100 |
1052:lib/src/stm32f4xx_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------|
1053:lib/src/stm32f4xx_rcc.c ****  |5WS(6CPU cycle)|120< HCLK <= 180|120< HCLK <= 144|110 < HCLK <= 132|100 < HCLK <= 120|
1054:lib/src/stm32f4xx_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------|
1055:lib/src/stm32f4xx_rcc.c ****  |6WS(7CPU cycle)|      NA        |144< HCLK <= 168|132 < HCLK <= 154|120 < HCLK <= 140|
1056:lib/src/stm32f4xx_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------|
1057:lib/src/stm32f4xx_rcc.c ****  |7WS(8CPU cycle)|      NA        |168< HCLK <= 180|154 < HCLK <= 176|140 < HCLK <= 160|
1058:lib/src/stm32f4xx_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------|
1059:lib/src/stm32f4xx_rcc.c ****  |8WS(9CPU cycle)|      NA        |      NA        |176 < HCLK <= 180|160 < HCLK <= 168|
1060:lib/src/stm32f4xx_rcc.c ****  +-------------------------------------------------------------------------------------+
1061:lib/src/stm32f4xx_rcc.c ****    
1062:lib/src/stm32f4xx_rcc.c ****       (#) For STM32F401xx devices, the maximum frequency of the SYSCLK and HCLK is 84 MHz, 
ARM GAS  C:\Users\rinck\AppData\Local\Temp\ccnBBAPb.s 			page 28


1063:lib/src/stm32f4xx_rcc.c ****           PCLK2 84 MHz and PCLK1 42 MHz. Depending on the device voltage range, the maximum 
1064:lib/src/stm32f4xx_rcc.c ****           frequency should be adapted accordingly:
1065:lib/src/stm32f4xx_rcc.c ****  +-------------------------------------------------------------------------------------+
1066:lib/src/stm32f4xx_rcc.c ****  | Latency       |                HCLK clock frequency (MHz)                           |
1067:lib/src/stm32f4xx_rcc.c ****  |               |---------------------------------------------------------------------|
1068:lib/src/stm32f4xx_rcc.c ****  |               | voltage range  | voltage range  | voltage range   | voltage range   |
1069:lib/src/stm32f4xx_rcc.c ****  |               | 2.7 V - 3.6 V  | 2.4 V - 2.7 V  | 2.1 V - 2.4 V   | 1.8 V - 2.1 V   |
1070:lib/src/stm32f4xx_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------|
1071:lib/src/stm32f4xx_rcc.c ****  |0WS(1CPU cycle)|0 < HCLK <= 30  |0 < HCLK <= 24  |0 < HCLK <= 22   |0 < HCLK <= 20   |
1072:lib/src/stm32f4xx_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------|
1073:lib/src/stm32f4xx_rcc.c ****  |1WS(2CPU cycle)|30 < HCLK <= 60 |24 < HCLK <= 48 |22 < HCLK <= 44  |20 < HCLK <= 40  |
1074:lib/src/stm32f4xx_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------|
1075:lib/src/stm32f4xx_rcc.c ****  |2WS(3CPU cycle)|60 < HCLK <= 84 |48 < HCLK <= 72 |44 < HCLK <= 66  |40 < HCLK <= 60  |
1076:lib/src/stm32f4xx_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------|
1077:lib/src/stm32f4xx_rcc.c ****  |3WS(4CPU cycle)|      NA        |72 < HCLK <= 84 |66 < HCLK <= 84  |60 < HCLK <= 80  |
1078:lib/src/stm32f4xx_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------|
1079:lib/src/stm32f4xx_rcc.c ****  |4WS(5CPU cycle)|      NA        |      NA        |      NA         |80 < HCLK <= 84  |
1080:lib/src/stm32f4xx_rcc.c ****  +-------------------------------------------------------------------------------------+
1081:lib/src/stm32f4xx_rcc.c **** 
1082:lib/src/stm32f4xx_rcc.c ****       (#) For STM32F410xx/STM32F411xE devices, the maximum frequency of the SYSCLK and HCLK is 100 
1083:lib/src/stm32f4xx_rcc.c ****           PCLK2 100 MHz and PCLK1 50 MHz. Depending on the device voltage range, the maximum 
1084:lib/src/stm32f4xx_rcc.c ****           frequency should be adapted accordingly:
1085:lib/src/stm32f4xx_rcc.c ****  +-------------------------------------------------------------------------------------+
1086:lib/src/stm32f4xx_rcc.c ****  | Latency       |                HCLK clock frequency (MHz)                           |
1087:lib/src/stm32f4xx_rcc.c ****  |               |---------------------------------------------------------------------|
1088:lib/src/stm32f4xx_rcc.c ****  |               | voltage range  | voltage range  | voltage range   | voltage range   |
1089:lib/src/stm32f4xx_rcc.c ****  |               | 2.7 V - 3.6 V  | 2.4 V - 2.7 V  | 2.1 V - 2.4 V   | 1.8 V - 2.1 V   |
1090:lib/src/stm32f4xx_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------|
1091:lib/src/stm32f4xx_rcc.c ****  |0WS(1CPU cycle)|0 < HCLK <= 30  |0 < HCLK <= 24  |0 < HCLK <= 18   |0 < HCLK <= 16   |
1092:lib/src/stm32f4xx_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------|
1093:lib/src/stm32f4xx_rcc.c ****  |1WS(2CPU cycle)|30 < HCLK <= 64 |24 < HCLK <= 48 |18 < HCLK <= 36  |16 < HCLK <= 32  |
1094:lib/src/stm32f4xx_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------|
1095:lib/src/stm32f4xx_rcc.c ****  |2WS(3CPU cycle)|64 < HCLK <= 90 |48 < HCLK <= 72 |36 < HCLK <= 54  |32 < HCLK <= 48  |
1096:lib/src/stm32f4xx_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------|
1097:lib/src/stm32f4xx_rcc.c ****  |3WS(4CPU cycle)|90 < HCLK <= 100|72 < HCLK <= 96 |54 < HCLK <= 72  |48 < HCLK <= 64  |
1098:lib/src/stm32f4xx_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------|
1099:lib/src/stm32f4xx_rcc.c ****  |4WS(5CPU cycle)|      NA        |96 < HCLK <= 100|72 < HCLK <= 90  |64 < HCLK <= 80  |
1100:lib/src/stm32f4xx_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------|
1101:lib/src/stm32f4xx_rcc.c ****  |5WS(6CPU cycle)|      NA        |       NA       |90 < HCLK <= 100 |80 < HCLK <= 96  |
1102:lib/src/stm32f4xx_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------|
1103:lib/src/stm32f4xx_rcc.c ****  |6WS(7CPU cycle)|      NA        |       NA       |        NA       |96 < HCLK <= 100 |
1104:lib/src/stm32f4xx_rcc.c ****  +-------------------------------------------------------------------------------------+
1105:lib/src/stm32f4xx_rcc.c ****   
1106:lib/src/stm32f4xx_rcc.c ****       -@- On STM32F405xx/407xx and STM32F415xx/417xx devices: 
1107:lib/src/stm32f4xx_rcc.c ****            (++) when VOS = '0', the maximum value of fHCLK = 144MHz. 
1108:lib/src/stm32f4xx_rcc.c ****            (++) when VOS = '1', the maximum value of fHCLK = 168MHz. 
1109:lib/src/stm32f4xx_rcc.c ****           [..] 
1110:lib/src/stm32f4xx_rcc.c ****           On STM32F42xxx/43xxx/469xx/479xx devices:
1111:lib/src/stm32f4xx_rcc.c ****            (++) when VOS[1:0] = '0x01', the maximum value of fHCLK is 120MHz.
1112:lib/src/stm32f4xx_rcc.c ****            (++) when VOS[1:0] = '0x10', the maximum value of fHCLK is 144MHz.
1113:lib/src/stm32f4xx_rcc.c ****            (++) when VOS[1:0] = '0x11', the maximum value of f  is 168MHz 
1114:lib/src/stm32f4xx_rcc.c ****           [..]  
1115:lib/src/stm32f4xx_rcc.c ****           On STM32F401x devices:
1116:lib/src/stm32f4xx_rcc.c ****            (++) when VOS[1:0] = '0x01', the maximum value of fHCLK is 64MHz.
1117:lib/src/stm32f4xx_rcc.c ****            (++) when VOS[1:0] = '0x10', the maximum value of fHCLK is 84MHz.
1118:lib/src/stm32f4xx_rcc.c ****           On STM32F410xx/STM32F411xE devices:
1119:lib/src/stm32f4xx_rcc.c ****            (++) when VOS[1:0] = '0x01' the maximum value of fHCLK is 64MHz.
ARM GAS  C:\Users\rinck\AppData\Local\Temp\ccnBBAPb.s 			page 29


1120:lib/src/stm32f4xx_rcc.c ****            (++) when VOS[1:0] = '0x10' the maximum value of fHCLK is 84MHz.
1121:lib/src/stm32f4xx_rcc.c ****            (++) when VOS[1:0] = '0x11' the maximum value of fHCLK is 100MHz.
1122:lib/src/stm32f4xx_rcc.c **** 
1123:lib/src/stm32f4xx_rcc.c ****        You can use PWR_MainRegulatorModeConfig() function to control VOS bits.
1124:lib/src/stm32f4xx_rcc.c **** 
1125:lib/src/stm32f4xx_rcc.c **** @endverbatim
1126:lib/src/stm32f4xx_rcc.c ****   * @{
1127:lib/src/stm32f4xx_rcc.c ****   */
1128:lib/src/stm32f4xx_rcc.c **** 
1129:lib/src/stm32f4xx_rcc.c **** /**
1130:lib/src/stm32f4xx_rcc.c ****   * @brief  Configures the system clock (SYSCLK).
1131:lib/src/stm32f4xx_rcc.c ****   * @note   The HSI is used (enabled by hardware) as system clock source after
1132:lib/src/stm32f4xx_rcc.c ****   *         startup from Reset, wake-up from STOP and STANDBY mode, or in case
1133:lib/src/stm32f4xx_rcc.c ****   *         of failure of the HSE used directly or indirectly as system clock
1134:lib/src/stm32f4xx_rcc.c ****   *         (if the Clock Security System CSS is enabled).
1135:lib/src/stm32f4xx_rcc.c ****   * @note   A switch from one clock source to another occurs only if the target
1136:lib/src/stm32f4xx_rcc.c ****   *         clock source is ready (clock stable after startup delay or PLL locked). 
1137:lib/src/stm32f4xx_rcc.c ****   *         If a clock source which is not yet ready is selected, the switch will
1138:lib/src/stm32f4xx_rcc.c ****   *         occur when the clock source will be ready. 
1139:lib/src/stm32f4xx_rcc.c ****   *         You can use RCC_GetSYSCLKSource() function to know which clock is
1140:lib/src/stm32f4xx_rcc.c ****   *         currently used as system clock source. 
1141:lib/src/stm32f4xx_rcc.c ****   * @param  RCC_SYSCLKSource: specifies the clock source used as system clock.
1142:lib/src/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
1143:lib/src/stm32f4xx_rcc.c ****   *            @arg RCC_SYSCLKSource_HSI: HSI selected as system clock source
1144:lib/src/stm32f4xx_rcc.c ****   *            @arg RCC_SYSCLKSource_HSE: HSE selected as system clock source
1145:lib/src/stm32f4xx_rcc.c ****   *            @arg RCC_SYSCLKSource_PLLCLK: PLL selected as system clock source (RCC_SYSCLKSource_
1146:lib/src/stm32f4xx_rcc.c ****   *            @arg RCC_SYSCLKSource_PLLRCLK: PLL R selected as system clock source only for STM32F
1147:lib/src/stm32f4xx_rcc.c ****   * @retval None
1148:lib/src/stm32f4xx_rcc.c ****   */
1149:lib/src/stm32f4xx_rcc.c **** void RCC_SYSCLKConfig(uint32_t RCC_SYSCLKSource)
1150:lib/src/stm32f4xx_rcc.c **** {
 509              		.loc 1 1150 0
 510              		.cfi_startproc
 511              		@ args = 0, pretend = 0, frame = 0
 512              		@ frame_needed = 0, uses_anonymous_args = 0
 513              		@ link register save eliminated.
 514              	.LVL34:
1151:lib/src/stm32f4xx_rcc.c ****   uint32_t tmpreg = 0;
1152:lib/src/stm32f4xx_rcc.c **** 
1153:lib/src/stm32f4xx_rcc.c ****   /* Check the parameters */
1154:lib/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_SYSCLK_SOURCE(RCC_SYSCLKSource));
1155:lib/src/stm32f4xx_rcc.c **** 
1156:lib/src/stm32f4xx_rcc.c ****   tmpreg = RCC->CFGR;
 515              		.loc 1 1156 0
 516 0000 034A     		ldr	r2, .L50
 517 0002 9368     		ldr	r3, [r2, #8]
 518              	.LVL35:
1157:lib/src/stm32f4xx_rcc.c **** 
1158:lib/src/stm32f4xx_rcc.c ****   /* Clear SW[1:0] bits */
1159:lib/src/stm32f4xx_rcc.c ****   tmpreg &= ~RCC_CFGR_SW;
 519              		.loc 1 1159 0
 520 0004 23F00303 		bic	r3, r3, #3
 521              	.LVL36:
1160:lib/src/stm32f4xx_rcc.c **** 
1161:lib/src/stm32f4xx_rcc.c ****   /* Set SW[1:0] bits according to RCC_SYSCLKSource value */
1162:lib/src/stm32f4xx_rcc.c ****   tmpreg |= RCC_SYSCLKSource;
 522              		.loc 1 1162 0
ARM GAS  C:\Users\rinck\AppData\Local\Temp\ccnBBAPb.s 			page 30


 523 0008 1843     		orrs	r0, r0, r3
 524              	.LVL37:
1163:lib/src/stm32f4xx_rcc.c **** 
1164:lib/src/stm32f4xx_rcc.c ****   /* Store the new value */
1165:lib/src/stm32f4xx_rcc.c ****   RCC->CFGR = tmpreg;
 525              		.loc 1 1165 0
 526 000a 9060     		str	r0, [r2, #8]
 527 000c 7047     		bx	lr
 528              	.L51:
 529 000e 00BF     		.align	2
 530              	.L50:
 531 0010 00380240 		.word	1073887232
 532              		.cfi_endproc
 533              	.LFE139:
 535              		.section	.text.RCC_GetSYSCLKSource,"ax",%progbits
 536              		.align	2
 537              		.global	RCC_GetSYSCLKSource
 538              		.thumb
 539              		.thumb_func
 541              	RCC_GetSYSCLKSource:
 542              	.LFB140:
1166:lib/src/stm32f4xx_rcc.c **** }
1167:lib/src/stm32f4xx_rcc.c **** 
1168:lib/src/stm32f4xx_rcc.c **** /**
1169:lib/src/stm32f4xx_rcc.c ****   * @brief  Returns the clock source used as system clock.
1170:lib/src/stm32f4xx_rcc.c ****   * @param  None
1171:lib/src/stm32f4xx_rcc.c ****   * @retval The clock source used as system clock. The returned value can be one
1172:lib/src/stm32f4xx_rcc.c ****   *         of the following:
1173:lib/src/stm32f4xx_rcc.c ****   *              - 0x00: HSI used as system clock
1174:lib/src/stm32f4xx_rcc.c ****   *              - 0x04: HSE used as system clock
1175:lib/src/stm32f4xx_rcc.c ****   *              - 0x08: PLL used as system clock (PLL P for STM32F446xx devices)
1176:lib/src/stm32f4xx_rcc.c ****   *              - 0x0C: PLL R used as system clock (only for STM32F412xG, STM32F413_423xx and STM3
1177:lib/src/stm32f4xx_rcc.c ****   */
1178:lib/src/stm32f4xx_rcc.c **** uint8_t RCC_GetSYSCLKSource(void)
1179:lib/src/stm32f4xx_rcc.c **** {
 543              		.loc 1 1179 0
 544              		.cfi_startproc
 545              		@ args = 0, pretend = 0, frame = 0
 546              		@ frame_needed = 0, uses_anonymous_args = 0
 547              		@ link register save eliminated.
1180:lib/src/stm32f4xx_rcc.c ****   return ((uint8_t)(RCC->CFGR & RCC_CFGR_SWS));
 548              		.loc 1 1180 0
 549 0000 024B     		ldr	r3, .L53
 550 0002 9868     		ldr	r0, [r3, #8]
1181:lib/src/stm32f4xx_rcc.c **** }
 551              		.loc 1 1181 0
 552 0004 00F00C00 		and	r0, r0, #12
 553 0008 7047     		bx	lr
 554              	.L54:
 555 000a 00BF     		.align	2
 556              	.L53:
 557 000c 00380240 		.word	1073887232
 558              		.cfi_endproc
 559              	.LFE140:
 561              		.section	.text.RCC_HCLKConfig,"ax",%progbits
 562              		.align	2
 563              		.global	RCC_HCLKConfig
ARM GAS  C:\Users\rinck\AppData\Local\Temp\ccnBBAPb.s 			page 31


 564              		.thumb
 565              		.thumb_func
 567              	RCC_HCLKConfig:
 568              	.LFB141:
1182:lib/src/stm32f4xx_rcc.c **** 
1183:lib/src/stm32f4xx_rcc.c **** /**
1184:lib/src/stm32f4xx_rcc.c ****   * @brief  Configures the AHB clock (HCLK).
1185:lib/src/stm32f4xx_rcc.c ****   * @note   Depending on the device voltage range, the software has to set correctly
1186:lib/src/stm32f4xx_rcc.c ****   *         these bits to ensure that HCLK not exceed the maximum allowed frequency
1187:lib/src/stm32f4xx_rcc.c ****   *         (for more details refer to section above
1188:lib/src/stm32f4xx_rcc.c ****   *           "CPU, AHB and APB busses clocks configuration functions")
1189:lib/src/stm32f4xx_rcc.c ****   * @param  RCC_SYSCLK: defines the AHB clock divider. This clock is derived from 
1190:lib/src/stm32f4xx_rcc.c ****   *         the system clock (SYSCLK).
1191:lib/src/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
1192:lib/src/stm32f4xx_rcc.c ****   *            @arg RCC_SYSCLK_Div1: AHB clock = SYSCLK
1193:lib/src/stm32f4xx_rcc.c ****   *            @arg RCC_SYSCLK_Div2: AHB clock = SYSCLK/2
1194:lib/src/stm32f4xx_rcc.c ****   *            @arg RCC_SYSCLK_Div4: AHB clock = SYSCLK/4
1195:lib/src/stm32f4xx_rcc.c ****   *            @arg RCC_SYSCLK_Div8: AHB clock = SYSCLK/8
1196:lib/src/stm32f4xx_rcc.c ****   *            @arg RCC_SYSCLK_Div16: AHB clock = SYSCLK/16
1197:lib/src/stm32f4xx_rcc.c ****   *            @arg RCC_SYSCLK_Div64: AHB clock = SYSCLK/64
1198:lib/src/stm32f4xx_rcc.c ****   *            @arg RCC_SYSCLK_Div128: AHB clock = SYSCLK/128
1199:lib/src/stm32f4xx_rcc.c ****   *            @arg RCC_SYSCLK_Div256: AHB clock = SYSCLK/256
1200:lib/src/stm32f4xx_rcc.c ****   *            @arg RCC_SYSCLK_Div512: AHB clock = SYSCLK/512
1201:lib/src/stm32f4xx_rcc.c ****   * @retval None
1202:lib/src/stm32f4xx_rcc.c ****   */
1203:lib/src/stm32f4xx_rcc.c **** void RCC_HCLKConfig(uint32_t RCC_SYSCLK)
1204:lib/src/stm32f4xx_rcc.c **** {
 569              		.loc 1 1204 0
 570              		.cfi_startproc
 571              		@ args = 0, pretend = 0, frame = 0
 572              		@ frame_needed = 0, uses_anonymous_args = 0
 573              		@ link register save eliminated.
 574              	.LVL38:
1205:lib/src/stm32f4xx_rcc.c ****   uint32_t tmpreg = 0;
1206:lib/src/stm32f4xx_rcc.c ****   
1207:lib/src/stm32f4xx_rcc.c ****   /* Check the parameters */
1208:lib/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_HCLK(RCC_SYSCLK));
1209:lib/src/stm32f4xx_rcc.c **** 
1210:lib/src/stm32f4xx_rcc.c ****   tmpreg = RCC->CFGR;
 575              		.loc 1 1210 0
 576 0000 034A     		ldr	r2, .L56
 577 0002 9368     		ldr	r3, [r2, #8]
 578              	.LVL39:
1211:lib/src/stm32f4xx_rcc.c **** 
1212:lib/src/stm32f4xx_rcc.c ****   /* Clear HPRE[3:0] bits */
1213:lib/src/stm32f4xx_rcc.c ****   tmpreg &= ~RCC_CFGR_HPRE;
 579              		.loc 1 1213 0
 580 0004 23F0F003 		bic	r3, r3, #240
 581              	.LVL40:
1214:lib/src/stm32f4xx_rcc.c **** 
1215:lib/src/stm32f4xx_rcc.c ****   /* Set HPRE[3:0] bits according to RCC_SYSCLK value */
1216:lib/src/stm32f4xx_rcc.c ****   tmpreg |= RCC_SYSCLK;
 582              		.loc 1 1216 0
 583 0008 1843     		orrs	r0, r0, r3
 584              	.LVL41:
1217:lib/src/stm32f4xx_rcc.c **** 
1218:lib/src/stm32f4xx_rcc.c ****   /* Store the new value */
ARM GAS  C:\Users\rinck\AppData\Local\Temp\ccnBBAPb.s 			page 32


1219:lib/src/stm32f4xx_rcc.c ****   RCC->CFGR = tmpreg;
 585              		.loc 1 1219 0
 586 000a 9060     		str	r0, [r2, #8]
 587 000c 7047     		bx	lr
 588              	.L57:
 589 000e 00BF     		.align	2
 590              	.L56:
 591 0010 00380240 		.word	1073887232
 592              		.cfi_endproc
 593              	.LFE141:
 595              		.section	.text.RCC_PCLK1Config,"ax",%progbits
 596              		.align	2
 597              		.global	RCC_PCLK1Config
 598              		.thumb
 599              		.thumb_func
 601              	RCC_PCLK1Config:
 602              	.LFB142:
1220:lib/src/stm32f4xx_rcc.c **** }
1221:lib/src/stm32f4xx_rcc.c **** 
1222:lib/src/stm32f4xx_rcc.c **** /**
1223:lib/src/stm32f4xx_rcc.c ****   * @brief  Configures the Low Speed APB clock (PCLK1).
1224:lib/src/stm32f4xx_rcc.c ****   * @param  RCC_HCLK: defines the APB1 clock divider. This clock is derived from 
1225:lib/src/stm32f4xx_rcc.c ****   *         the AHB clock (HCLK).
1226:lib/src/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
1227:lib/src/stm32f4xx_rcc.c ****   *            @arg RCC_HCLK_Div1:  APB1 clock = HCLK
1228:lib/src/stm32f4xx_rcc.c ****   *            @arg RCC_HCLK_Div2:  APB1 clock = HCLK/2
1229:lib/src/stm32f4xx_rcc.c ****   *            @arg RCC_HCLK_Div4:  APB1 clock = HCLK/4
1230:lib/src/stm32f4xx_rcc.c ****   *            @arg RCC_HCLK_Div8:  APB1 clock = HCLK/8
1231:lib/src/stm32f4xx_rcc.c ****   *            @arg RCC_HCLK_Div16: APB1 clock = HCLK/16
1232:lib/src/stm32f4xx_rcc.c ****   * @retval None
1233:lib/src/stm32f4xx_rcc.c ****   */
1234:lib/src/stm32f4xx_rcc.c **** void RCC_PCLK1Config(uint32_t RCC_HCLK)
1235:lib/src/stm32f4xx_rcc.c **** {
 603              		.loc 1 1235 0
 604              		.cfi_startproc
 605              		@ args = 0, pretend = 0, frame = 0
 606              		@ frame_needed = 0, uses_anonymous_args = 0
 607              		@ link register save eliminated.
 608              	.LVL42:
1236:lib/src/stm32f4xx_rcc.c ****   uint32_t tmpreg = 0;
1237:lib/src/stm32f4xx_rcc.c **** 
1238:lib/src/stm32f4xx_rcc.c ****   /* Check the parameters */
1239:lib/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PCLK(RCC_HCLK));
1240:lib/src/stm32f4xx_rcc.c **** 
1241:lib/src/stm32f4xx_rcc.c ****   tmpreg = RCC->CFGR;
 609              		.loc 1 1241 0
 610 0000 034A     		ldr	r2, .L59
 611 0002 9368     		ldr	r3, [r2, #8]
 612              	.LVL43:
1242:lib/src/stm32f4xx_rcc.c **** 
1243:lib/src/stm32f4xx_rcc.c ****   /* Clear PPRE1[2:0] bits */
1244:lib/src/stm32f4xx_rcc.c ****   tmpreg &= ~RCC_CFGR_PPRE1;
 613              		.loc 1 1244 0
 614 0004 23F4E053 		bic	r3, r3, #7168
 615              	.LVL44:
1245:lib/src/stm32f4xx_rcc.c **** 
1246:lib/src/stm32f4xx_rcc.c ****   /* Set PPRE1[2:0] bits according to RCC_HCLK value */
ARM GAS  C:\Users\rinck\AppData\Local\Temp\ccnBBAPb.s 			page 33


1247:lib/src/stm32f4xx_rcc.c ****   tmpreg |= RCC_HCLK;
 616              		.loc 1 1247 0
 617 0008 1843     		orrs	r0, r0, r3
 618              	.LVL45:
1248:lib/src/stm32f4xx_rcc.c **** 
1249:lib/src/stm32f4xx_rcc.c ****   /* Store the new value */
1250:lib/src/stm32f4xx_rcc.c ****   RCC->CFGR = tmpreg;
 619              		.loc 1 1250 0
 620 000a 9060     		str	r0, [r2, #8]
 621 000c 7047     		bx	lr
 622              	.L60:
 623 000e 00BF     		.align	2
 624              	.L59:
 625 0010 00380240 		.word	1073887232
 626              		.cfi_endproc
 627              	.LFE142:
 629              		.section	.text.RCC_PCLK2Config,"ax",%progbits
 630              		.align	2
 631              		.global	RCC_PCLK2Config
 632              		.thumb
 633              		.thumb_func
 635              	RCC_PCLK2Config:
 636              	.LFB143:
1251:lib/src/stm32f4xx_rcc.c **** }
1252:lib/src/stm32f4xx_rcc.c **** 
1253:lib/src/stm32f4xx_rcc.c **** /**
1254:lib/src/stm32f4xx_rcc.c ****   * @brief  Configures the High Speed APB clock (PCLK2).
1255:lib/src/stm32f4xx_rcc.c ****   * @param  RCC_HCLK: defines the APB2 clock divider. This clock is derived from 
1256:lib/src/stm32f4xx_rcc.c ****   *         the AHB clock (HCLK).
1257:lib/src/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
1258:lib/src/stm32f4xx_rcc.c ****   *            @arg RCC_HCLK_Div1:  APB2 clock = HCLK
1259:lib/src/stm32f4xx_rcc.c ****   *            @arg RCC_HCLK_Div2:  APB2 clock = HCLK/2
1260:lib/src/stm32f4xx_rcc.c ****   *            @arg RCC_HCLK_Div4:  APB2 clock = HCLK/4
1261:lib/src/stm32f4xx_rcc.c ****   *            @arg RCC_HCLK_Div8:  APB2 clock = HCLK/8
1262:lib/src/stm32f4xx_rcc.c ****   *            @arg RCC_HCLK_Div16: APB2 clock = HCLK/16
1263:lib/src/stm32f4xx_rcc.c ****   * @retval None
1264:lib/src/stm32f4xx_rcc.c ****   */
1265:lib/src/stm32f4xx_rcc.c **** void RCC_PCLK2Config(uint32_t RCC_HCLK)
1266:lib/src/stm32f4xx_rcc.c **** {
 637              		.loc 1 1266 0
 638              		.cfi_startproc
 639              		@ args = 0, pretend = 0, frame = 0
 640              		@ frame_needed = 0, uses_anonymous_args = 0
 641              		@ link register save eliminated.
 642              	.LVL46:
1267:lib/src/stm32f4xx_rcc.c ****   uint32_t tmpreg = 0;
1268:lib/src/stm32f4xx_rcc.c **** 
1269:lib/src/stm32f4xx_rcc.c ****   /* Check the parameters */
1270:lib/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PCLK(RCC_HCLK));
1271:lib/src/stm32f4xx_rcc.c **** 
1272:lib/src/stm32f4xx_rcc.c ****   tmpreg = RCC->CFGR;
 643              		.loc 1 1272 0
 644 0000 034A     		ldr	r2, .L62
 645 0002 9368     		ldr	r3, [r2, #8]
 646              	.LVL47:
1273:lib/src/stm32f4xx_rcc.c **** 
1274:lib/src/stm32f4xx_rcc.c ****   /* Clear PPRE2[2:0] bits */
ARM GAS  C:\Users\rinck\AppData\Local\Temp\ccnBBAPb.s 			page 34


1275:lib/src/stm32f4xx_rcc.c ****   tmpreg &= ~RCC_CFGR_PPRE2;
 647              		.loc 1 1275 0
 648 0004 23F46043 		bic	r3, r3, #57344
 649              	.LVL48:
1276:lib/src/stm32f4xx_rcc.c **** 
1277:lib/src/stm32f4xx_rcc.c ****   /* Set PPRE2[2:0] bits according to RCC_HCLK value */
1278:lib/src/stm32f4xx_rcc.c ****   tmpreg |= RCC_HCLK << 3;
 650              		.loc 1 1278 0
 651 0008 43EAC000 		orr	r0, r3, r0, lsl #3
 652              	.LVL49:
1279:lib/src/stm32f4xx_rcc.c **** 
1280:lib/src/stm32f4xx_rcc.c ****   /* Store the new value */
1281:lib/src/stm32f4xx_rcc.c ****   RCC->CFGR = tmpreg;
 653              		.loc 1 1281 0
 654 000c 9060     		str	r0, [r2, #8]
 655 000e 7047     		bx	lr
 656              	.L63:
 657              		.align	2
 658              	.L62:
 659 0010 00380240 		.word	1073887232
 660              		.cfi_endproc
 661              	.LFE143:
 663              		.section	.text.RCC_GetClocksFreq,"ax",%progbits
 664              		.align	2
 665              		.global	RCC_GetClocksFreq
 666              		.thumb
 667              		.thumb_func
 669              	RCC_GetClocksFreq:
 670              	.LFB144:
1282:lib/src/stm32f4xx_rcc.c **** }
1283:lib/src/stm32f4xx_rcc.c **** 
1284:lib/src/stm32f4xx_rcc.c **** /**
1285:lib/src/stm32f4xx_rcc.c ****   * @brief  Returns the frequencies of different on chip clocks; SYSCLK, HCLK, 
1286:lib/src/stm32f4xx_rcc.c ****   *         PCLK1 and PCLK2.
1287:lib/src/stm32f4xx_rcc.c ****   * 
1288:lib/src/stm32f4xx_rcc.c ****   * @note   The system frequency computed by this function is not the real 
1289:lib/src/stm32f4xx_rcc.c ****   *         frequency in the chip. It is calculated based on the predefined 
1290:lib/src/stm32f4xx_rcc.c ****   *         constant and the selected clock source:
1291:lib/src/stm32f4xx_rcc.c ****   * @note     If SYSCLK source is HSI, function returns values based on HSI_VALUE(*)
1292:lib/src/stm32f4xx_rcc.c ****   * @note     If SYSCLK source is HSE, function returns values based on HSE_VALUE(**)
1293:lib/src/stm32f4xx_rcc.c ****   * @note     If SYSCLK source is PLL, function returns values based on HSE_VALUE(**) 
1294:lib/src/stm32f4xx_rcc.c ****   *           or HSI_VALUE(*) multiplied/divided by the PLL factors.         
1295:lib/src/stm32f4xx_rcc.c ****   * @note     (*) HSI_VALUE is a constant defined in stm32f4xx.h file (default value
1296:lib/src/stm32f4xx_rcc.c ****   *               16 MHz) but the real value may vary depending on the variations
1297:lib/src/stm32f4xx_rcc.c ****   *               in voltage and temperature.
1298:lib/src/stm32f4xx_rcc.c ****   * @note     (**) HSE_VALUE is a constant defined in stm32f4xx.h file (default value
1299:lib/src/stm32f4xx_rcc.c ****   *                25 MHz), user has to ensure that HSE_VALUE is same as the real
1300:lib/src/stm32f4xx_rcc.c ****   *                frequency of the crystal used. Otherwise, this function may
1301:lib/src/stm32f4xx_rcc.c ****   *                have wrong result.
1302:lib/src/stm32f4xx_rcc.c ****   *                
1303:lib/src/stm32f4xx_rcc.c ****   * @note   The result of this function could be not correct when using fractional
1304:lib/src/stm32f4xx_rcc.c ****   *         value for HSE crystal.
1305:lib/src/stm32f4xx_rcc.c ****   *   
1306:lib/src/stm32f4xx_rcc.c ****   * @param  RCC_Clocks: pointer to a RCC_ClocksTypeDef structure which will hold
1307:lib/src/stm32f4xx_rcc.c ****   *          the clocks frequencies.
1308:lib/src/stm32f4xx_rcc.c ****   *     
1309:lib/src/stm32f4xx_rcc.c ****   * @note   This function can be used by the user application to compute the 
ARM GAS  C:\Users\rinck\AppData\Local\Temp\ccnBBAPb.s 			page 35


1310:lib/src/stm32f4xx_rcc.c ****   *         baudrate for the communication peripherals or configure other parameters.
1311:lib/src/stm32f4xx_rcc.c ****   * @note   Each time SYSCLK, HCLK, PCLK1 and/or PCLK2 clock changes, this function
1312:lib/src/stm32f4xx_rcc.c ****   *         must be called to update the structure's field. Otherwise, any
1313:lib/src/stm32f4xx_rcc.c ****   *         configuration based on this function will be incorrect.
1314:lib/src/stm32f4xx_rcc.c ****   *    
1315:lib/src/stm32f4xx_rcc.c ****   * @retval None
1316:lib/src/stm32f4xx_rcc.c ****   */
1317:lib/src/stm32f4xx_rcc.c **** void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
1318:lib/src/stm32f4xx_rcc.c **** {
 671              		.loc 1 1318 0
 672              		.cfi_startproc
 673              		@ args = 0, pretend = 0, frame = 0
 674              		@ frame_needed = 0, uses_anonymous_args = 0
 675              		@ link register save eliminated.
 676              	.LVL50:
 677 0000 10B4     		push	{r4}
 678              	.LCFI0:
 679              		.cfi_def_cfa_offset 4
 680              		.cfi_offset 4, -4
 681              	.LVL51:
1319:lib/src/stm32f4xx_rcc.c ****   uint32_t tmp = 0, presc = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
1320:lib/src/stm32f4xx_rcc.c **** #if defined(STM32F412xG) || defined(STM32F413_423xx) || defined(STM32F446xx)  
1321:lib/src/stm32f4xx_rcc.c ****   uint32_t pllr = 2;
1322:lib/src/stm32f4xx_rcc.c **** #endif /* STM32F412xG || STM32F413_423xx || STM32F446xx */
1323:lib/src/stm32f4xx_rcc.c ****   
1324:lib/src/stm32f4xx_rcc.c ****   /* Get SYSCLK source -------------------------------------------------------*/
1325:lib/src/stm32f4xx_rcc.c ****   tmp = RCC->CFGR & RCC_CFGR_SWS;
 682              		.loc 1 1325 0
 683 0002 294B     		ldr	r3, .L74
 684 0004 9B68     		ldr	r3, [r3, #8]
 685 0006 03F00C03 		and	r3, r3, #12
 686              	.LVL52:
1326:lib/src/stm32f4xx_rcc.c ****   
1327:lib/src/stm32f4xx_rcc.c ****   switch (tmp)
 687              		.loc 1 1327 0
 688 000a 042B     		cmp	r3, #4
 689 000c 05D0     		beq	.L66
 690 000e 082B     		cmp	r3, #8
 691 0010 06D0     		beq	.L67
 692 0012 53BB     		cbnz	r3, .L72
1328:lib/src/stm32f4xx_rcc.c ****   {
1329:lib/src/stm32f4xx_rcc.c ****   case 0x00:  /* HSI used as system clock source */
1330:lib/src/stm32f4xx_rcc.c ****     RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 693              		.loc 1 1330 0
 694 0014 254B     		ldr	r3, .L74+4
 695              	.LVL53:
 696 0016 0360     		str	r3, [r0]
1331:lib/src/stm32f4xx_rcc.c ****     break;
 697              		.loc 1 1331 0
 698 0018 29E0     		b	.L69
 699              	.LVL54:
 700              	.L66:
1332:lib/src/stm32f4xx_rcc.c ****   case 0x04:  /* HSE used as system clock  source */
1333:lib/src/stm32f4xx_rcc.c ****     RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 701              		.loc 1 1333 0
 702 001a 254B     		ldr	r3, .L74+8
 703              	.LVL55:
ARM GAS  C:\Users\rinck\AppData\Local\Temp\ccnBBAPb.s 			page 36


 704 001c 0360     		str	r3, [r0]
1334:lib/src/stm32f4xx_rcc.c ****     break;
 705              		.loc 1 1334 0
 706 001e 26E0     		b	.L69
 707              	.LVL56:
 708              	.L67:
1335:lib/src/stm32f4xx_rcc.c ****   case 0x08:  /* PLL P used as system clock  source */
1336:lib/src/stm32f4xx_rcc.c ****     
1337:lib/src/stm32f4xx_rcc.c ****     /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
1338:lib/src/stm32f4xx_rcc.c ****     SYSCLK = PLL_VCO / PLLP
1339:lib/src/stm32f4xx_rcc.c ****     */    
1340:lib/src/stm32f4xx_rcc.c ****     pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 709              		.loc 1 1340 0
 710 0020 214B     		ldr	r3, .L74
 711              	.LVL57:
 712 0022 5A68     		ldr	r2, [r3, #4]
 713              	.LVL58:
1341:lib/src/stm32f4xx_rcc.c ****     pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 714              		.loc 1 1341 0
 715 0024 5B68     		ldr	r3, [r3, #4]
 716 0026 03F03F03 		and	r3, r3, #63
 717              	.LVL59:
1342:lib/src/stm32f4xx_rcc.c ****     
1343:lib/src/stm32f4xx_rcc.c ****     if (pllsource != 0)
 718              		.loc 1 1343 0
 719 002a 12F4800F 		tst	r2, #4194304
 720 002e 09D0     		beq	.L70
1344:lib/src/stm32f4xx_rcc.c ****     {
1345:lib/src/stm32f4xx_rcc.c ****       /* HSE used as PLL clock source */
1346:lib/src/stm32f4xx_rcc.c ****       pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 721              		.loc 1 1346 0
 722 0030 1F4A     		ldr	r2, .L74+8
 723              	.LVL60:
 724 0032 B2FBF3F2 		udiv	r2, r2, r3
 725 0036 1C4B     		ldr	r3, .L74
 726              	.LVL61:
 727 0038 5B68     		ldr	r3, [r3, #4]
 728 003a C3F38813 		ubfx	r3, r3, #6, #9
 729 003e 03FB02F2 		mul	r2, r3, r2
 730              	.LVL62:
 731 0042 08E0     		b	.L71
 732              	.LVL63:
 733              	.L70:
1347:lib/src/stm32f4xx_rcc.c ****     }
1348:lib/src/stm32f4xx_rcc.c ****     else
1349:lib/src/stm32f4xx_rcc.c ****     {
1350:lib/src/stm32f4xx_rcc.c ****       /* HSI used as PLL clock source */
1351:lib/src/stm32f4xx_rcc.c ****       pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 734              		.loc 1 1351 0
 735 0044 194A     		ldr	r2, .L74+4
 736              	.LVL64:
 737 0046 B2FBF3F3 		udiv	r3, r2, r3
 738              	.LVL65:
 739 004a 174A     		ldr	r2, .L74
 740 004c 5168     		ldr	r1, [r2, #4]
 741 004e C1F38811 		ubfx	r1, r1, #6, #9
 742 0052 01FB03F2 		mul	r2, r1, r3
ARM GAS  C:\Users\rinck\AppData\Local\Temp\ccnBBAPb.s 			page 37


 743              	.LVL66:
 744              	.L71:
1352:lib/src/stm32f4xx_rcc.c ****     }
1353:lib/src/stm32f4xx_rcc.c ****     
1354:lib/src/stm32f4xx_rcc.c ****     pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 745              		.loc 1 1354 0
 746 0056 144B     		ldr	r3, .L74
 747 0058 5B68     		ldr	r3, [r3, #4]
 748 005a C3F30143 		ubfx	r3, r3, #16, #2
 749 005e 0133     		adds	r3, r3, #1
 750 0060 5B00     		lsls	r3, r3, #1
 751              	.LVL67:
1355:lib/src/stm32f4xx_rcc.c ****     RCC_Clocks->SYSCLK_Frequency = pllvco/pllp;
 752              		.loc 1 1355 0
 753 0062 B2FBF3F3 		udiv	r3, r2, r3
 754              	.LVL68:
 755 0066 0360     		str	r3, [r0]
1356:lib/src/stm32f4xx_rcc.c ****     break;
 756              		.loc 1 1356 0
 757 0068 01E0     		b	.L69
 758              	.LVL69:
 759              	.L72:
1357:lib/src/stm32f4xx_rcc.c **** 
1358:lib/src/stm32f4xx_rcc.c **** #if defined(STM32F412xG) || defined(STM32F413_423xx) || defined(STM32F446xx)
1359:lib/src/stm32f4xx_rcc.c ****   case 0x0C:  /* PLL R used as system clock  source */
1360:lib/src/stm32f4xx_rcc.c ****     /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
1361:lib/src/stm32f4xx_rcc.c ****     SYSCLK = PLL_VCO / PLLR
1362:lib/src/stm32f4xx_rcc.c ****     */    
1363:lib/src/stm32f4xx_rcc.c ****     pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
1364:lib/src/stm32f4xx_rcc.c ****     pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
1365:lib/src/stm32f4xx_rcc.c ****     
1366:lib/src/stm32f4xx_rcc.c ****     if (pllsource != 0)
1367:lib/src/stm32f4xx_rcc.c ****     {
1368:lib/src/stm32f4xx_rcc.c ****       /* HSE used as PLL clock source */
1369:lib/src/stm32f4xx_rcc.c ****       pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
1370:lib/src/stm32f4xx_rcc.c ****     }
1371:lib/src/stm32f4xx_rcc.c ****     else
1372:lib/src/stm32f4xx_rcc.c ****     {
1373:lib/src/stm32f4xx_rcc.c ****       /* HSI used as PLL clock source */
1374:lib/src/stm32f4xx_rcc.c ****       pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
1375:lib/src/stm32f4xx_rcc.c ****     }
1376:lib/src/stm32f4xx_rcc.c ****     
1377:lib/src/stm32f4xx_rcc.c ****     pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >>28) + 1 ) *2;
1378:lib/src/stm32f4xx_rcc.c ****     RCC_Clocks->SYSCLK_Frequency = pllvco/pllr;    
1379:lib/src/stm32f4xx_rcc.c ****     break;
1380:lib/src/stm32f4xx_rcc.c **** #endif /* STM32F412xG || STM32F413_423xx || STM32F446xx */
1381:lib/src/stm32f4xx_rcc.c ****     
1382:lib/src/stm32f4xx_rcc.c ****   default:
1383:lib/src/stm32f4xx_rcc.c ****     RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 760              		.loc 1 1383 0
 761 006a 104B     		ldr	r3, .L74+4
 762              	.LVL70:
 763 006c 0360     		str	r3, [r0]
 764              	.LVL71:
 765              	.L69:
1384:lib/src/stm32f4xx_rcc.c ****     break;
1385:lib/src/stm32f4xx_rcc.c ****   }
ARM GAS  C:\Users\rinck\AppData\Local\Temp\ccnBBAPb.s 			page 38


1386:lib/src/stm32f4xx_rcc.c ****   /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/
1387:lib/src/stm32f4xx_rcc.c ****   
1388:lib/src/stm32f4xx_rcc.c ****   /* Get HCLK prescaler */
1389:lib/src/stm32f4xx_rcc.c ****   tmp = RCC->CFGR & RCC_CFGR_HPRE;
 766              		.loc 1 1389 0
 767 006e 0E4C     		ldr	r4, .L74
 768 0070 A368     		ldr	r3, [r4, #8]
 769              	.LVL72:
1390:lib/src/stm32f4xx_rcc.c ****   tmp = tmp >> 4;
 770              		.loc 1 1390 0
 771 0072 C3F30313 		ubfx	r3, r3, #4, #4
 772              	.LVL73:
1391:lib/src/stm32f4xx_rcc.c ****   presc = APBAHBPrescTable[tmp];
 773              		.loc 1 1391 0
 774 0076 0F49     		ldr	r1, .L74+12
 775 0078 CB5C     		ldrb	r3, [r1, r3]	@ zero_extendqisi2
 776              	.LVL74:
 777 007a DAB2     		uxtb	r2, r3
 778              	.LVL75:
1392:lib/src/stm32f4xx_rcc.c ****   /* HCLK clock frequency */
1393:lib/src/stm32f4xx_rcc.c ****   RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 779              		.loc 1 1393 0
 780 007c 0368     		ldr	r3, [r0]
 781 007e D340     		lsrs	r3, r3, r2
 782 0080 4360     		str	r3, [r0, #4]
1394:lib/src/stm32f4xx_rcc.c **** 
1395:lib/src/stm32f4xx_rcc.c ****   /* Get PCLK1 prescaler */
1396:lib/src/stm32f4xx_rcc.c ****   tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 783              		.loc 1 1396 0
 784 0082 A268     		ldr	r2, [r4, #8]
 785              	.LVL76:
1397:lib/src/stm32f4xx_rcc.c ****   tmp = tmp >> 10;
 786              		.loc 1 1397 0
 787 0084 C2F38222 		ubfx	r2, r2, #10, #3
 788              	.LVL77:
1398:lib/src/stm32f4xx_rcc.c ****   presc = APBAHBPrescTable[tmp];
 789              		.loc 1 1398 0
 790 0088 8A5C     		ldrb	r2, [r1, r2]	@ zero_extendqisi2
 791              	.LVL78:
 792 008a D2B2     		uxtb	r2, r2
 793              	.LVL79:
1399:lib/src/stm32f4xx_rcc.c ****   /* PCLK1 clock frequency */
1400:lib/src/stm32f4xx_rcc.c ****   RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 794              		.loc 1 1400 0
 795 008c 23FA02F2 		lsr	r2, r3, r2
 796              	.LVL80:
 797 0090 8260     		str	r2, [r0, #8]
1401:lib/src/stm32f4xx_rcc.c **** 
1402:lib/src/stm32f4xx_rcc.c ****   /* Get PCLK2 prescaler */
1403:lib/src/stm32f4xx_rcc.c ****   tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 798              		.loc 1 1403 0
 799 0092 A268     		ldr	r2, [r4, #8]
 800              	.LVL81:
1404:lib/src/stm32f4xx_rcc.c ****   tmp = tmp >> 13;
 801              		.loc 1 1404 0
 802 0094 C2F34232 		ubfx	r2, r2, #13, #3
 803              	.LVL82:
ARM GAS  C:\Users\rinck\AppData\Local\Temp\ccnBBAPb.s 			page 39


1405:lib/src/stm32f4xx_rcc.c ****   presc = APBAHBPrescTable[tmp];
 804              		.loc 1 1405 0
 805 0098 8A5C     		ldrb	r2, [r1, r2]	@ zero_extendqisi2
 806              	.LVL83:
 807 009a D2B2     		uxtb	r2, r2
 808              	.LVL84:
1406:lib/src/stm32f4xx_rcc.c ****   /* PCLK2 clock frequency */
1407:lib/src/stm32f4xx_rcc.c ****   RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 809              		.loc 1 1407 0
 810 009c D340     		lsrs	r3, r3, r2
 811 009e C360     		str	r3, [r0, #12]
1408:lib/src/stm32f4xx_rcc.c **** }
 812              		.loc 1 1408 0
 813 00a0 5DF8044B 		ldr	r4, [sp], #4
 814              	.LCFI1:
 815              		.cfi_restore 4
 816              		.cfi_def_cfa_offset 0
 817 00a4 7047     		bx	lr
 818              	.L75:
 819 00a6 00BF     		.align	2
 820              	.L74:
 821 00a8 00380240 		.word	1073887232
 822 00ac 0024F400 		.word	16000000
 823 00b0 40787D01 		.word	25000000
 824 00b4 00000000 		.word	.LANCHOR0
 825              		.cfi_endproc
 826              	.LFE144:
 828              		.section	.text.RCC_RTCCLKConfig,"ax",%progbits
 829              		.align	2
 830              		.global	RCC_RTCCLKConfig
 831              		.thumb
 832              		.thumb_func
 834              	RCC_RTCCLKConfig:
 835              	.LFB145:
1409:lib/src/stm32f4xx_rcc.c **** 
1410:lib/src/stm32f4xx_rcc.c **** /**
1411:lib/src/stm32f4xx_rcc.c ****   * @}
1412:lib/src/stm32f4xx_rcc.c ****   */
1413:lib/src/stm32f4xx_rcc.c **** 
1414:lib/src/stm32f4xx_rcc.c **** /** @defgroup RCC_Group3 Peripheral clocks configuration functions
1415:lib/src/stm32f4xx_rcc.c ****  *  @brief   Peripheral clocks configuration functions 
1416:lib/src/stm32f4xx_rcc.c ****  *
1417:lib/src/stm32f4xx_rcc.c **** @verbatim   
1418:lib/src/stm32f4xx_rcc.c ****  ===============================================================================
1419:lib/src/stm32f4xx_rcc.c ****               ##### Peripheral clocks configuration functions #####
1420:lib/src/stm32f4xx_rcc.c ****  ===============================================================================  
1421:lib/src/stm32f4xx_rcc.c ****     [..] This section provide functions allowing to configure the Peripheral clocks. 
1422:lib/src/stm32f4xx_rcc.c ****   
1423:lib/src/stm32f4xx_rcc.c ****       (#) The RTC clock which is derived from the LSI, LSE or HSE clock divided 
1424:lib/src/stm32f4xx_rcc.c ****           by 2 to 31.
1425:lib/src/stm32f4xx_rcc.c ****      
1426:lib/src/stm32f4xx_rcc.c ****       (#) After restart from Reset or wakeup from STANDBY, all peripherals are off
1427:lib/src/stm32f4xx_rcc.c ****           except internal SRAM, Flash and JTAG. Before to start using a peripheral 
1428:lib/src/stm32f4xx_rcc.c ****           you have to enable its interface clock. You can do this using 
1429:lib/src/stm32f4xx_rcc.c ****           RCC_AHBPeriphClockCmd(), RCC_APB2PeriphClockCmd() and RCC_APB1PeriphClockCmd() functions.
1430:lib/src/stm32f4xx_rcc.c **** 
1431:lib/src/stm32f4xx_rcc.c ****       (#) To reset the peripherals configuration (to the default state after device reset)
ARM GAS  C:\Users\rinck\AppData\Local\Temp\ccnBBAPb.s 			page 40


1432:lib/src/stm32f4xx_rcc.c ****           you can use RCC_AHBPeriphResetCmd(), RCC_APB2PeriphResetCmd() and 
1433:lib/src/stm32f4xx_rcc.c ****           RCC_APB1PeriphResetCmd() functions.
1434:lib/src/stm32f4xx_rcc.c ****      
1435:lib/src/stm32f4xx_rcc.c ****       (#) To further reduce power consumption in SLEEP mode the peripheral clocks 
1436:lib/src/stm32f4xx_rcc.c ****           can be disabled prior to executing the WFI or WFE instructions. 
1437:lib/src/stm32f4xx_rcc.c ****           You can do this using RCC_AHBPeriphClockLPModeCmd(), 
1438:lib/src/stm32f4xx_rcc.c ****           RCC_APB2PeriphClockLPModeCmd() and RCC_APB1PeriphClockLPModeCmd() functions.  
1439:lib/src/stm32f4xx_rcc.c **** 
1440:lib/src/stm32f4xx_rcc.c **** @endverbatim
1441:lib/src/stm32f4xx_rcc.c ****   * @{
1442:lib/src/stm32f4xx_rcc.c ****   */
1443:lib/src/stm32f4xx_rcc.c **** 
1444:lib/src/stm32f4xx_rcc.c **** /**
1445:lib/src/stm32f4xx_rcc.c ****   * @brief  Configures the RTC clock (RTCCLK).
1446:lib/src/stm32f4xx_rcc.c ****   * @note   As the RTC clock configuration bits are in the Backup domain and write
1447:lib/src/stm32f4xx_rcc.c ****   *         access is denied to this domain after reset, you have to enable write
1448:lib/src/stm32f4xx_rcc.c ****   *         access using PWR_BackupAccessCmd(ENABLE) function before to configure
1449:lib/src/stm32f4xx_rcc.c ****   *         the RTC clock source (to be done once after reset).    
1450:lib/src/stm32f4xx_rcc.c ****   * @note   Once the RTC clock is configured it can't be changed unless the  
1451:lib/src/stm32f4xx_rcc.c ****   *         Backup domain is reset using RCC_BackupResetCmd() function, or by
1452:lib/src/stm32f4xx_rcc.c ****   *         a Power On Reset (POR).
1453:lib/src/stm32f4xx_rcc.c ****   *    
1454:lib/src/stm32f4xx_rcc.c ****   * @param  RCC_RTCCLKSource: specifies the RTC clock source.
1455:lib/src/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
1456:lib/src/stm32f4xx_rcc.c ****   *            @arg RCC_RTCCLKSource_LSE: LSE selected as RTC clock
1457:lib/src/stm32f4xx_rcc.c ****   *            @arg RCC_RTCCLKSource_LSI: LSI selected as RTC clock
1458:lib/src/stm32f4xx_rcc.c ****   *            @arg RCC_RTCCLKSource_HSE_Divx: HSE clock divided by x selected
1459:lib/src/stm32f4xx_rcc.c ****   *                                            as RTC clock, where x:[2,31]
1460:lib/src/stm32f4xx_rcc.c ****   *  
1461:lib/src/stm32f4xx_rcc.c ****   * @note   If the LSE or LSI is used as RTC clock source, the RTC continues to
1462:lib/src/stm32f4xx_rcc.c ****   *         work in STOP and STANDBY modes, and can be used as wakeup source.
1463:lib/src/stm32f4xx_rcc.c ****   *         However, when the HSE clock is used as RTC clock source, the RTC
1464:lib/src/stm32f4xx_rcc.c ****   *         cannot be used in STOP and STANDBY modes.    
1465:lib/src/stm32f4xx_rcc.c ****   * @note   The maximum input clock frequency for RTC is 1MHz (when using HSE as
1466:lib/src/stm32f4xx_rcc.c ****   *         RTC clock source).
1467:lib/src/stm32f4xx_rcc.c ****   *  
1468:lib/src/stm32f4xx_rcc.c ****   * @retval None
1469:lib/src/stm32f4xx_rcc.c ****   */
1470:lib/src/stm32f4xx_rcc.c **** void RCC_RTCCLKConfig(uint32_t RCC_RTCCLKSource)
1471:lib/src/stm32f4xx_rcc.c **** {
 836              		.loc 1 1471 0
 837              		.cfi_startproc
 838              		@ args = 0, pretend = 0, frame = 0
 839              		@ frame_needed = 0, uses_anonymous_args = 0
 840              		@ link register save eliminated.
 841              	.LVL85:
1472:lib/src/stm32f4xx_rcc.c ****   uint32_t tmpreg = 0;
1473:lib/src/stm32f4xx_rcc.c **** 
1474:lib/src/stm32f4xx_rcc.c ****   /* Check the parameters */
1475:lib/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_RTCCLK_SOURCE(RCC_RTCCLKSource));
1476:lib/src/stm32f4xx_rcc.c **** 
1477:lib/src/stm32f4xx_rcc.c ****   if ((RCC_RTCCLKSource & 0x00000300) == 0x00000300)
 842              		.loc 1 1477 0
 843 0000 00F44073 		and	r3, r0, #768
 844 0004 B3F5407F 		cmp	r3, #768
 845 0008 09D1     		bne	.L77
1478:lib/src/stm32f4xx_rcc.c ****   { /* If HSE is selected as RTC clock source, configure HSE division factor for RTC clock */
ARM GAS  C:\Users\rinck\AppData\Local\Temp\ccnBBAPb.s 			page 41


1479:lib/src/stm32f4xx_rcc.c ****     tmpreg = RCC->CFGR;
 846              		.loc 1 1479 0
 847 000a 0849     		ldr	r1, .L78
 848 000c 8B68     		ldr	r3, [r1, #8]
 849              	.LVL86:
1480:lib/src/stm32f4xx_rcc.c **** 
1481:lib/src/stm32f4xx_rcc.c ****     /* Clear RTCPRE[4:0] bits */
1482:lib/src/stm32f4xx_rcc.c ****     tmpreg &= ~RCC_CFGR_RTCPRE;
 850              		.loc 1 1482 0
 851 000e 23F4F812 		bic	r2, r3, #2031616
 852              	.LVL87:
1483:lib/src/stm32f4xx_rcc.c **** 
1484:lib/src/stm32f4xx_rcc.c ****     /* Configure HSE division factor for RTC clock */
1485:lib/src/stm32f4xx_rcc.c ****     tmpreg |= (RCC_RTCCLKSource & 0xFFFFCFF);
 853              		.loc 1 1485 0
 854 0012 20F07043 		bic	r3, r0, #-268435456
 855 0016 23F44073 		bic	r3, r3, #768
 856 001a 1343     		orrs	r3, r3, r2
 857              	.LVL88:
1486:lib/src/stm32f4xx_rcc.c **** 
1487:lib/src/stm32f4xx_rcc.c ****     /* Store the new value */
1488:lib/src/stm32f4xx_rcc.c ****     RCC->CFGR = tmpreg;
 858              		.loc 1 1488 0
 859 001c 8B60     		str	r3, [r1, #8]
 860              	.LVL89:
 861              	.L77:
1489:lib/src/stm32f4xx_rcc.c ****   }
1490:lib/src/stm32f4xx_rcc.c ****     
1491:lib/src/stm32f4xx_rcc.c ****   /* Select the RTC clock source */
1492:lib/src/stm32f4xx_rcc.c ****   RCC->BDCR |= (RCC_RTCCLKSource & 0x00000FFF);
 862              		.loc 1 1492 0
 863 001e 034B     		ldr	r3, .L78
 864 0020 1A6F     		ldr	r2, [r3, #112]
 865 0022 C0F30B00 		ubfx	r0, r0, #0, #12
 866              	.LVL90:
 867 0026 1043     		orrs	r0, r0, r2
 868 0028 1867     		str	r0, [r3, #112]
 869 002a 7047     		bx	lr
 870              	.L79:
 871              		.align	2
 872              	.L78:
 873 002c 00380240 		.word	1073887232
 874              		.cfi_endproc
 875              	.LFE145:
 877              		.section	.text.RCC_RTCCLKCmd,"ax",%progbits
 878              		.align	2
 879              		.global	RCC_RTCCLKCmd
 880              		.thumb
 881              		.thumb_func
 883              	RCC_RTCCLKCmd:
 884              	.LFB146:
1493:lib/src/stm32f4xx_rcc.c **** }
1494:lib/src/stm32f4xx_rcc.c **** 
1495:lib/src/stm32f4xx_rcc.c **** /**
1496:lib/src/stm32f4xx_rcc.c ****   * @brief  Enables or disables the RTC clock.
1497:lib/src/stm32f4xx_rcc.c ****   * @note   This function must be used only after the RTC clock source was selected
1498:lib/src/stm32f4xx_rcc.c ****   *         using the RCC_RTCCLKConfig function.
ARM GAS  C:\Users\rinck\AppData\Local\Temp\ccnBBAPb.s 			page 42


1499:lib/src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the RTC clock. This parameter can be: ENABLE or DISABLE.
1500:lib/src/stm32f4xx_rcc.c ****   * @retval None
1501:lib/src/stm32f4xx_rcc.c ****   */
1502:lib/src/stm32f4xx_rcc.c **** void RCC_RTCCLKCmd(FunctionalState NewState)
1503:lib/src/stm32f4xx_rcc.c **** {
 885              		.loc 1 1503 0
 886              		.cfi_startproc
 887              		@ args = 0, pretend = 0, frame = 0
 888              		@ frame_needed = 0, uses_anonymous_args = 0
 889              		@ link register save eliminated.
 890              	.LVL91:
1504:lib/src/stm32f4xx_rcc.c ****   /* Check the parameters */
1505:lib/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1506:lib/src/stm32f4xx_rcc.c **** 
1507:lib/src/stm32f4xx_rcc.c ****   *(__IO uint32_t *) BDCR_RTCEN_BB = (uint32_t)NewState;
 891              		.loc 1 1507 0
 892 0000 014B     		ldr	r3, .L81
 893 0002 1860     		str	r0, [r3]
 894 0004 7047     		bx	lr
 895              	.L82:
 896 0006 00BF     		.align	2
 897              	.L81:
 898 0008 3C0E4742 		.word	1111952956
 899              		.cfi_endproc
 900              	.LFE146:
 902              		.section	.text.RCC_BackupResetCmd,"ax",%progbits
 903              		.align	2
 904              		.global	RCC_BackupResetCmd
 905              		.thumb
 906              		.thumb_func
 908              	RCC_BackupResetCmd:
 909              	.LFB147:
1508:lib/src/stm32f4xx_rcc.c **** }
1509:lib/src/stm32f4xx_rcc.c **** 
1510:lib/src/stm32f4xx_rcc.c **** /**
1511:lib/src/stm32f4xx_rcc.c ****   * @brief  Forces or releases the Backup domain reset.
1512:lib/src/stm32f4xx_rcc.c ****   * @note   This function resets the RTC peripheral (including the backup registers)
1513:lib/src/stm32f4xx_rcc.c ****   *         and the RTC clock source selection in RCC_CSR register.
1514:lib/src/stm32f4xx_rcc.c ****   * @note   The BKPSRAM is not affected by this reset.    
1515:lib/src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the Backup domain reset.
1516:lib/src/stm32f4xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
1517:lib/src/stm32f4xx_rcc.c ****   * @retval None
1518:lib/src/stm32f4xx_rcc.c ****   */
1519:lib/src/stm32f4xx_rcc.c **** void RCC_BackupResetCmd(FunctionalState NewState)
1520:lib/src/stm32f4xx_rcc.c **** {
 910              		.loc 1 1520 0
 911              		.cfi_startproc
 912              		@ args = 0, pretend = 0, frame = 0
 913              		@ frame_needed = 0, uses_anonymous_args = 0
 914              		@ link register save eliminated.
 915              	.LVL92:
1521:lib/src/stm32f4xx_rcc.c ****   /* Check the parameters */
1522:lib/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1523:lib/src/stm32f4xx_rcc.c ****   *(__IO uint32_t *) BDCR_BDRST_BB = (uint32_t)NewState;
 916              		.loc 1 1523 0
 917 0000 014B     		ldr	r3, .L84
 918 0002 1860     		str	r0, [r3]
ARM GAS  C:\Users\rinck\AppData\Local\Temp\ccnBBAPb.s 			page 43


 919 0004 7047     		bx	lr
 920              	.L85:
 921 0006 00BF     		.align	2
 922              	.L84:
 923 0008 400E4742 		.word	1111952960
 924              		.cfi_endproc
 925              	.LFE147:
 927              		.section	.text.RCC_I2SCLKConfig,"ax",%progbits
 928              		.align	2
 929              		.global	RCC_I2SCLKConfig
 930              		.thumb
 931              		.thumb_func
 933              	RCC_I2SCLKConfig:
 934              	.LFB148:
1524:lib/src/stm32f4xx_rcc.c **** }
1525:lib/src/stm32f4xx_rcc.c **** 
1526:lib/src/stm32f4xx_rcc.c **** #if defined (STM32F412xG) || defined(STM32F413_423xx) || defined(STM32F446xx)
1527:lib/src/stm32f4xx_rcc.c **** /**
1528:lib/src/stm32f4xx_rcc.c ****   * @brief  Configures the I2S clock source (I2SCLK).
1529:lib/src/stm32f4xx_rcc.c ****   * @note   This function must be called before enabling the I2S APB clock.
1530:lib/src/stm32f4xx_rcc.c ****   *
1531:lib/src/stm32f4xx_rcc.c ****   * @param  RCC_I2SAPBx: specifies the APBx I2S clock source.
1532:lib/src/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
1533:lib/src/stm32f4xx_rcc.c ****   *            @arg RCC_I2SBus_APB1: I2S peripheral instance is on APB1 Bus
1534:lib/src/stm32f4xx_rcc.c ****   *            @arg RCC_I2SBus_APB2: I2S peripheral instance is on APB2 Bus
1535:lib/src/stm32f4xx_rcc.c ****   *
1536:lib/src/stm32f4xx_rcc.c ****   * @param  RCC_I2SCLKSource: specifies the I2S clock source.
1537:lib/src/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
1538:lib/src/stm32f4xx_rcc.c ****   *            @arg RCC_I2SCLKSource_PLLI2S: PLLI2S clock used as I2S clock source
1539:lib/src/stm32f4xx_rcc.c ****   *            @arg RCC_I2SCLKSource_Ext: External clock mapped on the I2S_CKIN pin
1540:lib/src/stm32f4xx_rcc.c ****   *                                        used as I2S clock source
1541:lib/src/stm32f4xx_rcc.c ****   *            @arg RCC_I2SCLKSource_PLL: PLL clock used as I2S clock source
1542:lib/src/stm32f4xx_rcc.c ****   *            @arg RCC_I2SCLKSource_HSI_HSE: HSI or HSE depends on PLLSRC used as I2S clock source
1543:lib/src/stm32f4xx_rcc.c ****   * @retval None
1544:lib/src/stm32f4xx_rcc.c ****   */
1545:lib/src/stm32f4xx_rcc.c **** void RCC_I2SCLKConfig(uint32_t RCC_I2SAPBx, uint32_t RCC_I2SCLKSource)
1546:lib/src/stm32f4xx_rcc.c **** {
1547:lib/src/stm32f4xx_rcc.c ****   /* Check the parameters */
1548:lib/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_I2SCLK_SOURCE(RCC_I2SCLKSource));
1549:lib/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_I2S_APBx(RCC_I2SAPBx));
1550:lib/src/stm32f4xx_rcc.c ****   
1551:lib/src/stm32f4xx_rcc.c ****   if(RCC_I2SAPBx == RCC_I2SBus_APB1)
1552:lib/src/stm32f4xx_rcc.c ****   {
1553:lib/src/stm32f4xx_rcc.c ****     /* Clear APB1 I2Sx clock source selection bits */
1554:lib/src/stm32f4xx_rcc.c ****     RCC->DCKCFGR &= ~RCC_DCKCFGR_I2S1SRC;
1555:lib/src/stm32f4xx_rcc.c ****     /* Set new APB1 I2Sx clock source*/
1556:lib/src/stm32f4xx_rcc.c ****     RCC->DCKCFGR |= RCC_I2SCLKSource;
1557:lib/src/stm32f4xx_rcc.c ****   }
1558:lib/src/stm32f4xx_rcc.c ****   else
1559:lib/src/stm32f4xx_rcc.c ****   {
1560:lib/src/stm32f4xx_rcc.c ****     /* Clear APB2 I2Sx clock source selection  bits */
1561:lib/src/stm32f4xx_rcc.c ****     RCC->DCKCFGR &= ~RCC_DCKCFGR_I2S2SRC;
1562:lib/src/stm32f4xx_rcc.c ****     /* Set new APB2 I2Sx clock source */
1563:lib/src/stm32f4xx_rcc.c ****     RCC->DCKCFGR |= (RCC_I2SCLKSource << 2);
1564:lib/src/stm32f4xx_rcc.c ****   }
1565:lib/src/stm32f4xx_rcc.c **** }
1566:lib/src/stm32f4xx_rcc.c **** #if defined(STM32F446xx)
ARM GAS  C:\Users\rinck\AppData\Local\Temp\ccnBBAPb.s 			page 44


1567:lib/src/stm32f4xx_rcc.c **** /**
1568:lib/src/stm32f4xx_rcc.c ****   * @brief  Configures the SAIx clock source (SAIxCLK).
1569:lib/src/stm32f4xx_rcc.c ****   * @note   This function must be called before enabling the SAIx APB clock.
1570:lib/src/stm32f4xx_rcc.c ****   *
1571:lib/src/stm32f4xx_rcc.c ****   * @param  RCC_SAIInstance: specifies the SAIx clock source.
1572:lib/src/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
1573:lib/src/stm32f4xx_rcc.c ****   *            @arg RCC_SAIInstance_SAI1: SAI1 clock source selection
1574:lib/src/stm32f4xx_rcc.c ****   *            @arg RCC_SAIInstance_SAI2: SAI2 clock source selections
1575:lib/src/stm32f4xx_rcc.c ****   *
1576:lib/src/stm32f4xx_rcc.c ****   * @param  RCC_SAICLKSource: specifies the SAI clock source.
1577:lib/src/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
1578:lib/src/stm32f4xx_rcc.c ****   *            @arg RCC_SAICLKSource_PLLSAI: PLLSAI clock used as SAI clock source
1579:lib/src/stm32f4xx_rcc.c ****   *            @arg RCC_SAICLKSource_PLLI2S: PLLI2S clock used as SAI clock source
1580:lib/src/stm32f4xx_rcc.c ****   *            @arg RCC_SAICLKSource_PLL: PLL clock used as SAI clock source
1581:lib/src/stm32f4xx_rcc.c ****   *            @arg RCC_SAICLKSource_HSI_HSE: HSI or HSE depends on PLLSRC used as SAI clock source
1582:lib/src/stm32f4xx_rcc.c ****   * @retval None
1583:lib/src/stm32f4xx_rcc.c ****   */
1584:lib/src/stm32f4xx_rcc.c **** void RCC_SAICLKConfig(uint32_t RCC_SAIInstance, uint32_t RCC_SAICLKSource)
1585:lib/src/stm32f4xx_rcc.c **** {
1586:lib/src/stm32f4xx_rcc.c ****   /* Check the parameters */
1587:lib/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_SAICLK_SOURCE(RCC_SAICLKSource));
1588:lib/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_SAI_INSTANCE(RCC_SAIInstance));
1589:lib/src/stm32f4xx_rcc.c ****   
1590:lib/src/stm32f4xx_rcc.c ****   if(RCC_SAIInstance == RCC_SAIInstance_SAI1)
1591:lib/src/stm32f4xx_rcc.c ****   {
1592:lib/src/stm32f4xx_rcc.c ****     /* Clear SAI1 clock source selection bits */
1593:lib/src/stm32f4xx_rcc.c ****     RCC->DCKCFGR &= ~RCC_DCKCFGR_SAI1SRC;
1594:lib/src/stm32f4xx_rcc.c ****     /* Set new SAI1 clock source */
1595:lib/src/stm32f4xx_rcc.c ****     RCC->DCKCFGR |= RCC_SAICLKSource;
1596:lib/src/stm32f4xx_rcc.c ****   }
1597:lib/src/stm32f4xx_rcc.c ****   else
1598:lib/src/stm32f4xx_rcc.c ****   {
1599:lib/src/stm32f4xx_rcc.c ****     /* Clear SAI2 clock source selection bits */
1600:lib/src/stm32f4xx_rcc.c ****     RCC->DCKCFGR &= ~RCC_DCKCFGR_SAI2SRC;
1601:lib/src/stm32f4xx_rcc.c ****     /* Set new SAI2 clock source */
1602:lib/src/stm32f4xx_rcc.c ****     RCC->DCKCFGR |= (RCC_SAICLKSource << 2);
1603:lib/src/stm32f4xx_rcc.c ****   }
1604:lib/src/stm32f4xx_rcc.c **** }
1605:lib/src/stm32f4xx_rcc.c **** #endif /* STM32F446xx */
1606:lib/src/stm32f4xx_rcc.c **** 
1607:lib/src/stm32f4xx_rcc.c **** #if defined(STM32F413_423xx)
1608:lib/src/stm32f4xx_rcc.c **** /**
1609:lib/src/stm32f4xx_rcc.c ****   * @brief  Configures SAI1BlockA clock source selection.      
1610:lib/src/stm32f4xx_rcc.c ****   * @note   This function must be called before enabling PLLSAI, PLLI2S and  
1611:lib/src/stm32f4xx_rcc.c ****   *         the SAI clock.
1612:lib/src/stm32f4xx_rcc.c ****   * @param  RCC_SAIBlockACLKSource: specifies the SAI Block A clock source.
1613:lib/src/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
1614:lib/src/stm32f4xx_rcc.c ****   *            @arg RCC_SAIACLKSource_PLLI2SR: PLLI2SR clock used as SAI clock source
1615:lib/src/stm32f4xx_rcc.c ****   *            @arg RCC_SAIACLKSource_PLLI2S: PLLI2S clock used as SAI clock source
1616:lib/src/stm32f4xx_rcc.c ****   *            @arg RCC_SAIACLKSource_PLL: PLL clock used as SAI clock source
1617:lib/src/stm32f4xx_rcc.c ****   *            @arg RCC_SAIACLKSource_HSI_HSE: HSI or HSE depends on PLLSRC used as SAI clock sourc
1618:lib/src/stm32f4xx_rcc.c ****   * @retval None
1619:lib/src/stm32f4xx_rcc.c ****   */
1620:lib/src/stm32f4xx_rcc.c **** void RCC_SAIBlockACLKConfig(uint32_t RCC_SAIBlockACLKSource)
1621:lib/src/stm32f4xx_rcc.c **** {
1622:lib/src/stm32f4xx_rcc.c ****   uint32_t tmpreg = 0;
1623:lib/src/stm32f4xx_rcc.c ****   
ARM GAS  C:\Users\rinck\AppData\Local\Temp\ccnBBAPb.s 			page 45


1624:lib/src/stm32f4xx_rcc.c ****   /* Check the parameters */
1625:lib/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_SAIACLK_SOURCE(RCC_SAIBlockACLKSource));
1626:lib/src/stm32f4xx_rcc.c ****   
1627:lib/src/stm32f4xx_rcc.c ****   tmpreg = RCC->DCKCFGR;
1628:lib/src/stm32f4xx_rcc.c **** 
1629:lib/src/stm32f4xx_rcc.c ****   /* Clear RCC_DCKCFGR_SAI1ASRC[1:0] bits */
1630:lib/src/stm32f4xx_rcc.c ****   tmpreg &= ~RCC_DCKCFGR_SAI1ASRC;
1631:lib/src/stm32f4xx_rcc.c **** 
1632:lib/src/stm32f4xx_rcc.c ****   /* Set SAI Block A source selection value */
1633:lib/src/stm32f4xx_rcc.c ****   tmpreg |= RCC_SAIBlockACLKSource;
1634:lib/src/stm32f4xx_rcc.c **** 
1635:lib/src/stm32f4xx_rcc.c ****   /* Store the new value */
1636:lib/src/stm32f4xx_rcc.c ****   RCC->DCKCFGR = tmpreg;
1637:lib/src/stm32f4xx_rcc.c **** }
1638:lib/src/stm32f4xx_rcc.c **** 
1639:lib/src/stm32f4xx_rcc.c **** /**
1640:lib/src/stm32f4xx_rcc.c ****   * @brief  Configures SAI1BlockB clock source selection.      
1641:lib/src/stm32f4xx_rcc.c ****   * @note   This function must be called before enabling PLLSAI, PLLI2S and  
1642:lib/src/stm32f4xx_rcc.c ****   *         the SAI clock.
1643:lib/src/stm32f4xx_rcc.c ****   * @param  RCC_SAIBlockBCLKSource: specifies the SAI Block B clock source.
1644:lib/src/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
1645:lib/src/stm32f4xx_rcc.c ****   *            @arg RCC_SAIBCLKSource_PLLI2SR: PLLI2SR clock used as SAI clock source
1646:lib/src/stm32f4xx_rcc.c ****   *            @arg RCC_SAIBCLKSource_PLLI2S: PLLI2S clock used as SAI clock source
1647:lib/src/stm32f4xx_rcc.c ****   *            @arg RCC_SAIBCLKSource_PLL: PLL clock used as SAI clock source
1648:lib/src/stm32f4xx_rcc.c ****   *            @arg RCC_SAIBCLKSource_HSI_HSE: HSI or HSE depends on PLLSRC used as SAI clock sourc
1649:lib/src/stm32f4xx_rcc.c ****   * @retval None
1650:lib/src/stm32f4xx_rcc.c ****   */
1651:lib/src/stm32f4xx_rcc.c **** void RCC_SAIBlockBCLKConfig(uint32_t RCC_SAIBlockBCLKSource)
1652:lib/src/stm32f4xx_rcc.c **** {
1653:lib/src/stm32f4xx_rcc.c ****   uint32_t tmpreg = 0;
1654:lib/src/stm32f4xx_rcc.c ****   
1655:lib/src/stm32f4xx_rcc.c ****   /* Check the parameters */
1656:lib/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_SAIBCLK_SOURCE(RCC_SAIBlockBCLKSource));
1657:lib/src/stm32f4xx_rcc.c ****   
1658:lib/src/stm32f4xx_rcc.c ****   tmpreg = RCC->DCKCFGR;
1659:lib/src/stm32f4xx_rcc.c **** 
1660:lib/src/stm32f4xx_rcc.c ****   /* Clear RCC_DCKCFGR_SAI1ASRC[1:0] bits */
1661:lib/src/stm32f4xx_rcc.c ****   tmpreg &= ~RCC_DCKCFGR_SAI1BSRC;
1662:lib/src/stm32f4xx_rcc.c **** 
1663:lib/src/stm32f4xx_rcc.c ****   /* Set SAI Block B source selection value */
1664:lib/src/stm32f4xx_rcc.c ****   tmpreg |= RCC_SAIBlockBCLKSource;
1665:lib/src/stm32f4xx_rcc.c **** 
1666:lib/src/stm32f4xx_rcc.c ****   /* Store the new value */
1667:lib/src/stm32f4xx_rcc.c ****   RCC->DCKCFGR = tmpreg;
1668:lib/src/stm32f4xx_rcc.c **** }
1669:lib/src/stm32f4xx_rcc.c **** #endif /* STM32F413_423xx */
1670:lib/src/stm32f4xx_rcc.c **** #endif /* STM32F412xG || STM32F413_423xx || STM32F446xx */
1671:lib/src/stm32f4xx_rcc.c **** 
1672:lib/src/stm32f4xx_rcc.c **** #if defined(STM32F410xx)
1673:lib/src/stm32f4xx_rcc.c **** /**
1674:lib/src/stm32f4xx_rcc.c ****   * @brief  Configures the I2S clock source (I2SCLK).
1675:lib/src/stm32f4xx_rcc.c ****   * @note   This function must be called before enabling the I2S clock.
1676:lib/src/stm32f4xx_rcc.c ****   *
1677:lib/src/stm32f4xx_rcc.c ****   * @param  RCC_I2SCLKSource: specifies the I2S clock source.
1678:lib/src/stm32f4xx_rcc.c ****   *         This parameter can be one of the following values:
1679:lib/src/stm32f4xx_rcc.c ****   *            @arg RCC_I2SAPBCLKSOURCE_PLLR: PLL VCO output clock divided by PLLR.
1680:lib/src/stm32f4xx_rcc.c ****   *            @arg RCC_I2SAPBCLKSOURCE_EXT: External clock mapped on the I2S_CKIN pin.
ARM GAS  C:\Users\rinck\AppData\Local\Temp\ccnBBAPb.s 			page 46


1681:lib/src/stm32f4xx_rcc.c ****   *            @arg RCC_I2SAPBCLKSOURCE_PLLSRC: HSI/HSE depends on PLLSRC.
1682:lib/src/stm32f4xx_rcc.c ****   * @retval None
1683:lib/src/stm32f4xx_rcc.c ****   */
1684:lib/src/stm32f4xx_rcc.c **** void RCC_I2SCLKConfig(uint32_t RCC_I2SCLKSource)
1685:lib/src/stm32f4xx_rcc.c **** {
1686:lib/src/stm32f4xx_rcc.c ****   /* Check the parameters */
1687:lib/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_I2SCLK_SOURCE(RCC_I2SCLKSource));
1688:lib/src/stm32f4xx_rcc.c ****   
1689:lib/src/stm32f4xx_rcc.c ****   /* Clear I2Sx clock source selection bits */
1690:lib/src/stm32f4xx_rcc.c ****   RCC->DCKCFGR &= ~RCC_DCKCFGR_I2SSRC;
1691:lib/src/stm32f4xx_rcc.c ****   /* Set new I2Sx clock source*/
1692:lib/src/stm32f4xx_rcc.c ****   RCC->DCKCFGR |= RCC_I2SCLKSource;
1693:lib/src/stm32f4xx_rcc.c **** }
1694:lib/src/stm32f4xx_rcc.c **** #endif /* STM32F410xx */
1695:lib/src/stm32f4xx_rcc.c **** 
1696:lib/src/stm32f4xx_rcc.c **** #if defined(STM32F40_41xxx) || defined(STM32F427_437xx) || defined(STM32F429_439xx) || defined(STM3
1697:lib/src/stm32f4xx_rcc.c **** /**
1698:lib/src/stm32f4xx_rcc.c ****   * @brief  Configures the I2S clock source (I2SCLK).
1699:lib/src/stm32f4xx_rcc.c ****   * @note   This function must be called before enabling the I2S APB clock.
1700:lib/src/stm32f4xx_rcc.c ****   * @param  RCC_I2SCLKSource: specifies the I2S clock source.
1701:lib/src/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
1702:lib/src/stm32f4xx_rcc.c ****   *            @arg RCC_I2S2CLKSource_PLLI2S: PLLI2S clock used as I2S clock source
1703:lib/src/stm32f4xx_rcc.c ****   *            @arg RCC_I2S2CLKSource_Ext: External clock mapped on the I2S_CKIN pin
1704:lib/src/stm32f4xx_rcc.c ****   *                                        used as I2S clock source
1705:lib/src/stm32f4xx_rcc.c ****   * @retval None
1706:lib/src/stm32f4xx_rcc.c ****   */
1707:lib/src/stm32f4xx_rcc.c **** void RCC_I2SCLKConfig(uint32_t RCC_I2SCLKSource)
1708:lib/src/stm32f4xx_rcc.c **** {
 935              		.loc 1 1708 0
 936              		.cfi_startproc
 937              		@ args = 0, pretend = 0, frame = 0
 938              		@ frame_needed = 0, uses_anonymous_args = 0
 939              		@ link register save eliminated.
 940              	.LVL93:
1709:lib/src/stm32f4xx_rcc.c ****   /* Check the parameters */
1710:lib/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_I2SCLK_SOURCE(RCC_I2SCLKSource));
1711:lib/src/stm32f4xx_rcc.c **** 
1712:lib/src/stm32f4xx_rcc.c ****   *(__IO uint32_t *) CFGR_I2SSRC_BB = RCC_I2SCLKSource;  
 941              		.loc 1 1712 0
 942 0000 014B     		ldr	r3, .L87
 943 0002 1860     		str	r0, [r3]
 944 0004 7047     		bx	lr
 945              	.L88:
 946 0006 00BF     		.align	2
 947              	.L87:
 948 0008 5C014742 		.word	1111949660
 949              		.cfi_endproc
 950              	.LFE148:
 952              		.section	.text.RCC_SAIBlockACLKConfig,"ax",%progbits
 953              		.align	2
 954              		.global	RCC_SAIBlockACLKConfig
 955              		.thumb
 956              		.thumb_func
 958              	RCC_SAIBlockACLKConfig:
 959              	.LFB149:
1713:lib/src/stm32f4xx_rcc.c **** }
1714:lib/src/stm32f4xx_rcc.c **** #endif /* STM32F40_41xxx || STM32F427_437xx || STM32F429_439xx || STM32F401xx || STM32F411xE || STM
ARM GAS  C:\Users\rinck\AppData\Local\Temp\ccnBBAPb.s 			page 47


1715:lib/src/stm32f4xx_rcc.c **** 
1716:lib/src/stm32f4xx_rcc.c **** #if defined(STM32F40_41xxx) || defined(STM32F427_437xx) || defined(STM32F429_439xx) || defined(STM3
1717:lib/src/stm32f4xx_rcc.c **** /**
1718:lib/src/stm32f4xx_rcc.c ****   * @brief  Configures SAI1BlockA clock source selection.
1719:lib/src/stm32f4xx_rcc.c ****   * 
1720:lib/src/stm32f4xx_rcc.c ****   * @note   This function can be used only for STM32F42xxx/43xxx/469xx/479xx devices.
1721:lib/src/stm32f4xx_rcc.c ****   *       
1722:lib/src/stm32f4xx_rcc.c ****   * @note   This function must be called before enabling PLLSAI, PLLI2S and  
1723:lib/src/stm32f4xx_rcc.c ****   *         the SAI clock.
1724:lib/src/stm32f4xx_rcc.c ****   * @param  RCC_SAIBlockACLKSource: specifies the SAI Block A clock source.
1725:lib/src/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
1726:lib/src/stm32f4xx_rcc.c ****   *            @arg RCC_SAIACLKSource_PLLI2S: PLLI2S_Q clock divided by PLLI2SDIVQ used 
1727:lib/src/stm32f4xx_rcc.c ****   *                                           as SAI1 Block A clock 
1728:lib/src/stm32f4xx_rcc.c ****   *            @arg RCC_SAIACLKSource_PLLSAI: PLLISAI_Q clock divided by PLLSAIDIVQ used 
1729:lib/src/stm32f4xx_rcc.c ****   *                                           as SAI1 Block A clock 
1730:lib/src/stm32f4xx_rcc.c ****   *            @arg RCC_SAIACLKSource_Ext: External clock mapped on the I2S_CKIN pin
1731:lib/src/stm32f4xx_rcc.c ****   *                                        used as SAI1 Block A clock
1732:lib/src/stm32f4xx_rcc.c ****   * @retval None
1733:lib/src/stm32f4xx_rcc.c ****   */
1734:lib/src/stm32f4xx_rcc.c **** void RCC_SAIBlockACLKConfig(uint32_t RCC_SAIBlockACLKSource)
1735:lib/src/stm32f4xx_rcc.c **** {
 960              		.loc 1 1735 0
 961              		.cfi_startproc
 962              		@ args = 0, pretend = 0, frame = 0
 963              		@ frame_needed = 0, uses_anonymous_args = 0
 964              		@ link register save eliminated.
 965              	.LVL94:
1736:lib/src/stm32f4xx_rcc.c ****   uint32_t tmpreg = 0;
1737:lib/src/stm32f4xx_rcc.c ****   
1738:lib/src/stm32f4xx_rcc.c ****   /* Check the parameters */
1739:lib/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_SAIACLK_SOURCE(RCC_SAIBlockACLKSource));
1740:lib/src/stm32f4xx_rcc.c ****   
1741:lib/src/stm32f4xx_rcc.c ****   tmpreg = RCC->DCKCFGR;
 966              		.loc 1 1741 0
 967 0000 044A     		ldr	r2, .L90
 968 0002 D2F88C30 		ldr	r3, [r2, #140]
 969              	.LVL95:
1742:lib/src/stm32f4xx_rcc.c **** 
1743:lib/src/stm32f4xx_rcc.c ****   /* Clear RCC_DCKCFGR_SAI1ASRC[1:0] bits */
1744:lib/src/stm32f4xx_rcc.c ****   tmpreg &= ~RCC_DCKCFGR_SAI1ASRC;
 970              		.loc 1 1744 0
 971 0006 23F44013 		bic	r3, r3, #3145728
 972              	.LVL96:
1745:lib/src/stm32f4xx_rcc.c **** 
1746:lib/src/stm32f4xx_rcc.c ****   /* Set SAI Block A source selection value */
1747:lib/src/stm32f4xx_rcc.c ****   tmpreg |= RCC_SAIBlockACLKSource;
 973              		.loc 1 1747 0
 974 000a 1843     		orrs	r0, r0, r3
 975              	.LVL97:
1748:lib/src/stm32f4xx_rcc.c **** 
1749:lib/src/stm32f4xx_rcc.c ****   /* Store the new value */
1750:lib/src/stm32f4xx_rcc.c ****   RCC->DCKCFGR = tmpreg;
 976              		.loc 1 1750 0
 977 000c C2F88C00 		str	r0, [r2, #140]
 978 0010 7047     		bx	lr
 979              	.L91:
 980 0012 00BF     		.align	2
ARM GAS  C:\Users\rinck\AppData\Local\Temp\ccnBBAPb.s 			page 48


 981              	.L90:
 982 0014 00380240 		.word	1073887232
 983              		.cfi_endproc
 984              	.LFE149:
 986              		.section	.text.RCC_SAIBlockBCLKConfig,"ax",%progbits
 987              		.align	2
 988              		.global	RCC_SAIBlockBCLKConfig
 989              		.thumb
 990              		.thumb_func
 992              	RCC_SAIBlockBCLKConfig:
 993              	.LFB150:
1751:lib/src/stm32f4xx_rcc.c **** }
1752:lib/src/stm32f4xx_rcc.c **** 
1753:lib/src/stm32f4xx_rcc.c **** /**
1754:lib/src/stm32f4xx_rcc.c ****   * @brief  Configures SAI1BlockB clock source selection.
1755:lib/src/stm32f4xx_rcc.c ****   * 
1756:lib/src/stm32f4xx_rcc.c ****   * @note   This function can be used only for STM32F42xxx/43xxx/469xx/479xx devices.
1757:lib/src/stm32f4xx_rcc.c ****   *       
1758:lib/src/stm32f4xx_rcc.c ****   * @note   This function must be called before enabling PLLSAI, PLLI2S and  
1759:lib/src/stm32f4xx_rcc.c ****   *         the SAI clock.
1760:lib/src/stm32f4xx_rcc.c ****   * @param  RCC_SAIBlockBCLKSource: specifies the SAI Block B clock source.
1761:lib/src/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
1762:lib/src/stm32f4xx_rcc.c ****   *            @arg RCC_SAIBCLKSource_PLLI2S: PLLI2S_Q clock divided by PLLI2SDIVQ used 
1763:lib/src/stm32f4xx_rcc.c ****   *                                           as SAI1 Block B clock 
1764:lib/src/stm32f4xx_rcc.c ****   *            @arg RCC_SAIBCLKSource_PLLSAI: PLLISAI_Q clock divided by PLLSAIDIVQ used 
1765:lib/src/stm32f4xx_rcc.c ****   *                                           as SAI1 Block B clock 
1766:lib/src/stm32f4xx_rcc.c ****   *            @arg RCC_SAIBCLKSource_Ext: External clock mapped on the I2S_CKIN pin
1767:lib/src/stm32f4xx_rcc.c ****   *                                        used as SAI1 Block B clock
1768:lib/src/stm32f4xx_rcc.c ****   * @retval None
1769:lib/src/stm32f4xx_rcc.c ****   */
1770:lib/src/stm32f4xx_rcc.c **** void RCC_SAIBlockBCLKConfig(uint32_t RCC_SAIBlockBCLKSource)
1771:lib/src/stm32f4xx_rcc.c **** {
 994              		.loc 1 1771 0
 995              		.cfi_startproc
 996              		@ args = 0, pretend = 0, frame = 0
 997              		@ frame_needed = 0, uses_anonymous_args = 0
 998              		@ link register save eliminated.
 999              	.LVL98:
1772:lib/src/stm32f4xx_rcc.c ****   uint32_t tmpreg = 0;
1773:lib/src/stm32f4xx_rcc.c ****   
1774:lib/src/stm32f4xx_rcc.c ****   /* Check the parameters */
1775:lib/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_SAIBCLK_SOURCE(RCC_SAIBlockBCLKSource));
1776:lib/src/stm32f4xx_rcc.c ****   
1777:lib/src/stm32f4xx_rcc.c ****   tmpreg = RCC->DCKCFGR;
 1000              		.loc 1 1777 0
 1001 0000 044A     		ldr	r2, .L93
 1002 0002 D2F88C30 		ldr	r3, [r2, #140]
 1003              	.LVL99:
1778:lib/src/stm32f4xx_rcc.c **** 
1779:lib/src/stm32f4xx_rcc.c ****   /* Clear RCC_DCKCFGR_SAI1BSRC[1:0] bits */
1780:lib/src/stm32f4xx_rcc.c ****   tmpreg &= ~RCC_DCKCFGR_SAI1BSRC;
 1004              		.loc 1 1780 0
 1005 0006 23F44003 		bic	r3, r3, #12582912
 1006              	.LVL100:
1781:lib/src/stm32f4xx_rcc.c **** 
1782:lib/src/stm32f4xx_rcc.c ****   /* Set SAI Block B source selection value */
1783:lib/src/stm32f4xx_rcc.c ****   tmpreg |= RCC_SAIBlockBCLKSource;
ARM GAS  C:\Users\rinck\AppData\Local\Temp\ccnBBAPb.s 			page 49


 1007              		.loc 1 1783 0
 1008 000a 1843     		orrs	r0, r0, r3
 1009              	.LVL101:
1784:lib/src/stm32f4xx_rcc.c **** 
1785:lib/src/stm32f4xx_rcc.c ****   /* Store the new value */
1786:lib/src/stm32f4xx_rcc.c ****   RCC->DCKCFGR = tmpreg;
 1010              		.loc 1 1786 0
 1011 000c C2F88C00 		str	r0, [r2, #140]
 1012 0010 7047     		bx	lr
 1013              	.L94:
 1014 0012 00BF     		.align	2
 1015              	.L93:
 1016 0014 00380240 		.word	1073887232
 1017              		.cfi_endproc
 1018              	.LFE150:
 1020              		.section	.text.RCC_SAIPLLI2SClkDivConfig,"ax",%progbits
 1021              		.align	2
 1022              		.global	RCC_SAIPLLI2SClkDivConfig
 1023              		.thumb
 1024              		.thumb_func
 1026              	RCC_SAIPLLI2SClkDivConfig:
 1027              	.LFB151:
1787:lib/src/stm32f4xx_rcc.c **** }
1788:lib/src/stm32f4xx_rcc.c **** #endif /* STM32F40_41xxx || STM32F427_437xx || STM32F429_439xx || STM32F469_479xx */
1789:lib/src/stm32f4xx_rcc.c **** 
1790:lib/src/stm32f4xx_rcc.c **** /**
1791:lib/src/stm32f4xx_rcc.c ****   * @brief  Configures the SAI clock Divider coming from PLLI2S.
1792:lib/src/stm32f4xx_rcc.c ****   * 
1793:lib/src/stm32f4xx_rcc.c ****   * @note   This function can be used only for STM32F42xxx/43xxx/446xx/469xx/479xx devices.
1794:lib/src/stm32f4xx_rcc.c ****   *   
1795:lib/src/stm32f4xx_rcc.c ****   * @note   This function must be called before enabling the PLLI2S.
1796:lib/src/stm32f4xx_rcc.c ****   *              
1797:lib/src/stm32f4xx_rcc.c ****   * @param  RCC_PLLI2SDivQ: specifies the PLLI2S division factor for SAI1 clock .
1798:lib/src/stm32f4xx_rcc.c ****   *          This parameter must be a number between 1 and 32.
1799:lib/src/stm32f4xx_rcc.c ****   *          SAI1 clock frequency = f(PLLI2S_Q) / RCC_PLLI2SDivQ 
1800:lib/src/stm32f4xx_rcc.c ****   *              
1801:lib/src/stm32f4xx_rcc.c ****   * @retval None
1802:lib/src/stm32f4xx_rcc.c ****   */
1803:lib/src/stm32f4xx_rcc.c **** void RCC_SAIPLLI2SClkDivConfig(uint32_t RCC_PLLI2SDivQ)  
1804:lib/src/stm32f4xx_rcc.c **** {
 1028              		.loc 1 1804 0
 1029              		.cfi_startproc
 1030              		@ args = 0, pretend = 0, frame = 0
 1031              		@ frame_needed = 0, uses_anonymous_args = 0
 1032              		@ link register save eliminated.
 1033              	.LVL102:
1805:lib/src/stm32f4xx_rcc.c ****   uint32_t tmpreg = 0;
1806:lib/src/stm32f4xx_rcc.c ****   
1807:lib/src/stm32f4xx_rcc.c ****   /* Check the parameters */
1808:lib/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(RCC_PLLI2SDivQ));
1809:lib/src/stm32f4xx_rcc.c ****   
1810:lib/src/stm32f4xx_rcc.c ****   tmpreg = RCC->DCKCFGR;
 1034              		.loc 1 1810 0
 1035 0000 044A     		ldr	r2, .L96
 1036 0002 D2F88C30 		ldr	r3, [r2, #140]
 1037              	.LVL103:
1811:lib/src/stm32f4xx_rcc.c **** 
ARM GAS  C:\Users\rinck\AppData\Local\Temp\ccnBBAPb.s 			page 50


1812:lib/src/stm32f4xx_rcc.c ****   /* Clear PLLI2SDIVQ[4:0] bits */
1813:lib/src/stm32f4xx_rcc.c ****   tmpreg &= ~(RCC_DCKCFGR_PLLI2SDIVQ);
 1038              		.loc 1 1813 0
 1039 0006 23F01F03 		bic	r3, r3, #31
 1040              	.LVL104:
1814:lib/src/stm32f4xx_rcc.c **** 
1815:lib/src/stm32f4xx_rcc.c ****   /* Set PLLI2SDIVQ values */
1816:lib/src/stm32f4xx_rcc.c ****   tmpreg |= (RCC_PLLI2SDivQ - 1);
 1041              		.loc 1 1816 0
 1042 000a 0138     		subs	r0, r0, #1
 1043              	.LVL105:
 1044 000c 1843     		orrs	r0, r0, r3
 1045              	.LVL106:
1817:lib/src/stm32f4xx_rcc.c **** 
1818:lib/src/stm32f4xx_rcc.c ****   /* Store the new value */
1819:lib/src/stm32f4xx_rcc.c ****   RCC->DCKCFGR = tmpreg;
 1046              		.loc 1 1819 0
 1047 000e C2F88C00 		str	r0, [r2, #140]
 1048 0012 7047     		bx	lr
 1049              	.L97:
 1050              		.align	2
 1051              	.L96:
 1052 0014 00380240 		.word	1073887232
 1053              		.cfi_endproc
 1054              	.LFE151:
 1056              		.section	.text.RCC_SAIPLLSAIClkDivConfig,"ax",%progbits
 1057              		.align	2
 1058              		.global	RCC_SAIPLLSAIClkDivConfig
 1059              		.thumb
 1060              		.thumb_func
 1062              	RCC_SAIPLLSAIClkDivConfig:
 1063              	.LFB152:
1820:lib/src/stm32f4xx_rcc.c **** }
1821:lib/src/stm32f4xx_rcc.c **** 
1822:lib/src/stm32f4xx_rcc.c **** /**
1823:lib/src/stm32f4xx_rcc.c ****   * @brief  Configures the SAI clock Divider coming from PLLSAI.
1824:lib/src/stm32f4xx_rcc.c ****   * 
1825:lib/src/stm32f4xx_rcc.c ****   * @note   This function can be used only for STM32F42xxx/43xxx/446xx/469xx/479xx devices.
1826:lib/src/stm32f4xx_rcc.c ****   *        
1827:lib/src/stm32f4xx_rcc.c ****   * @note   This function must be called before enabling the PLLSAI.
1828:lib/src/stm32f4xx_rcc.c ****   *   
1829:lib/src/stm32f4xx_rcc.c ****   * @param  RCC_PLLSAIDivQ: specifies the PLLSAI division factor for SAI1 clock .
1830:lib/src/stm32f4xx_rcc.c ****   *          This parameter must be a number between 1 and 32.
1831:lib/src/stm32f4xx_rcc.c ****   *          SAI1 clock frequency = f(PLLSAI_Q) / RCC_PLLSAIDivQ  
1832:lib/src/stm32f4xx_rcc.c ****   *              
1833:lib/src/stm32f4xx_rcc.c ****   * @retval None
1834:lib/src/stm32f4xx_rcc.c ****   */
1835:lib/src/stm32f4xx_rcc.c **** void RCC_SAIPLLSAIClkDivConfig(uint32_t RCC_PLLSAIDivQ)  
1836:lib/src/stm32f4xx_rcc.c **** {
 1064              		.loc 1 1836 0
 1065              		.cfi_startproc
 1066              		@ args = 0, pretend = 0, frame = 0
 1067              		@ frame_needed = 0, uses_anonymous_args = 0
 1068              		@ link register save eliminated.
 1069              	.LVL107:
1837:lib/src/stm32f4xx_rcc.c ****   uint32_t tmpreg = 0;
1838:lib/src/stm32f4xx_rcc.c ****   
ARM GAS  C:\Users\rinck\AppData\Local\Temp\ccnBBAPb.s 			page 51


1839:lib/src/stm32f4xx_rcc.c ****   /* Check the parameters */
1840:lib/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(RCC_PLLSAIDivQ));
1841:lib/src/stm32f4xx_rcc.c ****   
1842:lib/src/stm32f4xx_rcc.c ****   tmpreg = RCC->DCKCFGR;
 1070              		.loc 1 1842 0
 1071 0000 054A     		ldr	r2, .L99
 1072 0002 D2F88C30 		ldr	r3, [r2, #140]
 1073              	.LVL108:
1843:lib/src/stm32f4xx_rcc.c **** 
1844:lib/src/stm32f4xx_rcc.c ****   /* Clear PLLI2SDIVQ[4:0] and PLLSAIDIVQ[4:0] bits */
1845:lib/src/stm32f4xx_rcc.c ****   tmpreg &= ~(RCC_DCKCFGR_PLLSAIDIVQ);
 1074              		.loc 1 1845 0
 1075 0006 23F4F853 		bic	r3, r3, #7936
 1076              	.LVL109:
1846:lib/src/stm32f4xx_rcc.c **** 
1847:lib/src/stm32f4xx_rcc.c ****   /* Set PLLSAIDIVQ values */
1848:lib/src/stm32f4xx_rcc.c ****   tmpreg |= ((RCC_PLLSAIDivQ - 1) << 8);
 1077              		.loc 1 1848 0
 1078 000a 0138     		subs	r0, r0, #1
 1079              	.LVL110:
 1080 000c 43EA0023 		orr	r3, r3, r0, lsl #8
 1081              	.LVL111:
1849:lib/src/stm32f4xx_rcc.c **** 
1850:lib/src/stm32f4xx_rcc.c ****   /* Store the new value */
1851:lib/src/stm32f4xx_rcc.c ****   RCC->DCKCFGR = tmpreg;
 1082              		.loc 1 1851 0
 1083 0010 C2F88C30 		str	r3, [r2, #140]
 1084 0014 7047     		bx	lr
 1085              	.L100:
 1086 0016 00BF     		.align	2
 1087              	.L99:
 1088 0018 00380240 		.word	1073887232
 1089              		.cfi_endproc
 1090              	.LFE152:
 1092              		.section	.text.RCC_LTDCCLKDivConfig,"ax",%progbits
 1093              		.align	2
 1094              		.global	RCC_LTDCCLKDivConfig
 1095              		.thumb
 1096              		.thumb_func
 1098              	RCC_LTDCCLKDivConfig:
 1099              	.LFB153:
1852:lib/src/stm32f4xx_rcc.c **** }
1853:lib/src/stm32f4xx_rcc.c **** 
1854:lib/src/stm32f4xx_rcc.c **** #if defined(STM32F413_423xx)
1855:lib/src/stm32f4xx_rcc.c **** /**
1856:lib/src/stm32f4xx_rcc.c ****   * @brief  Configures the SAI clock Divider coming from PLLI2S.
1857:lib/src/stm32f4xx_rcc.c ****   * 
1858:lib/src/stm32f4xx_rcc.c ****   * @note   This function can be used only for STM32F413_423xx
1859:lib/src/stm32f4xx_rcc.c ****   *   
1860:lib/src/stm32f4xx_rcc.c ****   * @param   RCC_PLLI2SDivR: specifies the PLLI2S division factor for SAI1 clock.
1861:lib/src/stm32f4xx_rcc.c ****   *          This parameter must be a number between 1 and 32.
1862:lib/src/stm32f4xx_rcc.c ****   *          SAI1 clock frequency = f(PLLI2SR) / RCC_PLLI2SDivR 
1863:lib/src/stm32f4xx_rcc.c ****   * @retval None
1864:lib/src/stm32f4xx_rcc.c ****   */
1865:lib/src/stm32f4xx_rcc.c **** void RCC_SAIPLLI2SRClkDivConfig(uint32_t RCC_PLLI2SDivR)  
1866:lib/src/stm32f4xx_rcc.c **** {
1867:lib/src/stm32f4xx_rcc.c ****   uint32_t tmpreg = 0;
ARM GAS  C:\Users\rinck\AppData\Local\Temp\ccnBBAPb.s 			page 52


1868:lib/src/stm32f4xx_rcc.c ****   
1869:lib/src/stm32f4xx_rcc.c ****   /* Check the parameters */
1870:lib/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLLI2S_DIVR_VALUE(RCC_PLLI2SDivR));
1871:lib/src/stm32f4xx_rcc.c ****   
1872:lib/src/stm32f4xx_rcc.c ****   tmpreg = RCC->DCKCFGR;
1873:lib/src/stm32f4xx_rcc.c **** 
1874:lib/src/stm32f4xx_rcc.c ****   /* Clear PLLI2SDIVR[4:0] bits */
1875:lib/src/stm32f4xx_rcc.c ****   tmpreg &= ~(RCC_DCKCFGR_PLLI2SDIVR);
1876:lib/src/stm32f4xx_rcc.c **** 
1877:lib/src/stm32f4xx_rcc.c ****   /* Set PLLI2SDIVR values */
1878:lib/src/stm32f4xx_rcc.c ****   tmpreg |= (RCC_PLLI2SDivR-1);
1879:lib/src/stm32f4xx_rcc.c **** 
1880:lib/src/stm32f4xx_rcc.c ****   /* Store the new value */
1881:lib/src/stm32f4xx_rcc.c ****   RCC->DCKCFGR = tmpreg;
1882:lib/src/stm32f4xx_rcc.c **** }
1883:lib/src/stm32f4xx_rcc.c **** 
1884:lib/src/stm32f4xx_rcc.c **** /**
1885:lib/src/stm32f4xx_rcc.c ****   * @brief  Configures the SAI clock Divider coming from PLL.
1886:lib/src/stm32f4xx_rcc.c ****   * 
1887:lib/src/stm32f4xx_rcc.c ****   * @note   This function can be used only for STM32F413_423xx
1888:lib/src/stm32f4xx_rcc.c ****   *        
1889:lib/src/stm32f4xx_rcc.c ****   * @note   This function must be called before enabling the PLLSAI.
1890:lib/src/stm32f4xx_rcc.c ****   *   
1891:lib/src/stm32f4xx_rcc.c ****   * @param  RCC_PLLDivR: specifies the PLL division factor for SAI1 clock.
1892:lib/src/stm32f4xx_rcc.c ****   *          This parameter must be a number between 1 and 32.
1893:lib/src/stm32f4xx_rcc.c ****   *          SAI1 clock frequency = f(PLLR) / RCC_PLLDivR 
1894:lib/src/stm32f4xx_rcc.c ****   *              
1895:lib/src/stm32f4xx_rcc.c ****   * @retval None
1896:lib/src/stm32f4xx_rcc.c ****   */
1897:lib/src/stm32f4xx_rcc.c **** void RCC_SAIPLLRClkDivConfig(uint32_t RCC_PLLDivR)  
1898:lib/src/stm32f4xx_rcc.c **** {
1899:lib/src/stm32f4xx_rcc.c ****   uint32_t tmpreg = 0;
1900:lib/src/stm32f4xx_rcc.c ****   
1901:lib/src/stm32f4xx_rcc.c ****   /* Check the parameters */
1902:lib/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLL_DIVR_VALUE(RCC_PLLDivR));
1903:lib/src/stm32f4xx_rcc.c ****   
1904:lib/src/stm32f4xx_rcc.c ****   tmpreg = RCC->DCKCFGR;
1905:lib/src/stm32f4xx_rcc.c **** 
1906:lib/src/stm32f4xx_rcc.c ****   /* Clear PLLDIVR[12:8] */
1907:lib/src/stm32f4xx_rcc.c ****   tmpreg &= ~(RCC_DCKCFGR_PLLDIVR);
1908:lib/src/stm32f4xx_rcc.c **** 
1909:lib/src/stm32f4xx_rcc.c ****   /* Set PLLDivR values */
1910:lib/src/stm32f4xx_rcc.c ****   tmpreg |= ((RCC_PLLDivR - 1 ) << 8);
1911:lib/src/stm32f4xx_rcc.c **** 
1912:lib/src/stm32f4xx_rcc.c ****   /* Store the new value */
1913:lib/src/stm32f4xx_rcc.c ****   RCC->DCKCFGR = tmpreg;
1914:lib/src/stm32f4xx_rcc.c **** }
1915:lib/src/stm32f4xx_rcc.c **** #endif /* STM32F413_423xx */
1916:lib/src/stm32f4xx_rcc.c **** 
1917:lib/src/stm32f4xx_rcc.c **** /**
1918:lib/src/stm32f4xx_rcc.c ****   * @brief  Configures the LTDC clock Divider coming from PLLSAI.
1919:lib/src/stm32f4xx_rcc.c ****   * 
1920:lib/src/stm32f4xx_rcc.c ****   * @note   The LTDC peripheral is only available with STM32F42xxx/43xxx/446xx/469xx/479xx Devices.
1921:lib/src/stm32f4xx_rcc.c ****   *      
1922:lib/src/stm32f4xx_rcc.c ****   * @note   This function must be called before enabling the PLLSAI.
1923:lib/src/stm32f4xx_rcc.c ****   *   
1924:lib/src/stm32f4xx_rcc.c ****   * @param  RCC_PLLSAIDivR: specifies the PLLSAI division factor for LTDC clock .
ARM GAS  C:\Users\rinck\AppData\Local\Temp\ccnBBAPb.s 			page 53


1925:lib/src/stm32f4xx_rcc.c ****   *          LTDC clock frequency = f(PLLSAI_R) / RCC_PLLSAIDivR  
1926:lib/src/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
1927:lib/src/stm32f4xx_rcc.c ****   *            @arg RCC_PLLSAIDivR_Div2: LTDC clock = f(PLLSAI_R)/2
1928:lib/src/stm32f4xx_rcc.c ****   *            @arg RCC_PLLSAIDivR_Div4: LTDC clock = f(PLLSAI_R)/4
1929:lib/src/stm32f4xx_rcc.c ****   *            @arg RCC_PLLSAIDivR_Div8: LTDC clock = f(PLLSAI_R)/8
1930:lib/src/stm32f4xx_rcc.c ****   *            @arg RCC_PLLSAIDivR_Div16: LTDC clock = f(PLLSAI_R)/16
1931:lib/src/stm32f4xx_rcc.c ****   *            
1932:lib/src/stm32f4xx_rcc.c ****   * @retval None
1933:lib/src/stm32f4xx_rcc.c ****   */
1934:lib/src/stm32f4xx_rcc.c **** void RCC_LTDCCLKDivConfig(uint32_t RCC_PLLSAIDivR)
1935:lib/src/stm32f4xx_rcc.c **** {
 1100              		.loc 1 1935 0
 1101              		.cfi_startproc
 1102              		@ args = 0, pretend = 0, frame = 0
 1103              		@ frame_needed = 0, uses_anonymous_args = 0
 1104              		@ link register save eliminated.
 1105              	.LVL112:
1936:lib/src/stm32f4xx_rcc.c ****   uint32_t tmpreg = 0;
1937:lib/src/stm32f4xx_rcc.c ****   
1938:lib/src/stm32f4xx_rcc.c ****   /* Check the parameters */
1939:lib/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLLSAI_DIVR_VALUE(RCC_PLLSAIDivR));
1940:lib/src/stm32f4xx_rcc.c ****   
1941:lib/src/stm32f4xx_rcc.c ****   tmpreg = RCC->DCKCFGR;
 1106              		.loc 1 1941 0
 1107 0000 044A     		ldr	r2, .L102
 1108 0002 D2F88C30 		ldr	r3, [r2, #140]
 1109              	.LVL113:
1942:lib/src/stm32f4xx_rcc.c **** 
1943:lib/src/stm32f4xx_rcc.c ****   /* Clear PLLSAIDIVR[2:0] bits */
1944:lib/src/stm32f4xx_rcc.c ****   tmpreg &= ~RCC_DCKCFGR_PLLSAIDIVR;
 1110              		.loc 1 1944 0
 1111 0006 23F44033 		bic	r3, r3, #196608
 1112              	.LVL114:
1945:lib/src/stm32f4xx_rcc.c **** 
1946:lib/src/stm32f4xx_rcc.c ****   /* Set PLLSAIDIVR values */
1947:lib/src/stm32f4xx_rcc.c ****   tmpreg |= RCC_PLLSAIDivR;
 1113              		.loc 1 1947 0
 1114 000a 1843     		orrs	r0, r0, r3
 1115              	.LVL115:
1948:lib/src/stm32f4xx_rcc.c **** 
1949:lib/src/stm32f4xx_rcc.c ****   /* Store the new value */
1950:lib/src/stm32f4xx_rcc.c ****   RCC->DCKCFGR = tmpreg;
 1116              		.loc 1 1950 0
 1117 000c C2F88C00 		str	r0, [r2, #140]
 1118 0010 7047     		bx	lr
 1119              	.L103:
 1120 0012 00BF     		.align	2
 1121              	.L102:
 1122 0014 00380240 		.word	1073887232
 1123              		.cfi_endproc
 1124              	.LFE153:
 1126              		.section	.text.RCC_TIMCLKPresConfig,"ax",%progbits
 1127              		.align	2
 1128              		.global	RCC_TIMCLKPresConfig
 1129              		.thumb
 1130              		.thumb_func
 1132              	RCC_TIMCLKPresConfig:
ARM GAS  C:\Users\rinck\AppData\Local\Temp\ccnBBAPb.s 			page 54


 1133              	.LFB154:
1951:lib/src/stm32f4xx_rcc.c **** }
1952:lib/src/stm32f4xx_rcc.c **** 
1953:lib/src/stm32f4xx_rcc.c **** #if defined(STM32F412xG) || defined(STM32F413_423xx)
1954:lib/src/stm32f4xx_rcc.c **** /**
1955:lib/src/stm32f4xx_rcc.c ****   * @brief  Configures the DFSDM clock source (DFSDMCLK).
1956:lib/src/stm32f4xx_rcc.c ****   * @note   This function must be called before enabling the DFSDM APB clock.
1957:lib/src/stm32f4xx_rcc.c ****   * @param  RCC_DFSDMCLKSource: specifies the DFSDM clock source.
1958:lib/src/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
1959:lib/src/stm32f4xx_rcc.c ****   *            @arg RCC_DFSDMCLKSource_APB: APB clock used as DFSDM clock source.
1960:lib/src/stm32f4xx_rcc.c ****   *            @arg RCC_DFSDMCLKSource_SYS: System clock used as DFSDM clock source.
1961:lib/src/stm32f4xx_rcc.c ****   *                                        
1962:lib/src/stm32f4xx_rcc.c ****   * @retval None
1963:lib/src/stm32f4xx_rcc.c ****   */
1964:lib/src/stm32f4xx_rcc.c **** void RCC_DFSDM1CLKConfig(uint32_t RCC_DFSDMCLKSource)
1965:lib/src/stm32f4xx_rcc.c **** {
1966:lib/src/stm32f4xx_rcc.c ****   uint32_t tmpreg = 0;
1967:lib/src/stm32f4xx_rcc.c ****   
1968:lib/src/stm32f4xx_rcc.c ****   /* Check the parameters */
1969:lib/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_DFSDM1CLK_SOURCE(RCC_DFSDMCLKSource));
1970:lib/src/stm32f4xx_rcc.c ****   
1971:lib/src/stm32f4xx_rcc.c ****   tmpreg = RCC->DCKCFGR;
1972:lib/src/stm32f4xx_rcc.c **** 
1973:lib/src/stm32f4xx_rcc.c ****   /* Clear CKDFSDM-SEL  bit */
1974:lib/src/stm32f4xx_rcc.c ****   tmpreg &= ~RCC_DCKCFGR_CKDFSDM1SEL;
1975:lib/src/stm32f4xx_rcc.c **** 
1976:lib/src/stm32f4xx_rcc.c ****   /* Set CKDFSDM-SEL bit according to RCC_DFSDMCLKSource value */
1977:lib/src/stm32f4xx_rcc.c ****   tmpreg |= (RCC_DFSDMCLKSource << 31) ;
1978:lib/src/stm32f4xx_rcc.c **** 
1979:lib/src/stm32f4xx_rcc.c ****   /* Store the new value */
1980:lib/src/stm32f4xx_rcc.c ****   RCC->DCKCFGR = tmpreg;
1981:lib/src/stm32f4xx_rcc.c **** }
1982:lib/src/stm32f4xx_rcc.c **** 
1983:lib/src/stm32f4xx_rcc.c **** /**
1984:lib/src/stm32f4xx_rcc.c ****   * @brief  Configures the DFSDM Audio clock source (DFSDMACLK).
1985:lib/src/stm32f4xx_rcc.c ****   * @note   This function must be called before enabling the DFSDM APB clock.
1986:lib/src/stm32f4xx_rcc.c ****   * @param  RCC_DFSDM1ACLKSource: specifies the DFSDM clock source.
1987:lib/src/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
1988:lib/src/stm32f4xx_rcc.c ****   *            @arg RCC_DFSDM1AUDIOCLKSOURCE_I2SAPB1: APB clock used as DFSDM clock source.
1989:lib/src/stm32f4xx_rcc.c ****   *            @arg RCC_DFSDM1AUDIOCLKSOURCE_I2SAPB2: System clock used as DFSDM clock source.
1990:lib/src/stm32f4xx_rcc.c ****   *                                        
1991:lib/src/stm32f4xx_rcc.c ****   * @retval None
1992:lib/src/stm32f4xx_rcc.c ****   */
1993:lib/src/stm32f4xx_rcc.c **** void RCC_DFSDM1ACLKConfig(uint32_t RCC_DFSDM1ACLKSource)
1994:lib/src/stm32f4xx_rcc.c **** {
1995:lib/src/stm32f4xx_rcc.c ****   uint32_t tmpreg = 0;
1996:lib/src/stm32f4xx_rcc.c ****   
1997:lib/src/stm32f4xx_rcc.c ****   /* Check the parameters */
1998:lib/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_DFSDMACLK_SOURCE(RCC_DFSDM1ACLKSource));
1999:lib/src/stm32f4xx_rcc.c ****   
2000:lib/src/stm32f4xx_rcc.c ****   tmpreg = RCC->DCKCFGR;
2001:lib/src/stm32f4xx_rcc.c **** 
2002:lib/src/stm32f4xx_rcc.c ****   /* Clear CKDFSDMA SEL  bit */
2003:lib/src/stm32f4xx_rcc.c ****   tmpreg &= ~RCC_DCKCFGR_CKDFSDM1ASEL;
2004:lib/src/stm32f4xx_rcc.c **** 
2005:lib/src/stm32f4xx_rcc.c ****   /* Set CKDFSDM-SEL   bt according to RCC_DFSDMCLKSource value */
2006:lib/src/stm32f4xx_rcc.c ****   tmpreg |= RCC_DFSDM1ACLKSource;
ARM GAS  C:\Users\rinck\AppData\Local\Temp\ccnBBAPb.s 			page 55


2007:lib/src/stm32f4xx_rcc.c **** 
2008:lib/src/stm32f4xx_rcc.c ****   /* Store the new value */
2009:lib/src/stm32f4xx_rcc.c ****   RCC->DCKCFGR = tmpreg;
2010:lib/src/stm32f4xx_rcc.c **** }
2011:lib/src/stm32f4xx_rcc.c **** 
2012:lib/src/stm32f4xx_rcc.c **** #if defined(STM32F413_423xx)
2013:lib/src/stm32f4xx_rcc.c **** /**
2014:lib/src/stm32f4xx_rcc.c ****   * @brief  Configures the DFSDM Audio clock source (DFSDMACLK).
2015:lib/src/stm32f4xx_rcc.c ****   * @note   This function must be called before enabling the DFSDM APB clock.
2016:lib/src/stm32f4xx_rcc.c ****   * @param  RCC_DFSDM2ACLKSource: specifies the DFSDM clock source.
2017:lib/src/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
2018:lib/src/stm32f4xx_rcc.c ****   *            @arg RCC_DFSDM2AUDIOCLKSOURCE_I2SAPB1: APB clock used as DFSDM clock source.
2019:lib/src/stm32f4xx_rcc.c ****   *            @arg RCC_DFSDM2AUDIOCLKSOURCE_I2SAPB2: System clock used as DFSDM clock source.
2020:lib/src/stm32f4xx_rcc.c ****   *                                        
2021:lib/src/stm32f4xx_rcc.c ****   * @retval None
2022:lib/src/stm32f4xx_rcc.c ****   */
2023:lib/src/stm32f4xx_rcc.c **** void RCC_DFSDM2ACLKConfig(uint32_t RCC_DFSDMACLKSource)
2024:lib/src/stm32f4xx_rcc.c **** {
2025:lib/src/stm32f4xx_rcc.c ****   uint32_t tmpreg = 0;
2026:lib/src/stm32f4xx_rcc.c ****   
2027:lib/src/stm32f4xx_rcc.c ****   /* Check the parameters */
2028:lib/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_DFSDMCLK_SOURCE(RCC_DFSDMACLKSource));
2029:lib/src/stm32f4xx_rcc.c ****   
2030:lib/src/stm32f4xx_rcc.c ****   tmpreg = RCC->DCKCFGR;
2031:lib/src/stm32f4xx_rcc.c **** 
2032:lib/src/stm32f4xx_rcc.c ****   /* Clear CKDFSDMA SEL  bit */
2033:lib/src/stm32f4xx_rcc.c ****   tmpreg &= ~RCC_DCKCFGR_CKDFSDM1ASEL;
2034:lib/src/stm32f4xx_rcc.c **** 
2035:lib/src/stm32f4xx_rcc.c ****   /* Set CKDFSDM-SEL   bt according to RCC_DFSDMCLKSource value */
2036:lib/src/stm32f4xx_rcc.c ****   tmpreg |= RCC_DFSDMACLKSource;
2037:lib/src/stm32f4xx_rcc.c **** 
2038:lib/src/stm32f4xx_rcc.c ****   /* Store the new value */
2039:lib/src/stm32f4xx_rcc.c ****   RCC->DCKCFGR = tmpreg;
2040:lib/src/stm32f4xx_rcc.c **** }
2041:lib/src/stm32f4xx_rcc.c **** #endif /* STM32F413_423xx */
2042:lib/src/stm32f4xx_rcc.c **** #endif /* STM32F412xG || STM32F413_423xx */
2043:lib/src/stm32f4xx_rcc.c **** 
2044:lib/src/stm32f4xx_rcc.c **** /**
2045:lib/src/stm32f4xx_rcc.c ****   * @brief  Configures the Timers clocks prescalers selection.
2046:lib/src/stm32f4xx_rcc.c ****   * 
2047:lib/src/stm32f4xx_rcc.c ****   * @note   This function can be used only for STM32F42xxx/43xxx and STM32F401xx/411xE devices. 
2048:lib/src/stm32f4xx_rcc.c ****   *   
2049:lib/src/stm32f4xx_rcc.c ****   * @param  RCC_TIMCLKPrescaler : specifies the Timers clocks prescalers selection
2050:lib/src/stm32f4xx_rcc.c ****   *         This parameter can be one of the following values:
2051:lib/src/stm32f4xx_rcc.c ****   *            @arg RCC_TIMPrescDesactivated: The Timers kernels clocks prescaler is 
2052:lib/src/stm32f4xx_rcc.c ****   *                 equal to HPRE if PPREx is corresponding to division by 1 or 2, 
2053:lib/src/stm32f4xx_rcc.c ****   *                 else it is equal to [(HPRE * PPREx) / 2] if PPREx is corresponding to 
2054:lib/src/stm32f4xx_rcc.c ****   *                 division by 4 or more.
2055:lib/src/stm32f4xx_rcc.c ****   *                   
2056:lib/src/stm32f4xx_rcc.c ****   *            @arg RCC_TIMPrescActivated: The Timers kernels clocks prescaler is 
2057:lib/src/stm32f4xx_rcc.c ****   *                 equal to HPRE if PPREx is corresponding to division by 1, 2 or 4, 
2058:lib/src/stm32f4xx_rcc.c ****   *                 else it is equal to [(HPRE * PPREx) / 4] if PPREx is corresponding 
2059:lib/src/stm32f4xx_rcc.c ****   *                 to division by 8 or more.
2060:lib/src/stm32f4xx_rcc.c ****   * @retval None
2061:lib/src/stm32f4xx_rcc.c ****   */
2062:lib/src/stm32f4xx_rcc.c **** void RCC_TIMCLKPresConfig(uint32_t RCC_TIMCLKPrescaler)
2063:lib/src/stm32f4xx_rcc.c **** {
ARM GAS  C:\Users\rinck\AppData\Local\Temp\ccnBBAPb.s 			page 56


 1134              		.loc 1 2063 0
 1135              		.cfi_startproc
 1136              		@ args = 0, pretend = 0, frame = 0
 1137              		@ frame_needed = 0, uses_anonymous_args = 0
 1138              		@ link register save eliminated.
 1139              	.LVL116:
2064:lib/src/stm32f4xx_rcc.c ****   /* Check the parameters */
2065:lib/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_TIMCLK_PRESCALER(RCC_TIMCLKPrescaler));
2066:lib/src/stm32f4xx_rcc.c **** 
2067:lib/src/stm32f4xx_rcc.c ****   *(__IO uint32_t *) DCKCFGR_TIMPRE_BB = RCC_TIMCLKPrescaler;
 1140              		.loc 1 2067 0
 1141 0000 014B     		ldr	r3, .L105
 1142 0002 1860     		str	r0, [r3]
 1143 0004 7047     		bx	lr
 1144              	.L106:
 1145 0006 00BF     		.align	2
 1146              	.L105:
 1147 0008 E0114742 		.word	1111953888
 1148              		.cfi_endproc
 1149              	.LFE154:
 1151              		.section	.text.RCC_AHB1PeriphClockCmd,"ax",%progbits
 1152              		.align	2
 1153              		.global	RCC_AHB1PeriphClockCmd
 1154              		.thumb
 1155              		.thumb_func
 1157              	RCC_AHB1PeriphClockCmd:
 1158              	.LFB155:
2068:lib/src/stm32f4xx_rcc.c **** }
2069:lib/src/stm32f4xx_rcc.c **** 
2070:lib/src/stm32f4xx_rcc.c **** /**
2071:lib/src/stm32f4xx_rcc.c ****   * @brief  Enables or disables the AHB1 peripheral clock.
2072:lib/src/stm32f4xx_rcc.c ****   * @note   After reset, the peripheral clock (used for registers read/write access)
2073:lib/src/stm32f4xx_rcc.c ****   *         is disabled and the application software has to enable this clock before 
2074:lib/src/stm32f4xx_rcc.c ****   *         using it.   
2075:lib/src/stm32f4xx_rcc.c ****   * @param  RCC_AHBPeriph: specifies the AHB1 peripheral to gates its clock.
2076:lib/src/stm32f4xx_rcc.c ****   *          This parameter can be any combination of the following values:
2077:lib/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOA:       GPIOA clock
2078:lib/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOB:       GPIOB clock 
2079:lib/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOC:       GPIOC clock
2080:lib/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOD:       GPIOD clock
2081:lib/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOE:       GPIOE clock
2082:lib/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOF:       GPIOF clock
2083:lib/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOG:       GPIOG clock
2084:lib/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOG:       GPIOG clock
2085:lib/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOI:       GPIOI clock
2086:lib/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOJ:       GPIOJ clock (STM32F42xxx/43xxx devices) 
2087:lib/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOK:       GPIOK clock (STM32F42xxx/43xxx devices)  
2088:lib/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_CRC:         CRC clock
2089:lib/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_BKPSRAM:     BKPSRAM interface clock
2090:lib/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_CCMDATARAMEN CCM data RAM interface clock
2091:lib/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_DMA1:        DMA1 clock
2092:lib/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_DMA2:        DMA2 clock
2093:lib/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_DMA2D:       DMA2D clock (STM32F429xx/439xx devices)  
2094:lib/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_ETH_MAC:     Ethernet MAC clock
2095:lib/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_ETH_MAC_Tx:  Ethernet Transmission clock
2096:lib/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_ETH_MAC_Rx:  Ethernet Reception clock
2097:lib/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_ETH_MAC_PTP: Ethernet PTP clock
ARM GAS  C:\Users\rinck\AppData\Local\Temp\ccnBBAPb.s 			page 57


2098:lib/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_OTG_HS:      USB OTG HS clock
2099:lib/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_OTG_HS_ULPI: USB OTG HS ULPI clock
2100:lib/src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the specified peripheral clock.
2101:lib/src/stm32f4xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
2102:lib/src/stm32f4xx_rcc.c ****   * @retval None
2103:lib/src/stm32f4xx_rcc.c ****   */
2104:lib/src/stm32f4xx_rcc.c **** void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
2105:lib/src/stm32f4xx_rcc.c **** {
 1159              		.loc 1 2105 0
 1160              		.cfi_startproc
 1161              		@ args = 0, pretend = 0, frame = 0
 1162              		@ frame_needed = 0, uses_anonymous_args = 0
 1163              		@ link register save eliminated.
 1164              	.LVL117:
2106:lib/src/stm32f4xx_rcc.c ****   /* Check the parameters */
2107:lib/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));
2108:lib/src/stm32f4xx_rcc.c **** 
2109:lib/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
2110:lib/src/stm32f4xx_rcc.c ****   if (NewState != DISABLE)
 1165              		.loc 1 2110 0
 1166 0000 21B1     		cbz	r1, .L108
2111:lib/src/stm32f4xx_rcc.c ****   {
2112:lib/src/stm32f4xx_rcc.c ****     RCC->AHB1ENR |= RCC_AHB1Periph;
 1167              		.loc 1 2112 0
 1168 0002 054B     		ldr	r3, .L110
 1169 0004 1A6B     		ldr	r2, [r3, #48]
 1170 0006 1043     		orrs	r0, r0, r2
 1171              	.LVL118:
 1172 0008 1863     		str	r0, [r3, #48]
 1173 000a 7047     		bx	lr
 1174              	.LVL119:
 1175              	.L108:
2113:lib/src/stm32f4xx_rcc.c ****   }
2114:lib/src/stm32f4xx_rcc.c ****   else
2115:lib/src/stm32f4xx_rcc.c ****   {
2116:lib/src/stm32f4xx_rcc.c ****     RCC->AHB1ENR &= ~RCC_AHB1Periph;
 1176              		.loc 1 2116 0
 1177 000c 024A     		ldr	r2, .L110
 1178 000e 136B     		ldr	r3, [r2, #48]
 1179 0010 23EA0000 		bic	r0, r3, r0
 1180              	.LVL120:
 1181 0014 1063     		str	r0, [r2, #48]
 1182 0016 7047     		bx	lr
 1183              	.L111:
 1184              		.align	2
 1185              	.L110:
 1186 0018 00380240 		.word	1073887232
 1187              		.cfi_endproc
 1188              	.LFE155:
 1190              		.section	.text.RCC_AHB2PeriphClockCmd,"ax",%progbits
 1191              		.align	2
 1192              		.global	RCC_AHB2PeriphClockCmd
 1193              		.thumb
 1194              		.thumb_func
 1196              	RCC_AHB2PeriphClockCmd:
 1197              	.LFB156:
2117:lib/src/stm32f4xx_rcc.c ****   }
ARM GAS  C:\Users\rinck\AppData\Local\Temp\ccnBBAPb.s 			page 58


2118:lib/src/stm32f4xx_rcc.c **** }
2119:lib/src/stm32f4xx_rcc.c **** 
2120:lib/src/stm32f4xx_rcc.c **** /**
2121:lib/src/stm32f4xx_rcc.c ****   * @brief  Enables or disables the AHB2 peripheral clock.
2122:lib/src/stm32f4xx_rcc.c ****   * @note   After reset, the peripheral clock (used for registers read/write access)
2123:lib/src/stm32f4xx_rcc.c ****   *         is disabled and the application software has to enable this clock before 
2124:lib/src/stm32f4xx_rcc.c ****   *         using it. 
2125:lib/src/stm32f4xx_rcc.c ****   * @param  RCC_AHBPeriph: specifies the AHB2 peripheral to gates its clock.
2126:lib/src/stm32f4xx_rcc.c ****   *          This parameter can be any combination of the following values:
2127:lib/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB2Periph_DCMI:   DCMI clock
2128:lib/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB2Periph_CRYP:   CRYP clock
2129:lib/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB2Periph_HASH:   HASH clock
2130:lib/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB2Periph_RNG:    RNG clock
2131:lib/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB2Periph_OTG_FS: USB OTG FS clock
2132:lib/src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the specified peripheral clock.
2133:lib/src/stm32f4xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
2134:lib/src/stm32f4xx_rcc.c ****   * @retval None
2135:lib/src/stm32f4xx_rcc.c ****   */
2136:lib/src/stm32f4xx_rcc.c **** void RCC_AHB2PeriphClockCmd(uint32_t RCC_AHB2Periph, FunctionalState NewState)
2137:lib/src/stm32f4xx_rcc.c **** {
 1198              		.loc 1 2137 0
 1199              		.cfi_startproc
 1200              		@ args = 0, pretend = 0, frame = 0
 1201              		@ frame_needed = 0, uses_anonymous_args = 0
 1202              		@ link register save eliminated.
 1203              	.LVL121:
2138:lib/src/stm32f4xx_rcc.c ****   /* Check the parameters */
2139:lib/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
2140:lib/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
2141:lib/src/stm32f4xx_rcc.c **** 
2142:lib/src/stm32f4xx_rcc.c ****   if (NewState != DISABLE)
 1204              		.loc 1 2142 0
 1205 0000 21B1     		cbz	r1, .L113
2143:lib/src/stm32f4xx_rcc.c ****   {
2144:lib/src/stm32f4xx_rcc.c ****     RCC->AHB2ENR |= RCC_AHB2Periph;
 1206              		.loc 1 2144 0
 1207 0002 054B     		ldr	r3, .L115
 1208 0004 5A6B     		ldr	r2, [r3, #52]
 1209 0006 1043     		orrs	r0, r0, r2
 1210              	.LVL122:
 1211 0008 5863     		str	r0, [r3, #52]
 1212 000a 7047     		bx	lr
 1213              	.LVL123:
 1214              	.L113:
2145:lib/src/stm32f4xx_rcc.c ****   }
2146:lib/src/stm32f4xx_rcc.c ****   else
2147:lib/src/stm32f4xx_rcc.c ****   {
2148:lib/src/stm32f4xx_rcc.c ****     RCC->AHB2ENR &= ~RCC_AHB2Periph;
 1215              		.loc 1 2148 0
 1216 000c 024A     		ldr	r2, .L115
 1217 000e 536B     		ldr	r3, [r2, #52]
 1218 0010 23EA0000 		bic	r0, r3, r0
 1219              	.LVL124:
 1220 0014 5063     		str	r0, [r2, #52]
 1221 0016 7047     		bx	lr
 1222              	.L116:
 1223              		.align	2
ARM GAS  C:\Users\rinck\AppData\Local\Temp\ccnBBAPb.s 			page 59


 1224              	.L115:
 1225 0018 00380240 		.word	1073887232
 1226              		.cfi_endproc
 1227              	.LFE156:
 1229              		.section	.text.RCC_AHB3PeriphClockCmd,"ax",%progbits
 1230              		.align	2
 1231              		.global	RCC_AHB3PeriphClockCmd
 1232              		.thumb
 1233              		.thumb_func
 1235              	RCC_AHB3PeriphClockCmd:
 1236              	.LFB157:
2149:lib/src/stm32f4xx_rcc.c ****   }
2150:lib/src/stm32f4xx_rcc.c **** }
2151:lib/src/stm32f4xx_rcc.c **** 
2152:lib/src/stm32f4xx_rcc.c **** #if defined(STM32F40_41xxx) || defined(STM32F412xG) || defined(STM32F413_423xx) || defined(STM32F42
2153:lib/src/stm32f4xx_rcc.c **** /**
2154:lib/src/stm32f4xx_rcc.c ****   * @brief  Enables or disables the AHB3 peripheral clock.
2155:lib/src/stm32f4xx_rcc.c ****   * @note   After reset, the peripheral clock (used for registers read/write access)
2156:lib/src/stm32f4xx_rcc.c ****   *         is disabled and the application software has to enable this clock before 
2157:lib/src/stm32f4xx_rcc.c ****   *         using it. 
2158:lib/src/stm32f4xx_rcc.c ****   * @param  RCC_AHBPeriph: specifies the AHB3 peripheral to gates its clock.
2159:lib/src/stm32f4xx_rcc.c ****   *          This parameter must be: 
2160:lib/src/stm32f4xx_rcc.c ****   *           - RCC_AHB3Periph_FSMC or RCC_AHB3Periph_FMC (STM32F412xG/STM32F413_423xx/STM32F429x/4
2161:lib/src/stm32f4xx_rcc.c ****   *           - RCC_AHB3Periph_QSPI (STM32F412xG/STM32F413_423xx/STM32F446xx/STM32F469_479xx device
2162:lib/src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the specified peripheral clock.
2163:lib/src/stm32f4xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
2164:lib/src/stm32f4xx_rcc.c ****   * @retval None
2165:lib/src/stm32f4xx_rcc.c ****   */
2166:lib/src/stm32f4xx_rcc.c **** void RCC_AHB3PeriphClockCmd(uint32_t RCC_AHB3Periph, FunctionalState NewState)
2167:lib/src/stm32f4xx_rcc.c **** {
 1237              		.loc 1 2167 0
 1238              		.cfi_startproc
 1239              		@ args = 0, pretend = 0, frame = 0
 1240              		@ frame_needed = 0, uses_anonymous_args = 0
 1241              		@ link register save eliminated.
 1242              	.LVL125:
2168:lib/src/stm32f4xx_rcc.c ****   /* Check the parameters */
2169:lib/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));  
2170:lib/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
2171:lib/src/stm32f4xx_rcc.c **** 
2172:lib/src/stm32f4xx_rcc.c ****   if (NewState != DISABLE)
 1243              		.loc 1 2172 0
 1244 0000 21B1     		cbz	r1, .L118
2173:lib/src/stm32f4xx_rcc.c ****   {
2174:lib/src/stm32f4xx_rcc.c ****     RCC->AHB3ENR |= RCC_AHB3Periph;
 1245              		.loc 1 2174 0
 1246 0002 054B     		ldr	r3, .L120
 1247 0004 9A6B     		ldr	r2, [r3, #56]
 1248 0006 1043     		orrs	r0, r0, r2
 1249              	.LVL126:
 1250 0008 9863     		str	r0, [r3, #56]
 1251 000a 7047     		bx	lr
 1252              	.LVL127:
 1253              	.L118:
2175:lib/src/stm32f4xx_rcc.c ****   }
2176:lib/src/stm32f4xx_rcc.c ****   else
2177:lib/src/stm32f4xx_rcc.c ****   {
ARM GAS  C:\Users\rinck\AppData\Local\Temp\ccnBBAPb.s 			page 60


2178:lib/src/stm32f4xx_rcc.c ****     RCC->AHB3ENR &= ~RCC_AHB3Periph;
 1254              		.loc 1 2178 0
 1255 000c 024A     		ldr	r2, .L120
 1256 000e 936B     		ldr	r3, [r2, #56]
 1257 0010 23EA0000 		bic	r0, r3, r0
 1258              	.LVL128:
 1259 0014 9063     		str	r0, [r2, #56]
 1260 0016 7047     		bx	lr
 1261              	.L121:
 1262              		.align	2
 1263              	.L120:
 1264 0018 00380240 		.word	1073887232
 1265              		.cfi_endproc
 1266              	.LFE157:
 1268              		.section	.text.RCC_APB1PeriphClockCmd,"ax",%progbits
 1269              		.align	2
 1270              		.global	RCC_APB1PeriphClockCmd
 1271              		.thumb
 1272              		.thumb_func
 1274              	RCC_APB1PeriphClockCmd:
 1275              	.LFB158:
2179:lib/src/stm32f4xx_rcc.c ****   }
2180:lib/src/stm32f4xx_rcc.c **** }
2181:lib/src/stm32f4xx_rcc.c **** #endif /* STM32F40_41xxx || STM32F412xG || STM32F413_423xx || STM32F427_437xx || STM32F429_439xx ||
2182:lib/src/stm32f4xx_rcc.c **** 
2183:lib/src/stm32f4xx_rcc.c **** /**
2184:lib/src/stm32f4xx_rcc.c ****   * @brief  Enables or disables the Low Speed APB (APB1) peripheral clock.
2185:lib/src/stm32f4xx_rcc.c ****   * @note   After reset, the peripheral clock (used for registers read/write access)
2186:lib/src/stm32f4xx_rcc.c ****   *         is disabled and the application software has to enable this clock before 
2187:lib/src/stm32f4xx_rcc.c ****   *         using it. 
2188:lib/src/stm32f4xx_rcc.c ****   * @param  RCC_APB1Periph: specifies the APB1 peripheral to gates its clock.
2189:lib/src/stm32f4xx_rcc.c ****   *          This parameter can be any combination of the following values:
2190:lib/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM2:   TIM2 clock
2191:lib/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM3:   TIM3 clock
2192:lib/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM4:   TIM4 clock
2193:lib/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM5:   TIM5 clock
2194:lib/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM6:   TIM6 clock
2195:lib/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM7:   TIM7 clock
2196:lib/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM12:  TIM12 clock
2197:lib/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM13:  TIM13 clock
2198:lib/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM14:  TIM14 clock
2199:lib/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_LPTIM1: LPTIM1 clock (STM32F410xx and STM32F413_423xx devices) 
2200:lib/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_WWDG:   WWDG clock
2201:lib/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_SPI2:   SPI2 clock
2202:lib/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_SPI3:   SPI3 clock
2203:lib/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_SPDIF:  SPDIF RX clock (STM32F446xx devices) 
2204:lib/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_USART2: USART2 clock
2205:lib/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_USART3: USART3 clock
2206:lib/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_UART4:  UART4 clock
2207:lib/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_UART5:  UART5 clock
2208:lib/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_I2C1:   I2C1 clock
2209:lib/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_I2C2:   I2C2 clock
2210:lib/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_I2C3:   I2C3 clock
2211:lib/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_FMPI2C1:FMPI2C1 clock
2212:lib/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_CAN1:   CAN1 clock
2213:lib/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_CAN2:   CAN2 clock
2214:lib/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_CEC:    CEC clock (STM32F446xx devices)
ARM GAS  C:\Users\rinck\AppData\Local\Temp\ccnBBAPb.s 			page 61


2215:lib/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_PWR:    PWR clock
2216:lib/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_DAC:    DAC clock
2217:lib/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_UART7:  UART7 clock
2218:lib/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_UART8:  UART8 clock
2219:lib/src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the specified peripheral clock.
2220:lib/src/stm32f4xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
2221:lib/src/stm32f4xx_rcc.c ****   * @retval None
2222:lib/src/stm32f4xx_rcc.c ****   */
2223:lib/src/stm32f4xx_rcc.c **** void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
2224:lib/src/stm32f4xx_rcc.c **** {
 1276              		.loc 1 2224 0
 1277              		.cfi_startproc
 1278              		@ args = 0, pretend = 0, frame = 0
 1279              		@ frame_needed = 0, uses_anonymous_args = 0
 1280              		@ link register save eliminated.
 1281              	.LVL129:
2225:lib/src/stm32f4xx_rcc.c ****   /* Check the parameters */
2226:lib/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
2227:lib/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
2228:lib/src/stm32f4xx_rcc.c **** 
2229:lib/src/stm32f4xx_rcc.c ****   if (NewState != DISABLE)
 1282              		.loc 1 2229 0
 1283 0000 21B1     		cbz	r1, .L123
2230:lib/src/stm32f4xx_rcc.c ****   {
2231:lib/src/stm32f4xx_rcc.c ****     RCC->APB1ENR |= RCC_APB1Periph;
 1284              		.loc 1 2231 0
 1285 0002 054B     		ldr	r3, .L125
 1286 0004 1A6C     		ldr	r2, [r3, #64]
 1287 0006 1043     		orrs	r0, r0, r2
 1288              	.LVL130:
 1289 0008 1864     		str	r0, [r3, #64]
 1290 000a 7047     		bx	lr
 1291              	.LVL131:
 1292              	.L123:
2232:lib/src/stm32f4xx_rcc.c ****   }
2233:lib/src/stm32f4xx_rcc.c ****   else
2234:lib/src/stm32f4xx_rcc.c ****   {
2235:lib/src/stm32f4xx_rcc.c ****     RCC->APB1ENR &= ~RCC_APB1Periph;
 1293              		.loc 1 2235 0
 1294 000c 024A     		ldr	r2, .L125
 1295 000e 136C     		ldr	r3, [r2, #64]
 1296 0010 23EA0000 		bic	r0, r3, r0
 1297              	.LVL132:
 1298 0014 1064     		str	r0, [r2, #64]
 1299 0016 7047     		bx	lr
 1300              	.L126:
 1301              		.align	2
 1302              	.L125:
 1303 0018 00380240 		.word	1073887232
 1304              		.cfi_endproc
 1305              	.LFE158:
 1307              		.section	.text.RCC_APB2PeriphClockCmd,"ax",%progbits
 1308              		.align	2
 1309              		.global	RCC_APB2PeriphClockCmd
 1310              		.thumb
 1311              		.thumb_func
 1313              	RCC_APB2PeriphClockCmd:
ARM GAS  C:\Users\rinck\AppData\Local\Temp\ccnBBAPb.s 			page 62


 1314              	.LFB159:
2236:lib/src/stm32f4xx_rcc.c ****   }
2237:lib/src/stm32f4xx_rcc.c **** }
2238:lib/src/stm32f4xx_rcc.c **** 
2239:lib/src/stm32f4xx_rcc.c **** /**
2240:lib/src/stm32f4xx_rcc.c ****   * @brief  Enables or disables the High Speed APB (APB2) peripheral clock.
2241:lib/src/stm32f4xx_rcc.c ****   * @note   After reset, the peripheral clock (used for registers read/write access)
2242:lib/src/stm32f4xx_rcc.c ****   *         is disabled and the application software has to enable this clock before 
2243:lib/src/stm32f4xx_rcc.c ****   *         using it.
2244:lib/src/stm32f4xx_rcc.c ****   * @param  RCC_APB2Periph: specifies the APB2 peripheral to gates its clock.
2245:lib/src/stm32f4xx_rcc.c ****   *          This parameter can be any combination of the following values:
2246:lib/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_TIM1:   TIM1 clock
2247:lib/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_TIM8:   TIM8 clock
2248:lib/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_USART1: USART1 clock
2249:lib/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_USART6: USART6 clock
2250:lib/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_ADC1:   ADC1 clock
2251:lib/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_ADC2:   ADC2 clock
2252:lib/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_ADC3:   ADC3 clock
2253:lib/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_SDIO:   SDIO clock
2254:lib/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_SPI1:   SPI1 clock
2255:lib/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_SPI4:   SPI4 clock
2256:lib/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_SYSCFG: SYSCFG clock
2257:lib/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_EXTIT:  EXTIIT clock
2258:lib/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_TIM9:   TIM9 clock
2259:lib/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_TIM10:  TIM10 clock
2260:lib/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_TIM11:  TIM11 clock
2261:lib/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_SPI5:   SPI5 clock
2262:lib/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_SPI6:   SPI6 clock
2263:lib/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_SAI1:   SAI1 clock (STM32F42xxx/43xxx/446xx/469xx/479xx/413_423x
2264:lib/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_SAI2:   SAI2 clock (STM32F446xx devices) 
2265:lib/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_LTDC:   LTDC clock (STM32F429xx/439xx devices)
2266:lib/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_DSI:    DSI clock (STM32F469_479xx devices)
2267:lib/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_DFSDM1: DFSDM Clock (STM32F412xG and STM32F413_423xx Devices)
2268:lib/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_DFSDM2: DFSDM2 Clock (STM32F413_423xx Devices)
2269:lib/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_UART9:  UART9 Clock (STM32F413_423xx Devices)
2270:lib/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_UART10: UART10 Clock (STM32F413_423xx Devices)
2271:lib/src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the specified peripheral clock.
2272:lib/src/stm32f4xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
2273:lib/src/stm32f4xx_rcc.c ****   * @retval None
2274:lib/src/stm32f4xx_rcc.c ****   */
2275:lib/src/stm32f4xx_rcc.c **** void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
2276:lib/src/stm32f4xx_rcc.c **** {
 1315              		.loc 1 2276 0
 1316              		.cfi_startproc
 1317              		@ args = 0, pretend = 0, frame = 0
 1318              		@ frame_needed = 0, uses_anonymous_args = 0
 1319              		@ link register save eliminated.
 1320              	.LVL133:
2277:lib/src/stm32f4xx_rcc.c ****   /* Check the parameters */
2278:lib/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
2279:lib/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
2280:lib/src/stm32f4xx_rcc.c **** 
2281:lib/src/stm32f4xx_rcc.c ****   if (NewState != DISABLE)
 1321              		.loc 1 2281 0
 1322 0000 21B1     		cbz	r1, .L128
2282:lib/src/stm32f4xx_rcc.c ****   {
2283:lib/src/stm32f4xx_rcc.c ****     RCC->APB2ENR |= RCC_APB2Periph;
ARM GAS  C:\Users\rinck\AppData\Local\Temp\ccnBBAPb.s 			page 63


 1323              		.loc 1 2283 0
 1324 0002 054B     		ldr	r3, .L130
 1325 0004 5A6C     		ldr	r2, [r3, #68]
 1326 0006 1043     		orrs	r0, r0, r2
 1327              	.LVL134:
 1328 0008 5864     		str	r0, [r3, #68]
 1329 000a 7047     		bx	lr
 1330              	.LVL135:
 1331              	.L128:
2284:lib/src/stm32f4xx_rcc.c ****   }
2285:lib/src/stm32f4xx_rcc.c ****   else
2286:lib/src/stm32f4xx_rcc.c ****   {
2287:lib/src/stm32f4xx_rcc.c ****     RCC->APB2ENR &= ~RCC_APB2Periph;
 1332              		.loc 1 2287 0
 1333 000c 024A     		ldr	r2, .L130
 1334 000e 536C     		ldr	r3, [r2, #68]
 1335 0010 23EA0000 		bic	r0, r3, r0
 1336              	.LVL136:
 1337 0014 5064     		str	r0, [r2, #68]
 1338 0016 7047     		bx	lr
 1339              	.L131:
 1340              		.align	2
 1341              	.L130:
 1342 0018 00380240 		.word	1073887232
 1343              		.cfi_endproc
 1344              	.LFE159:
 1346              		.section	.text.RCC_AHB1PeriphResetCmd,"ax",%progbits
 1347              		.align	2
 1348              		.global	RCC_AHB1PeriphResetCmd
 1349              		.thumb
 1350              		.thumb_func
 1352              	RCC_AHB1PeriphResetCmd:
 1353              	.LFB160:
2288:lib/src/stm32f4xx_rcc.c ****   }
2289:lib/src/stm32f4xx_rcc.c **** }
2290:lib/src/stm32f4xx_rcc.c **** 
2291:lib/src/stm32f4xx_rcc.c **** /**
2292:lib/src/stm32f4xx_rcc.c ****   * @brief  Forces or releases AHB1 peripheral reset.
2293:lib/src/stm32f4xx_rcc.c ****   * @param  RCC_AHB1Periph: specifies the AHB1 peripheral to reset.
2294:lib/src/stm32f4xx_rcc.c ****   *          This parameter can be any combination of the following values:
2295:lib/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOA:   GPIOA clock
2296:lib/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOB:   GPIOB clock 
2297:lib/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOC:   GPIOC clock
2298:lib/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOD:   GPIOD clock
2299:lib/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOE:   GPIOE clock
2300:lib/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOF:   GPIOF clock
2301:lib/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOG:   GPIOG clock
2302:lib/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOG:   GPIOG clock
2303:lib/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOI:   GPIOI clock
2304:lib/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOJ:   GPIOJ clock (STM32F42xxx/43xxx devices) 
2305:lib/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOK:   GPIOK clock (STM32F42xxx/43xxxdevices)   
2306:lib/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_CRC:     CRC clock
2307:lib/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_DMA1:    DMA1 clock
2308:lib/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_DMA2:    DMA2 clock
2309:lib/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_DMA2D:   DMA2D clock (STM32F429xx/439xx devices)   
2310:lib/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_ETH_MAC: Ethernet MAC clock
2311:lib/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_OTG_HS:  USB OTG HS clock
ARM GAS  C:\Users\rinck\AppData\Local\Temp\ccnBBAPb.s 			page 64


2312:lib/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_RNG:     RNG clock for STM32F410xx devices   
2313:lib/src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the specified peripheral reset.
2314:lib/src/stm32f4xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
2315:lib/src/stm32f4xx_rcc.c ****   * @retval None
2316:lib/src/stm32f4xx_rcc.c ****   */
2317:lib/src/stm32f4xx_rcc.c **** void RCC_AHB1PeriphResetCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
2318:lib/src/stm32f4xx_rcc.c **** {
 1354              		.loc 1 2318 0
 1355              		.cfi_startproc
 1356              		@ args = 0, pretend = 0, frame = 0
 1357              		@ frame_needed = 0, uses_anonymous_args = 0
 1358              		@ link register save eliminated.
 1359              	.LVL137:
2319:lib/src/stm32f4xx_rcc.c ****   /* Check the parameters */
2320:lib/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_AHB1_RESET_PERIPH(RCC_AHB1Periph));
2321:lib/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
2322:lib/src/stm32f4xx_rcc.c **** 
2323:lib/src/stm32f4xx_rcc.c ****   if (NewState != DISABLE)
 1360              		.loc 1 2323 0
 1361 0000 21B1     		cbz	r1, .L133
2324:lib/src/stm32f4xx_rcc.c ****   {
2325:lib/src/stm32f4xx_rcc.c ****     RCC->AHB1RSTR |= RCC_AHB1Periph;
 1362              		.loc 1 2325 0
 1363 0002 054B     		ldr	r3, .L135
 1364 0004 1A69     		ldr	r2, [r3, #16]
 1365 0006 1043     		orrs	r0, r0, r2
 1366              	.LVL138:
 1367 0008 1861     		str	r0, [r3, #16]
 1368 000a 7047     		bx	lr
 1369              	.LVL139:
 1370              	.L133:
2326:lib/src/stm32f4xx_rcc.c ****   }
2327:lib/src/stm32f4xx_rcc.c ****   else
2328:lib/src/stm32f4xx_rcc.c ****   {
2329:lib/src/stm32f4xx_rcc.c ****     RCC->AHB1RSTR &= ~RCC_AHB1Periph;
 1371              		.loc 1 2329 0
 1372 000c 024A     		ldr	r2, .L135
 1373 000e 1369     		ldr	r3, [r2, #16]
 1374 0010 23EA0000 		bic	r0, r3, r0
 1375              	.LVL140:
 1376 0014 1061     		str	r0, [r2, #16]
 1377 0016 7047     		bx	lr
 1378              	.L136:
 1379              		.align	2
 1380              	.L135:
 1381 0018 00380240 		.word	1073887232
 1382              		.cfi_endproc
 1383              	.LFE160:
 1385              		.section	.text.RCC_AHB2PeriphResetCmd,"ax",%progbits
 1386              		.align	2
 1387              		.global	RCC_AHB2PeriphResetCmd
 1388              		.thumb
 1389              		.thumb_func
 1391              	RCC_AHB2PeriphResetCmd:
 1392              	.LFB161:
2330:lib/src/stm32f4xx_rcc.c ****   }
2331:lib/src/stm32f4xx_rcc.c **** }
ARM GAS  C:\Users\rinck\AppData\Local\Temp\ccnBBAPb.s 			page 65


2332:lib/src/stm32f4xx_rcc.c **** 
2333:lib/src/stm32f4xx_rcc.c **** /**
2334:lib/src/stm32f4xx_rcc.c ****   * @brief  Forces or releases AHB2 peripheral reset.
2335:lib/src/stm32f4xx_rcc.c ****   * @param  RCC_AHB2Periph: specifies the AHB2 peripheral to reset.
2336:lib/src/stm32f4xx_rcc.c ****   *          This parameter can be any combination of the following values:
2337:lib/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB2Periph_DCMI:   DCMI clock
2338:lib/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB2Periph_CRYP:   CRYP clock
2339:lib/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB2Periph_HASH:   HASH clock
2340:lib/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB2Periph_RNG:    RNG clock for STM32F40_41xxx/STM32F412xG/STM32F413_423xx
2341:lib/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB2Periph_OTG_FS: USB OTG FS clock
2342:lib/src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the specified peripheral reset.
2343:lib/src/stm32f4xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
2344:lib/src/stm32f4xx_rcc.c ****   * @retval None
2345:lib/src/stm32f4xx_rcc.c ****   */
2346:lib/src/stm32f4xx_rcc.c **** void RCC_AHB2PeriphResetCmd(uint32_t RCC_AHB2Periph, FunctionalState NewState)
2347:lib/src/stm32f4xx_rcc.c **** {
 1393              		.loc 1 2347 0
 1394              		.cfi_startproc
 1395              		@ args = 0, pretend = 0, frame = 0
 1396              		@ frame_needed = 0, uses_anonymous_args = 0
 1397              		@ link register save eliminated.
 1398              	.LVL141:
2348:lib/src/stm32f4xx_rcc.c ****   /* Check the parameters */
2349:lib/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
2350:lib/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
2351:lib/src/stm32f4xx_rcc.c **** 
2352:lib/src/stm32f4xx_rcc.c ****   if (NewState != DISABLE)
 1399              		.loc 1 2352 0
 1400 0000 21B1     		cbz	r1, .L138
2353:lib/src/stm32f4xx_rcc.c ****   {
2354:lib/src/stm32f4xx_rcc.c ****     RCC->AHB2RSTR |= RCC_AHB2Periph;
 1401              		.loc 1 2354 0
 1402 0002 054B     		ldr	r3, .L140
 1403 0004 5A69     		ldr	r2, [r3, #20]
 1404 0006 1043     		orrs	r0, r0, r2
 1405              	.LVL142:
 1406 0008 5861     		str	r0, [r3, #20]
 1407 000a 7047     		bx	lr
 1408              	.LVL143:
 1409              	.L138:
2355:lib/src/stm32f4xx_rcc.c ****   }
2356:lib/src/stm32f4xx_rcc.c ****   else
2357:lib/src/stm32f4xx_rcc.c ****   {
2358:lib/src/stm32f4xx_rcc.c ****     RCC->AHB2RSTR &= ~RCC_AHB2Periph;
 1410              		.loc 1 2358 0
 1411 000c 024A     		ldr	r2, .L140
 1412 000e 5369     		ldr	r3, [r2, #20]
 1413 0010 23EA0000 		bic	r0, r3, r0
 1414              	.LVL144:
 1415 0014 5061     		str	r0, [r2, #20]
 1416 0016 7047     		bx	lr
 1417              	.L141:
 1418              		.align	2
 1419              	.L140:
 1420 0018 00380240 		.word	1073887232
 1421              		.cfi_endproc
 1422              	.LFE161:
ARM GAS  C:\Users\rinck\AppData\Local\Temp\ccnBBAPb.s 			page 66


 1424              		.section	.text.RCC_AHB3PeriphResetCmd,"ax",%progbits
 1425              		.align	2
 1426              		.global	RCC_AHB3PeriphResetCmd
 1427              		.thumb
 1428              		.thumb_func
 1430              	RCC_AHB3PeriphResetCmd:
 1431              	.LFB162:
2359:lib/src/stm32f4xx_rcc.c ****   }
2360:lib/src/stm32f4xx_rcc.c **** }
2361:lib/src/stm32f4xx_rcc.c **** 
2362:lib/src/stm32f4xx_rcc.c **** #if defined(STM32F40_41xxx) || defined(STM32F412xG) || defined(STM32F413_423xx) || defined(STM32F42
2363:lib/src/stm32f4xx_rcc.c **** /**
2364:lib/src/stm32f4xx_rcc.c ****   * @brief  Forces or releases AHB3 peripheral reset.
2365:lib/src/stm32f4xx_rcc.c ****   * @param  RCC_AHB3Periph: specifies the AHB3 peripheral to reset.
2366:lib/src/stm32f4xx_rcc.c ****   *          This parameter must be: 
2367:lib/src/stm32f4xx_rcc.c ****   *           - RCC_AHB3Periph_FSMC or RCC_AHB3Periph_FMC (STM32F412xG, STM32F413_423xx and STM32F4
2368:lib/src/stm32f4xx_rcc.c ****   *           - RCC_AHB3Periph_QSPI (STM32F412xG/STM32F446xx/STM32F469_479xx devices)
2369:lib/src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the specified peripheral reset.
2370:lib/src/stm32f4xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
2371:lib/src/stm32f4xx_rcc.c ****   * @retval None
2372:lib/src/stm32f4xx_rcc.c ****   */
2373:lib/src/stm32f4xx_rcc.c **** void RCC_AHB3PeriphResetCmd(uint32_t RCC_AHB3Periph, FunctionalState NewState)
2374:lib/src/stm32f4xx_rcc.c **** {
 1432              		.loc 1 2374 0
 1433              		.cfi_startproc
 1434              		@ args = 0, pretend = 0, frame = 0
 1435              		@ frame_needed = 0, uses_anonymous_args = 0
 1436              		@ link register save eliminated.
 1437              	.LVL145:
2375:lib/src/stm32f4xx_rcc.c ****   /* Check the parameters */
2376:lib/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));
2377:lib/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
2378:lib/src/stm32f4xx_rcc.c **** 
2379:lib/src/stm32f4xx_rcc.c ****   if (NewState != DISABLE)
 1438              		.loc 1 2379 0
 1439 0000 21B1     		cbz	r1, .L143
2380:lib/src/stm32f4xx_rcc.c ****   {
2381:lib/src/stm32f4xx_rcc.c ****     RCC->AHB3RSTR |= RCC_AHB3Periph;
 1440              		.loc 1 2381 0
 1441 0002 054B     		ldr	r3, .L145
 1442 0004 9A69     		ldr	r2, [r3, #24]
 1443 0006 1043     		orrs	r0, r0, r2
 1444              	.LVL146:
 1445 0008 9861     		str	r0, [r3, #24]
 1446 000a 7047     		bx	lr
 1447              	.LVL147:
 1448              	.L143:
2382:lib/src/stm32f4xx_rcc.c ****   }
2383:lib/src/stm32f4xx_rcc.c ****   else
2384:lib/src/stm32f4xx_rcc.c ****   {
2385:lib/src/stm32f4xx_rcc.c ****     RCC->AHB3RSTR &= ~RCC_AHB3Periph;
 1449              		.loc 1 2385 0
 1450 000c 024A     		ldr	r2, .L145
 1451 000e 9369     		ldr	r3, [r2, #24]
 1452 0010 23EA0000 		bic	r0, r3, r0
 1453              	.LVL148:
 1454 0014 9061     		str	r0, [r2, #24]
ARM GAS  C:\Users\rinck\AppData\Local\Temp\ccnBBAPb.s 			page 67


 1455 0016 7047     		bx	lr
 1456              	.L146:
 1457              		.align	2
 1458              	.L145:
 1459 0018 00380240 		.word	1073887232
 1460              		.cfi_endproc
 1461              	.LFE162:
 1463              		.section	.text.RCC_APB1PeriphResetCmd,"ax",%progbits
 1464              		.align	2
 1465              		.global	RCC_APB1PeriphResetCmd
 1466              		.thumb
 1467              		.thumb_func
 1469              	RCC_APB1PeriphResetCmd:
 1470              	.LFB163:
2386:lib/src/stm32f4xx_rcc.c ****   }
2387:lib/src/stm32f4xx_rcc.c **** }
2388:lib/src/stm32f4xx_rcc.c **** #endif /* STM32F40_41xxx || STM32F412xG || STM32F413_423xx || STM32F427_437xx || STM32F429_439xx ||
2389:lib/src/stm32f4xx_rcc.c **** 
2390:lib/src/stm32f4xx_rcc.c **** /**
2391:lib/src/stm32f4xx_rcc.c ****   * @brief  Forces or releases Low Speed APB (APB1) peripheral reset.
2392:lib/src/stm32f4xx_rcc.c ****   * @param  RCC_APB1Periph: specifies the APB1 peripheral to reset.
2393:lib/src/stm32f4xx_rcc.c ****   *          This parameter can be any combination of the following values:
2394:lib/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM2:   TIM2 clock
2395:lib/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM3:   TIM3 clock
2396:lib/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM4:   TIM4 clock
2397:lib/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM5:   TIM5 clock
2398:lib/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM6:   TIM6 clock
2399:lib/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM7:   TIM7 clock
2400:lib/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM12:  TIM12 clock
2401:lib/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM13:  TIM13 clock
2402:lib/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM14:  TIM14 clock
2403:lib/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_LPTIM1: LPTIM1 clock (STM32F410xx and STM32F413_423xx devices) 
2404:lib/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_WWDG:   WWDG clock
2405:lib/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_SPI2:   SPI2 clock
2406:lib/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_SPI3:   SPI3 clock
2407:lib/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_SPDIF:  SPDIF RX clock (STM32F446xx devices) 
2408:lib/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_USART2: USART2 clock
2409:lib/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_USART3: USART3 clock
2410:lib/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_UART4:  UART4 clock
2411:lib/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_UART5:  UART5 clock
2412:lib/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_I2C1:   I2C1 clock
2413:lib/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_I2C2:   I2C2 clock
2414:lib/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_I2C3:   I2C3 clock
2415:lib/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_FMPI2C1:FMPI2C1 clock
2416:lib/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_CAN1:   CAN1 clock
2417:lib/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_CAN2:   CAN2 clock
2418:lib/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_CEC:    CEC clock(STM32F446xx devices)
2419:lib/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_PWR:    PWR clock
2420:lib/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_DAC:    DAC clock
2421:lib/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_UART7:  UART7 clock
2422:lib/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_UART8:  UART8 clock  
2423:lib/src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the specified peripheral reset.
2424:lib/src/stm32f4xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
2425:lib/src/stm32f4xx_rcc.c ****   * @retval None
2426:lib/src/stm32f4xx_rcc.c ****   */
2427:lib/src/stm32f4xx_rcc.c **** void RCC_APB1PeriphResetCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
2428:lib/src/stm32f4xx_rcc.c **** {
ARM GAS  C:\Users\rinck\AppData\Local\Temp\ccnBBAPb.s 			page 68


 1471              		.loc 1 2428 0
 1472              		.cfi_startproc
 1473              		@ args = 0, pretend = 0, frame = 0
 1474              		@ frame_needed = 0, uses_anonymous_args = 0
 1475              		@ link register save eliminated.
 1476              	.LVL149:
2429:lib/src/stm32f4xx_rcc.c ****   /* Check the parameters */
2430:lib/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
2431:lib/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
2432:lib/src/stm32f4xx_rcc.c ****   if (NewState != DISABLE)
 1477              		.loc 1 2432 0
 1478 0000 21B1     		cbz	r1, .L148
2433:lib/src/stm32f4xx_rcc.c ****   {
2434:lib/src/stm32f4xx_rcc.c ****     RCC->APB1RSTR |= RCC_APB1Periph;
 1479              		.loc 1 2434 0
 1480 0002 054B     		ldr	r3, .L150
 1481 0004 1A6A     		ldr	r2, [r3, #32]
 1482 0006 1043     		orrs	r0, r0, r2
 1483              	.LVL150:
 1484 0008 1862     		str	r0, [r3, #32]
 1485 000a 7047     		bx	lr
 1486              	.LVL151:
 1487              	.L148:
2435:lib/src/stm32f4xx_rcc.c ****   }
2436:lib/src/stm32f4xx_rcc.c ****   else
2437:lib/src/stm32f4xx_rcc.c ****   {
2438:lib/src/stm32f4xx_rcc.c ****     RCC->APB1RSTR &= ~RCC_APB1Periph;
 1488              		.loc 1 2438 0
 1489 000c 024A     		ldr	r2, .L150
 1490 000e 136A     		ldr	r3, [r2, #32]
 1491 0010 23EA0000 		bic	r0, r3, r0
 1492              	.LVL152:
 1493 0014 1062     		str	r0, [r2, #32]
 1494 0016 7047     		bx	lr
 1495              	.L151:
 1496              		.align	2
 1497              	.L150:
 1498 0018 00380240 		.word	1073887232
 1499              		.cfi_endproc
 1500              	.LFE163:
 1502              		.section	.text.RCC_APB2PeriphResetCmd,"ax",%progbits
 1503              		.align	2
 1504              		.global	RCC_APB2PeriphResetCmd
 1505              		.thumb
 1506              		.thumb_func
 1508              	RCC_APB2PeriphResetCmd:
 1509              	.LFB164:
2439:lib/src/stm32f4xx_rcc.c ****   }
2440:lib/src/stm32f4xx_rcc.c **** }
2441:lib/src/stm32f4xx_rcc.c **** 
2442:lib/src/stm32f4xx_rcc.c **** /**
2443:lib/src/stm32f4xx_rcc.c ****   * @brief  Forces or releases High Speed APB (APB2) peripheral reset.
2444:lib/src/stm32f4xx_rcc.c ****   * @param  RCC_APB2Periph: specifies the APB2 peripheral to reset.
2445:lib/src/stm32f4xx_rcc.c ****   *          This parameter can be any combination of the following values:
2446:lib/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_TIM1:   TIM1 clock
2447:lib/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_TIM8:   TIM8 clock
2448:lib/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_USART1: USART1 clock
ARM GAS  C:\Users\rinck\AppData\Local\Temp\ccnBBAPb.s 			page 69


2449:lib/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_USART6: USART6 clock
2450:lib/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_ADC1:   ADC1 clock
2451:lib/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_ADC2:   ADC2 clock
2452:lib/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_ADC3:   ADC3 clock
2453:lib/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_SDIO:   SDIO clock
2454:lib/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_SPI1:   SPI1 clock
2455:lib/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_SPI4:   SPI4 clock  
2456:lib/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_SYSCFG: SYSCFG clock
2457:lib/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_TIM9:   TIM9 clock
2458:lib/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_TIM10:  TIM10 clock
2459:lib/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_TIM11:  TIM11 clock
2460:lib/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_SPI5:   SPI5 clock
2461:lib/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_SPI6:   SPI6 clock
2462:lib/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_SAI1:   SAI1 clock (STM32F42xxx/43xxx/446xx/469xx/479xx/413_423x
2463:lib/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_SAI2:   SAI2 clock (STM32F446xx devices) 
2464:lib/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_LTDC:   LTDC clock (STM32F429xx/439xx devices)
2465:lib/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_DSI:    DSI clock (STM32F469_479xx devices)
2466:lib/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_DFSDM1: DFSDM Clock (STM32F412xG and STM32F413_423xx Devices)
2467:lib/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_DFSDM2: DFSDM2 Clock (STM32F413_423xx Devices)
2468:lib/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_UART9:  UART9 Clock (STM32F413_423xx Devices)
2469:lib/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_UART10: UART10 Clock (STM32F413_423xx Devices)
2470:lib/src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the specified peripheral reset.
2471:lib/src/stm32f4xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
2472:lib/src/stm32f4xx_rcc.c ****   * @retval None
2473:lib/src/stm32f4xx_rcc.c ****   */
2474:lib/src/stm32f4xx_rcc.c **** void RCC_APB2PeriphResetCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
2475:lib/src/stm32f4xx_rcc.c **** {
 1510              		.loc 1 2475 0
 1511              		.cfi_startproc
 1512              		@ args = 0, pretend = 0, frame = 0
 1513              		@ frame_needed = 0, uses_anonymous_args = 0
 1514              		@ link register save eliminated.
 1515              	.LVL153:
2476:lib/src/stm32f4xx_rcc.c ****   /* Check the parameters */
2477:lib/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_APB2_RESET_PERIPH(RCC_APB2Periph));
2478:lib/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
2479:lib/src/stm32f4xx_rcc.c ****   if (NewState != DISABLE)
 1516              		.loc 1 2479 0
 1517 0000 21B1     		cbz	r1, .L153
2480:lib/src/stm32f4xx_rcc.c ****   {
2481:lib/src/stm32f4xx_rcc.c ****     RCC->APB2RSTR |= RCC_APB2Periph;
 1518              		.loc 1 2481 0
 1519 0002 054B     		ldr	r3, .L155
 1520 0004 5A6A     		ldr	r2, [r3, #36]
 1521 0006 1043     		orrs	r0, r0, r2
 1522              	.LVL154:
 1523 0008 5862     		str	r0, [r3, #36]
 1524 000a 7047     		bx	lr
 1525              	.LVL155:
 1526              	.L153:
2482:lib/src/stm32f4xx_rcc.c ****   }
2483:lib/src/stm32f4xx_rcc.c ****   else
2484:lib/src/stm32f4xx_rcc.c ****   {
2485:lib/src/stm32f4xx_rcc.c ****     RCC->APB2RSTR &= ~RCC_APB2Periph;
 1527              		.loc 1 2485 0
 1528 000c 024A     		ldr	r2, .L155
 1529 000e 536A     		ldr	r3, [r2, #36]
ARM GAS  C:\Users\rinck\AppData\Local\Temp\ccnBBAPb.s 			page 70


 1530 0010 23EA0000 		bic	r0, r3, r0
 1531              	.LVL156:
 1532 0014 5062     		str	r0, [r2, #36]
 1533 0016 7047     		bx	lr
 1534              	.L156:
 1535              		.align	2
 1536              	.L155:
 1537 0018 00380240 		.word	1073887232
 1538              		.cfi_endproc
 1539              	.LFE164:
 1541              		.section	.text.RCC_AHB1PeriphClockLPModeCmd,"ax",%progbits
 1542              		.align	2
 1543              		.global	RCC_AHB1PeriphClockLPModeCmd
 1544              		.thumb
 1545              		.thumb_func
 1547              	RCC_AHB1PeriphClockLPModeCmd:
 1548              	.LFB165:
2486:lib/src/stm32f4xx_rcc.c ****   }
2487:lib/src/stm32f4xx_rcc.c **** }
2488:lib/src/stm32f4xx_rcc.c **** 
2489:lib/src/stm32f4xx_rcc.c **** /**
2490:lib/src/stm32f4xx_rcc.c ****   * @brief  Enables or disables the AHB1 peripheral clock during Low Power (Sleep) mode.
2491:lib/src/stm32f4xx_rcc.c ****   * @note   Peripheral clock gating in SLEEP mode can be used to further reduce
2492:lib/src/stm32f4xx_rcc.c ****   *         power consumption.
2493:lib/src/stm32f4xx_rcc.c ****   * @note   After wakeup from SLEEP mode, the peripheral clock is enabled again.
2494:lib/src/stm32f4xx_rcc.c ****   * @note   By default, all peripheral clocks are enabled during SLEEP mode.
2495:lib/src/stm32f4xx_rcc.c ****   * @param  RCC_AHBPeriph: specifies the AHB1 peripheral to gates its clock.
2496:lib/src/stm32f4xx_rcc.c ****   *          This parameter can be any combination of the following values:
2497:lib/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOA:       GPIOA clock
2498:lib/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOB:       GPIOB clock 
2499:lib/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOC:       GPIOC clock
2500:lib/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOD:       GPIOD clock
2501:lib/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOE:       GPIOE clock
2502:lib/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOF:       GPIOF clock
2503:lib/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOG:       GPIOG clock
2504:lib/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOG:       GPIOG clock
2505:lib/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOI:       GPIOI clock
2506:lib/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOJ:       GPIOJ clock (STM32F42xxx/43xxx devices) 
2507:lib/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOK:       GPIOK clock (STM32F42xxx/43xxx devices)   
2508:lib/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_CRC:         CRC clock
2509:lib/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_BKPSRAM:     BKPSRAM interface clock
2510:lib/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_DMA1:        DMA1 clock
2511:lib/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_DMA2:        DMA2 clock
2512:lib/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_DMA2D:       DMA2D clock (STM32F429xx/439xx devices) 
2513:lib/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_ETH_MAC:     Ethernet MAC clock
2514:lib/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_ETH_MAC_Tx:  Ethernet Transmission clock
2515:lib/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_ETH_MAC_Rx:  Ethernet Reception clock
2516:lib/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_ETH_MAC_PTP: Ethernet PTP clock
2517:lib/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_OTG_HS:      USB OTG HS clock
2518:lib/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_OTG_HS_ULPI: USB OTG HS ULPI clock
2519:lib/src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the specified peripheral clock.
2520:lib/src/stm32f4xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
2521:lib/src/stm32f4xx_rcc.c ****   * @retval None
2522:lib/src/stm32f4xx_rcc.c ****   */
2523:lib/src/stm32f4xx_rcc.c **** void RCC_AHB1PeriphClockLPModeCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
2524:lib/src/stm32f4xx_rcc.c **** {
 1549              		.loc 1 2524 0
ARM GAS  C:\Users\rinck\AppData\Local\Temp\ccnBBAPb.s 			page 71


 1550              		.cfi_startproc
 1551              		@ args = 0, pretend = 0, frame = 0
 1552              		@ frame_needed = 0, uses_anonymous_args = 0
 1553              		@ link register save eliminated.
 1554              	.LVL157:
2525:lib/src/stm32f4xx_rcc.c ****   /* Check the parameters */
2526:lib/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_AHB1_LPMODE_PERIPH(RCC_AHB1Periph));
2527:lib/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
2528:lib/src/stm32f4xx_rcc.c ****   if (NewState != DISABLE)
 1555              		.loc 1 2528 0
 1556 0000 21B1     		cbz	r1, .L158
2529:lib/src/stm32f4xx_rcc.c ****   {
2530:lib/src/stm32f4xx_rcc.c ****     RCC->AHB1LPENR |= RCC_AHB1Periph;
 1557              		.loc 1 2530 0
 1558 0002 054B     		ldr	r3, .L160
 1559 0004 1A6D     		ldr	r2, [r3, #80]
 1560 0006 1043     		orrs	r0, r0, r2
 1561              	.LVL158:
 1562 0008 1865     		str	r0, [r3, #80]
 1563 000a 7047     		bx	lr
 1564              	.LVL159:
 1565              	.L158:
2531:lib/src/stm32f4xx_rcc.c ****   }
2532:lib/src/stm32f4xx_rcc.c ****   else
2533:lib/src/stm32f4xx_rcc.c ****   {
2534:lib/src/stm32f4xx_rcc.c ****     RCC->AHB1LPENR &= ~RCC_AHB1Periph;
 1566              		.loc 1 2534 0
 1567 000c 024A     		ldr	r2, .L160
 1568 000e 136D     		ldr	r3, [r2, #80]
 1569 0010 23EA0000 		bic	r0, r3, r0
 1570              	.LVL160:
 1571 0014 1065     		str	r0, [r2, #80]
 1572 0016 7047     		bx	lr
 1573              	.L161:
 1574              		.align	2
 1575              	.L160:
 1576 0018 00380240 		.word	1073887232
 1577              		.cfi_endproc
 1578              	.LFE165:
 1580              		.section	.text.RCC_AHB2PeriphClockLPModeCmd,"ax",%progbits
 1581              		.align	2
 1582              		.global	RCC_AHB2PeriphClockLPModeCmd
 1583              		.thumb
 1584              		.thumb_func
 1586              	RCC_AHB2PeriphClockLPModeCmd:
 1587              	.LFB166:
2535:lib/src/stm32f4xx_rcc.c ****   }
2536:lib/src/stm32f4xx_rcc.c **** }
2537:lib/src/stm32f4xx_rcc.c **** 
2538:lib/src/stm32f4xx_rcc.c **** /**
2539:lib/src/stm32f4xx_rcc.c ****   * @brief  Enables or disables the AHB2 peripheral clock during Low Power (Sleep) mode.
2540:lib/src/stm32f4xx_rcc.c ****   * @note   Peripheral clock gating in SLEEP mode can be used to further reduce
2541:lib/src/stm32f4xx_rcc.c ****   *           power consumption.
2542:lib/src/stm32f4xx_rcc.c ****   * @note   After wakeup from SLEEP mode, the peripheral clock is enabled again.
2543:lib/src/stm32f4xx_rcc.c ****   * @note   By default, all peripheral clocks are enabled during SLEEP mode.
2544:lib/src/stm32f4xx_rcc.c ****   * @param  RCC_AHBPeriph: specifies the AHB2 peripheral to gates its clock.
2545:lib/src/stm32f4xx_rcc.c ****   *          This parameter can be any combination of the following values:
ARM GAS  C:\Users\rinck\AppData\Local\Temp\ccnBBAPb.s 			page 72


2546:lib/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB2Periph_DCMI:   DCMI clock
2547:lib/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB2Periph_CRYP:   CRYP clock
2548:lib/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB2Periph_HASH:   HASH clock
2549:lib/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB2Periph_RNG:    RNG clock
2550:lib/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB2Periph_OTG_FS: USB OTG FS clock  
2551:lib/src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the specified peripheral clock.
2552:lib/src/stm32f4xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
2553:lib/src/stm32f4xx_rcc.c ****   * @retval None
2554:lib/src/stm32f4xx_rcc.c ****   */
2555:lib/src/stm32f4xx_rcc.c **** void RCC_AHB2PeriphClockLPModeCmd(uint32_t RCC_AHB2Periph, FunctionalState NewState)
2556:lib/src/stm32f4xx_rcc.c **** {
 1588              		.loc 1 2556 0
 1589              		.cfi_startproc
 1590              		@ args = 0, pretend = 0, frame = 0
 1591              		@ frame_needed = 0, uses_anonymous_args = 0
 1592              		@ link register save eliminated.
 1593              	.LVL161:
2557:lib/src/stm32f4xx_rcc.c ****   /* Check the parameters */
2558:lib/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
2559:lib/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
2560:lib/src/stm32f4xx_rcc.c ****   if (NewState != DISABLE)
 1594              		.loc 1 2560 0
 1595 0000 21B1     		cbz	r1, .L163
2561:lib/src/stm32f4xx_rcc.c ****   {
2562:lib/src/stm32f4xx_rcc.c ****     RCC->AHB2LPENR |= RCC_AHB2Periph;
 1596              		.loc 1 2562 0
 1597 0002 054B     		ldr	r3, .L165
 1598 0004 5A6D     		ldr	r2, [r3, #84]
 1599 0006 1043     		orrs	r0, r0, r2
 1600              	.LVL162:
 1601 0008 5865     		str	r0, [r3, #84]
 1602 000a 7047     		bx	lr
 1603              	.LVL163:
 1604              	.L163:
2563:lib/src/stm32f4xx_rcc.c ****   }
2564:lib/src/stm32f4xx_rcc.c ****   else
2565:lib/src/stm32f4xx_rcc.c ****   {
2566:lib/src/stm32f4xx_rcc.c ****     RCC->AHB2LPENR &= ~RCC_AHB2Periph;
 1605              		.loc 1 2566 0
 1606 000c 024A     		ldr	r2, .L165
 1607 000e 536D     		ldr	r3, [r2, #84]
 1608 0010 23EA0000 		bic	r0, r3, r0
 1609              	.LVL164:
 1610 0014 5065     		str	r0, [r2, #84]
 1611 0016 7047     		bx	lr
 1612              	.L166:
 1613              		.align	2
 1614              	.L165:
 1615 0018 00380240 		.word	1073887232
 1616              		.cfi_endproc
 1617              	.LFE166:
 1619              		.section	.text.RCC_AHB3PeriphClockLPModeCmd,"ax",%progbits
 1620              		.align	2
 1621              		.global	RCC_AHB3PeriphClockLPModeCmd
 1622              		.thumb
 1623              		.thumb_func
 1625              	RCC_AHB3PeriphClockLPModeCmd:
ARM GAS  C:\Users\rinck\AppData\Local\Temp\ccnBBAPb.s 			page 73


 1626              	.LFB167:
2567:lib/src/stm32f4xx_rcc.c ****   }
2568:lib/src/stm32f4xx_rcc.c **** }
2569:lib/src/stm32f4xx_rcc.c **** 
2570:lib/src/stm32f4xx_rcc.c **** #if defined(STM32F40_41xxx) || defined(STM32F412xG) || defined(STM32F413_423xx) || defined(STM32F42
2571:lib/src/stm32f4xx_rcc.c **** /**
2572:lib/src/stm32f4xx_rcc.c ****   * @brief  Enables or disables the AHB3 peripheral clock during Low Power (Sleep) mode.
2573:lib/src/stm32f4xx_rcc.c ****   * @note   Peripheral clock gating in SLEEP mode can be used to further reduce
2574:lib/src/stm32f4xx_rcc.c ****   *         power consumption.
2575:lib/src/stm32f4xx_rcc.c ****   * @note   After wakeup from SLEEP mode, the peripheral clock is enabled again.
2576:lib/src/stm32f4xx_rcc.c ****   * @note   By default, all peripheral clocks are enabled during SLEEP mode.
2577:lib/src/stm32f4xx_rcc.c ****   * @param  RCC_AHBPeriph: specifies the AHB3 peripheral to gates its clock.
2578:lib/src/stm32f4xx_rcc.c ****   *          This parameter must be: 
2579:lib/src/stm32f4xx_rcc.c ****   *           - RCC_AHB3Periph_FSMC or RCC_AHB3Periph_FMC (STM32F412xG/STM32F413_423xx/STM32F429x/4
2580:lib/src/stm32f4xx_rcc.c ****   *           - RCC_AHB3Periph_QSPI (STM32F412xG/STM32F413_423xx/STM32F446xx/STM32F469_479xx device
2581:lib/src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the specified peripheral clock.
2582:lib/src/stm32f4xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
2583:lib/src/stm32f4xx_rcc.c ****   * @retval None
2584:lib/src/stm32f4xx_rcc.c ****   */
2585:lib/src/stm32f4xx_rcc.c **** void RCC_AHB3PeriphClockLPModeCmd(uint32_t RCC_AHB3Periph, FunctionalState NewState)
2586:lib/src/stm32f4xx_rcc.c **** {
 1627              		.loc 1 2586 0
 1628              		.cfi_startproc
 1629              		@ args = 0, pretend = 0, frame = 0
 1630              		@ frame_needed = 0, uses_anonymous_args = 0
 1631              		@ link register save eliminated.
 1632              	.LVL165:
2587:lib/src/stm32f4xx_rcc.c ****   /* Check the parameters */
2588:lib/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));
2589:lib/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
2590:lib/src/stm32f4xx_rcc.c ****   if (NewState != DISABLE)
 1633              		.loc 1 2590 0
 1634 0000 21B1     		cbz	r1, .L168
2591:lib/src/stm32f4xx_rcc.c ****   {
2592:lib/src/stm32f4xx_rcc.c ****     RCC->AHB3LPENR |= RCC_AHB3Periph;
 1635              		.loc 1 2592 0
 1636 0002 054B     		ldr	r3, .L170
 1637 0004 9A6D     		ldr	r2, [r3, #88]
 1638 0006 1043     		orrs	r0, r0, r2
 1639              	.LVL166:
 1640 0008 9865     		str	r0, [r3, #88]
 1641 000a 7047     		bx	lr
 1642              	.LVL167:
 1643              	.L168:
2593:lib/src/stm32f4xx_rcc.c ****   }
2594:lib/src/stm32f4xx_rcc.c ****   else
2595:lib/src/stm32f4xx_rcc.c ****   {
2596:lib/src/stm32f4xx_rcc.c ****     RCC->AHB3LPENR &= ~RCC_AHB3Periph;
 1644              		.loc 1 2596 0
 1645 000c 024A     		ldr	r2, .L170
 1646 000e 936D     		ldr	r3, [r2, #88]
 1647 0010 23EA0000 		bic	r0, r3, r0
 1648              	.LVL168:
 1649 0014 9065     		str	r0, [r2, #88]
 1650 0016 7047     		bx	lr
 1651              	.L171:
 1652              		.align	2
ARM GAS  C:\Users\rinck\AppData\Local\Temp\ccnBBAPb.s 			page 74


 1653              	.L170:
 1654 0018 00380240 		.word	1073887232
 1655              		.cfi_endproc
 1656              	.LFE167:
 1658              		.section	.text.RCC_APB1PeriphClockLPModeCmd,"ax",%progbits
 1659              		.align	2
 1660              		.global	RCC_APB1PeriphClockLPModeCmd
 1661              		.thumb
 1662              		.thumb_func
 1664              	RCC_APB1PeriphClockLPModeCmd:
 1665              	.LFB168:
2597:lib/src/stm32f4xx_rcc.c ****   }
2598:lib/src/stm32f4xx_rcc.c **** }
2599:lib/src/stm32f4xx_rcc.c **** #endif /* STM32F40_41xxx || STM32F412xG || STM32F413_423xx || STM32F427_437xx || STM32F429_439xx ||
2600:lib/src/stm32f4xx_rcc.c **** 
2601:lib/src/stm32f4xx_rcc.c **** /**
2602:lib/src/stm32f4xx_rcc.c ****   * @brief  Enables or disables the APB1 peripheral clock during Low Power (Sleep) mode.
2603:lib/src/stm32f4xx_rcc.c ****   * @note   Peripheral clock gating in SLEEP mode can be used to further reduce
2604:lib/src/stm32f4xx_rcc.c ****   *         power consumption.
2605:lib/src/stm32f4xx_rcc.c ****   * @note   After wakeup from SLEEP mode, the peripheral clock is enabled again.
2606:lib/src/stm32f4xx_rcc.c ****   * @note   By default, all peripheral clocks are enabled during SLEEP mode.
2607:lib/src/stm32f4xx_rcc.c ****   * @param  RCC_APB1Periph: specifies the APB1 peripheral to gates its clock.
2608:lib/src/stm32f4xx_rcc.c ****   *          This parameter can be any combination of the following values:
2609:lib/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM2:   TIM2 clock
2610:lib/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM3:   TIM3 clock
2611:lib/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM4:   TIM4 clock
2612:lib/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM5:   TIM5 clock
2613:lib/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM6:   TIM6 clock
2614:lib/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM7:   TIM7 clock
2615:lib/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM12:  TIM12 clock
2616:lib/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM13:  TIM13 clock
2617:lib/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM14:  TIM14 clock
2618:lib/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_LPTIM1: LPTIM1 clock (STM32F410xx and STM32F413_423xx devices) 
2619:lib/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_WWDG:   WWDG clock
2620:lib/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_SPI2:   SPI2 clock
2621:lib/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_SPI3:   SPI3 clock
2622:lib/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_SPDIF:   SPDIF RX clock (STM32F446xx devices) 
2623:lib/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_USART2: USART2 clock
2624:lib/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_USART3: USART3 clock
2625:lib/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_UART4:  UART4 clock
2626:lib/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_UART5:  UART5 clock
2627:lib/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_I2C1:   I2C1 clock
2628:lib/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_I2C2:   I2C2 clock
2629:lib/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_I2C3:   I2C3 clock
2630:lib/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_FMPI2C1:   FMPI2C1 clock
2631:lib/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_CAN1:   CAN1 clock
2632:lib/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_CAN2:   CAN2 clock
2633:lib/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_CEC:    CEC clock (STM32F446xx devices)
2634:lib/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_PWR:    PWR clock
2635:lib/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_DAC:    DAC clock
2636:lib/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_UART7:  UART7 clock
2637:lib/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_UART8:  UART8 clock
2638:lib/src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the specified peripheral clock.
2639:lib/src/stm32f4xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
2640:lib/src/stm32f4xx_rcc.c ****   * @retval None
2641:lib/src/stm32f4xx_rcc.c ****   */
2642:lib/src/stm32f4xx_rcc.c **** void RCC_APB1PeriphClockLPModeCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
ARM GAS  C:\Users\rinck\AppData\Local\Temp\ccnBBAPb.s 			page 75


2643:lib/src/stm32f4xx_rcc.c **** {
 1666              		.loc 1 2643 0
 1667              		.cfi_startproc
 1668              		@ args = 0, pretend = 0, frame = 0
 1669              		@ frame_needed = 0, uses_anonymous_args = 0
 1670              		@ link register save eliminated.
 1671              	.LVL169:
2644:lib/src/stm32f4xx_rcc.c ****   /* Check the parameters */
2645:lib/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
2646:lib/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
2647:lib/src/stm32f4xx_rcc.c ****   if (NewState != DISABLE)
 1672              		.loc 1 2647 0
 1673 0000 21B1     		cbz	r1, .L173
2648:lib/src/stm32f4xx_rcc.c ****   {
2649:lib/src/stm32f4xx_rcc.c ****     RCC->APB1LPENR |= RCC_APB1Periph;
 1674              		.loc 1 2649 0
 1675 0002 054B     		ldr	r3, .L175
 1676 0004 1A6E     		ldr	r2, [r3, #96]
 1677 0006 1043     		orrs	r0, r0, r2
 1678              	.LVL170:
 1679 0008 1866     		str	r0, [r3, #96]
 1680 000a 7047     		bx	lr
 1681              	.LVL171:
 1682              	.L173:
2650:lib/src/stm32f4xx_rcc.c ****   }
2651:lib/src/stm32f4xx_rcc.c ****   else
2652:lib/src/stm32f4xx_rcc.c ****   {
2653:lib/src/stm32f4xx_rcc.c ****     RCC->APB1LPENR &= ~RCC_APB1Periph;
 1683              		.loc 1 2653 0
 1684 000c 024A     		ldr	r2, .L175
 1685 000e 136E     		ldr	r3, [r2, #96]
 1686 0010 23EA0000 		bic	r0, r3, r0
 1687              	.LVL172:
 1688 0014 1066     		str	r0, [r2, #96]
 1689 0016 7047     		bx	lr
 1690              	.L176:
 1691              		.align	2
 1692              	.L175:
 1693 0018 00380240 		.word	1073887232
 1694              		.cfi_endproc
 1695              	.LFE168:
 1697              		.section	.text.RCC_APB2PeriphClockLPModeCmd,"ax",%progbits
 1698              		.align	2
 1699              		.global	RCC_APB2PeriphClockLPModeCmd
 1700              		.thumb
 1701              		.thumb_func
 1703              	RCC_APB2PeriphClockLPModeCmd:
 1704              	.LFB169:
2654:lib/src/stm32f4xx_rcc.c ****   }
2655:lib/src/stm32f4xx_rcc.c **** }
2656:lib/src/stm32f4xx_rcc.c **** 
2657:lib/src/stm32f4xx_rcc.c **** /**
2658:lib/src/stm32f4xx_rcc.c ****   * @brief  Enables or disables the APB2 peripheral clock during Low Power (Sleep) mode.
2659:lib/src/stm32f4xx_rcc.c ****   * @note   Peripheral clock gating in SLEEP mode can be used to further reduce
2660:lib/src/stm32f4xx_rcc.c ****   *         power consumption.
2661:lib/src/stm32f4xx_rcc.c ****   * @note   After wakeup from SLEEP mode, the peripheral clock is enabled again.
2662:lib/src/stm32f4xx_rcc.c ****   * @note   By default, all peripheral clocks are enabled during SLEEP mode.
ARM GAS  C:\Users\rinck\AppData\Local\Temp\ccnBBAPb.s 			page 76


2663:lib/src/stm32f4xx_rcc.c ****   * @param  RCC_APB2Periph: specifies the APB2 peripheral to gates its clock.
2664:lib/src/stm32f4xx_rcc.c ****   *          This parameter can be any combination of the following values:
2665:lib/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_TIM1:   TIM1 clock
2666:lib/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_TIM8:   TIM8 clock
2667:lib/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_USART1: USART1 clock
2668:lib/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_USART6: USART6 clock
2669:lib/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_ADC1:   ADC1 clock
2670:lib/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_ADC2:   ADC2 clock
2671:lib/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_ADC3:   ADC3 clock
2672:lib/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_SDIO:   SDIO clock
2673:lib/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_SPI1:   SPI1 clock
2674:lib/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_SPI4:   SPI4 clock
2675:lib/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_SYSCFG: SYSCFG clock
2676:lib/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_EXTIT:  EXTIIT clock
2677:lib/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_TIM9:   TIM9 clock
2678:lib/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_TIM10:  TIM10 clock
2679:lib/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_TIM11:  TIM11 clock
2680:lib/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_SPI5:   SPI5 clock
2681:lib/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_SPI6:   SPI6 clock
2682:lib/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_SAI1:   SAI1 clock (STM32F42xxx/43xxx/446xx/469xx/479xx/413_423x
2683:lib/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_SAI2:   SAI2 clock (STM32F446xx devices)
2684:lib/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_LTDC:   LTDC clock (STM32F429xx/439xx devices)
2685:lib/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_DSI:    DSI clock (STM32F469_479xx devices)
2686:lib/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_DFSDM1: DFSDM Clock (STM32F412xG and STM32F413_423xx Devices)
2687:lib/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_DFSDM2: DFSDM2 Clock (STM32F413_423xx Devices)
2688:lib/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_UART9:  UART9 Clock (STM32F413_423xx Devices)
2689:lib/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_UART10: UART10 Clock (STM32F413_423xx Devices)
2690:lib/src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the specified peripheral clock.
2691:lib/src/stm32f4xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
2692:lib/src/stm32f4xx_rcc.c ****   * @retval None
2693:lib/src/stm32f4xx_rcc.c ****   */
2694:lib/src/stm32f4xx_rcc.c **** void RCC_APB2PeriphClockLPModeCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
2695:lib/src/stm32f4xx_rcc.c **** {
 1705              		.loc 1 2695 0
 1706              		.cfi_startproc
 1707              		@ args = 0, pretend = 0, frame = 0
 1708              		@ frame_needed = 0, uses_anonymous_args = 0
 1709              		@ link register save eliminated.
 1710              	.LVL173:
2696:lib/src/stm32f4xx_rcc.c ****   /* Check the parameters */
2697:lib/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
2698:lib/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
2699:lib/src/stm32f4xx_rcc.c ****   if (NewState != DISABLE)
 1711              		.loc 1 2699 0
 1712 0000 21B1     		cbz	r1, .L178
2700:lib/src/stm32f4xx_rcc.c ****   {
2701:lib/src/stm32f4xx_rcc.c ****     RCC->APB2LPENR |= RCC_APB2Periph;
 1713              		.loc 1 2701 0
 1714 0002 054B     		ldr	r3, .L180
 1715 0004 5A6E     		ldr	r2, [r3, #100]
 1716 0006 1043     		orrs	r0, r0, r2
 1717              	.LVL174:
 1718 0008 5866     		str	r0, [r3, #100]
 1719 000a 7047     		bx	lr
 1720              	.LVL175:
 1721              	.L178:
2702:lib/src/stm32f4xx_rcc.c ****   }
ARM GAS  C:\Users\rinck\AppData\Local\Temp\ccnBBAPb.s 			page 77


2703:lib/src/stm32f4xx_rcc.c ****   else
2704:lib/src/stm32f4xx_rcc.c ****   {
2705:lib/src/stm32f4xx_rcc.c ****     RCC->APB2LPENR &= ~RCC_APB2Periph;
 1722              		.loc 1 2705 0
 1723 000c 024A     		ldr	r2, .L180
 1724 000e 536E     		ldr	r3, [r2, #100]
 1725 0010 23EA0000 		bic	r0, r3, r0
 1726              	.LVL176:
 1727 0014 5066     		str	r0, [r2, #100]
 1728 0016 7047     		bx	lr
 1729              	.L181:
 1730              		.align	2
 1731              	.L180:
 1732 0018 00380240 		.word	1073887232
 1733              		.cfi_endproc
 1734              	.LFE169:
 1736              		.section	.text.RCC_LSEModeConfig,"ax",%progbits
 1737              		.align	2
 1738              		.global	RCC_LSEModeConfig
 1739              		.thumb
 1740              		.thumb_func
 1742              	RCC_LSEModeConfig:
 1743              	.LFB170:
2706:lib/src/stm32f4xx_rcc.c ****   }
2707:lib/src/stm32f4xx_rcc.c **** }
2708:lib/src/stm32f4xx_rcc.c **** 
2709:lib/src/stm32f4xx_rcc.c **** /**
2710:lib/src/stm32f4xx_rcc.c ****   * @brief Configures the External Low Speed oscillator mode (LSE mode).
2711:lib/src/stm32f4xx_rcc.c ****   * @note This mode is only available for STM32F410xx/STM32F411xx/STM32F446xx/STM32F469_479xx devic
2712:lib/src/stm32f4xx_rcc.c ****   * @param  Mode: specifies the LSE mode.
2713:lib/src/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
2714:lib/src/stm32f4xx_rcc.c ****   *            @arg RCC_LSE_LOWPOWER_MODE:  LSE oscillator in low power mode.
2715:lib/src/stm32f4xx_rcc.c ****   *            @arg RCC_LSE_HIGHDRIVE_MODE: LSE oscillator in High Drive mode.
2716:lib/src/stm32f4xx_rcc.c ****   * @retval None
2717:lib/src/stm32f4xx_rcc.c ****   */
2718:lib/src/stm32f4xx_rcc.c **** void RCC_LSEModeConfig(uint8_t RCC_Mode)
2719:lib/src/stm32f4xx_rcc.c **** {
 1744              		.loc 1 2719 0
 1745              		.cfi_startproc
 1746              		@ args = 0, pretend = 0, frame = 0
 1747              		@ frame_needed = 0, uses_anonymous_args = 0
 1748              		@ link register save eliminated.
 1749              	.LVL177:
2720:lib/src/stm32f4xx_rcc.c ****   /* Check the parameters */
2721:lib/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_LSE_MODE(RCC_Mode));
2722:lib/src/stm32f4xx_rcc.c ****   
2723:lib/src/stm32f4xx_rcc.c ****   if(RCC_Mode == RCC_LSE_HIGHDRIVE_MODE)
 1750              		.loc 1 2723 0
 1751 0000 0128     		cmp	r0, #1
 1752 0002 05D1     		bne	.L183
2724:lib/src/stm32f4xx_rcc.c ****   {
2725:lib/src/stm32f4xx_rcc.c ****     SET_BIT(RCC->BDCR, RCC_BDCR_LSEMOD);
 1753              		.loc 1 2725 0
 1754 0004 054A     		ldr	r2, .L185
 1755 0006 136F     		ldr	r3, [r2, #112]
 1756 0008 43F00803 		orr	r3, r3, #8
 1757 000c 1367     		str	r3, [r2, #112]
ARM GAS  C:\Users\rinck\AppData\Local\Temp\ccnBBAPb.s 			page 78


 1758 000e 7047     		bx	lr
 1759              	.L183:
2726:lib/src/stm32f4xx_rcc.c ****   }
2727:lib/src/stm32f4xx_rcc.c ****   else
2728:lib/src/stm32f4xx_rcc.c ****   {
2729:lib/src/stm32f4xx_rcc.c ****     CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEMOD);
 1760              		.loc 1 2729 0
 1761 0010 024A     		ldr	r2, .L185
 1762 0012 136F     		ldr	r3, [r2, #112]
 1763 0014 23F00803 		bic	r3, r3, #8
 1764 0018 1367     		str	r3, [r2, #112]
 1765 001a 7047     		bx	lr
 1766              	.L186:
 1767              		.align	2
 1768              	.L185:
 1769 001c 00380240 		.word	1073887232
 1770              		.cfi_endproc
 1771              	.LFE170:
 1773              		.section	.text.RCC_ITConfig,"ax",%progbits
 1774              		.align	2
 1775              		.global	RCC_ITConfig
 1776              		.thumb
 1777              		.thumb_func
 1779              	RCC_ITConfig:
 1780              	.LFB171:
2730:lib/src/stm32f4xx_rcc.c ****   }
2731:lib/src/stm32f4xx_rcc.c **** }
2732:lib/src/stm32f4xx_rcc.c **** 
2733:lib/src/stm32f4xx_rcc.c **** #if defined(STM32F410xx) || defined(STM32F413_423xx)
2734:lib/src/stm32f4xx_rcc.c **** /**
2735:lib/src/stm32f4xx_rcc.c ****   * @brief Configures the LPTIM1 clock Source.
2736:lib/src/stm32f4xx_rcc.c ****   * @note This feature is only available for STM32F410xx devices.
2737:lib/src/stm32f4xx_rcc.c ****   * @param RCC_ClockSource: specifies the LPTIM1 clock Source.
2738:lib/src/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
2739:lib/src/stm32f4xx_rcc.c ****   *            @arg RCC_LPTIM1CLKSOURCE_PCLK: LPTIM1 clock from APB1 selected.
2740:lib/src/stm32f4xx_rcc.c ****   *            @arg RCC_LPTIM1CLKSOURCE_HSI:  LPTIM1 clock from HSI selected.
2741:lib/src/stm32f4xx_rcc.c ****   *            @arg RCC_LPTIM1CLKSOURCE_LSI:  LPTIM1 clock from LSI selected.
2742:lib/src/stm32f4xx_rcc.c ****   *            @arg RCC_LPTIM1CLKSOURCE_LSE:  LPTIM1 clock from LSE selected.
2743:lib/src/stm32f4xx_rcc.c ****   * @retval None
2744:lib/src/stm32f4xx_rcc.c ****   */
2745:lib/src/stm32f4xx_rcc.c **** void RCC_LPTIM1ClockSourceConfig(uint32_t RCC_ClockSource)
2746:lib/src/stm32f4xx_rcc.c **** {
2747:lib/src/stm32f4xx_rcc.c ****   /* Check the parameters */
2748:lib/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_LPTIM1_CLOCKSOURCE(RCC_ClockSource));
2749:lib/src/stm32f4xx_rcc.c **** 
2750:lib/src/stm32f4xx_rcc.c ****   /* Clear LPTIM1 clock source selection source bits */
2751:lib/src/stm32f4xx_rcc.c ****   RCC->DCKCFGR2 &= ~RCC_DCKCFGR2_LPTIM1SEL;
2752:lib/src/stm32f4xx_rcc.c ****   /* Set new LPTIM1 clock source */
2753:lib/src/stm32f4xx_rcc.c ****   RCC->DCKCFGR2 |= RCC_ClockSource;
2754:lib/src/stm32f4xx_rcc.c **** }
2755:lib/src/stm32f4xx_rcc.c **** #endif /* STM32F410xx || STM32F413_423xx */
2756:lib/src/stm32f4xx_rcc.c **** 
2757:lib/src/stm32f4xx_rcc.c **** #if defined(STM32F469_479xx)
2758:lib/src/stm32f4xx_rcc.c **** /**
2759:lib/src/stm32f4xx_rcc.c ****   * @brief Configures the DSI clock Source.
2760:lib/src/stm32f4xx_rcc.c ****   * @note This feature is only available for STM32F469_479xx devices.
2761:lib/src/stm32f4xx_rcc.c ****   * @param RCC_ClockSource: specifies the DSI clock Source.
ARM GAS  C:\Users\rinck\AppData\Local\Temp\ccnBBAPb.s 			page 79


2762:lib/src/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
2763:lib/src/stm32f4xx_rcc.c ****   *            @arg RCC_DSICLKSource_PHY: DSI-PHY used as DSI byte lane clock source (usual case).
2764:lib/src/stm32f4xx_rcc.c ****   *            @arg RCC_DSICLKSource_PLLR: PLL_R used as DSI byte lane clock source, used in case D
2765:lib/src/stm32f4xx_rcc.c ****   * @retval None
2766:lib/src/stm32f4xx_rcc.c ****   */
2767:lib/src/stm32f4xx_rcc.c **** void RCC_DSIClockSourceConfig(uint8_t RCC_ClockSource)
2768:lib/src/stm32f4xx_rcc.c **** {
2769:lib/src/stm32f4xx_rcc.c ****   /* Check the parameters */
2770:lib/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_DSI_CLOCKSOURCE(RCC_ClockSource));
2771:lib/src/stm32f4xx_rcc.c ****   
2772:lib/src/stm32f4xx_rcc.c ****   if(RCC_ClockSource == RCC_DSICLKSource_PLLR)
2773:lib/src/stm32f4xx_rcc.c ****   {
2774:lib/src/stm32f4xx_rcc.c ****     SET_BIT(RCC->DCKCFGR, RCC_DCKCFGR_DSISEL);
2775:lib/src/stm32f4xx_rcc.c ****   }
2776:lib/src/stm32f4xx_rcc.c ****   else
2777:lib/src/stm32f4xx_rcc.c ****   {
2778:lib/src/stm32f4xx_rcc.c ****     CLEAR_BIT(RCC->DCKCFGR, RCC_DCKCFGR_DSISEL);
2779:lib/src/stm32f4xx_rcc.c ****   }
2780:lib/src/stm32f4xx_rcc.c **** }
2781:lib/src/stm32f4xx_rcc.c **** #endif /*  STM32F469_479xx */
2782:lib/src/stm32f4xx_rcc.c **** 
2783:lib/src/stm32f4xx_rcc.c **** #if defined(STM32F412xG) || defined(STM32F413_423xx) || defined(STM32F446xx) || defined(STM32F469_4
2784:lib/src/stm32f4xx_rcc.c **** /**
2785:lib/src/stm32f4xx_rcc.c ****   * @brief Configures the 48MHz clock Source.
2786:lib/src/stm32f4xx_rcc.c ****   * @note This feature is only available for STM32F446xx/STM32F469_479xx devices.
2787:lib/src/stm32f4xx_rcc.c ****   * @param RCC_ClockSource: specifies the 48MHz clock Source.
2788:lib/src/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
2789:lib/src/stm32f4xx_rcc.c ****   *            @arg RCC_48MHZCLKSource_PLL: 48MHz from PLL selected.
2790:lib/src/stm32f4xx_rcc.c ****   *            @arg RCC_48MHZCLKSource_PLLSAI: 48MHz from PLLSAI selected.
2791:lib/src/stm32f4xx_rcc.c ****   *            @arg RCC_CK48CLKSOURCE_PLLI2SQ : 48MHz from PLLI2SQ
2792:lib/src/stm32f4xx_rcc.c ****   * @retval None
2793:lib/src/stm32f4xx_rcc.c ****   */
2794:lib/src/stm32f4xx_rcc.c **** void RCC_48MHzClockSourceConfig(uint8_t RCC_ClockSource)
2795:lib/src/stm32f4xx_rcc.c **** {
2796:lib/src/stm32f4xx_rcc.c ****   /* Check the parameters */
2797:lib/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_48MHZ_CLOCKSOURCE(RCC_ClockSource));
2798:lib/src/stm32f4xx_rcc.c **** #if defined(STM32F469_479xx) 
2799:lib/src/stm32f4xx_rcc.c ****   if(RCC_ClockSource == RCC_48MHZCLKSource_PLLSAI)
2800:lib/src/stm32f4xx_rcc.c ****   {
2801:lib/src/stm32f4xx_rcc.c ****     SET_BIT(RCC->DCKCFGR, RCC_DCKCFGR_CK48MSEL);
2802:lib/src/stm32f4xx_rcc.c ****   }
2803:lib/src/stm32f4xx_rcc.c ****   else
2804:lib/src/stm32f4xx_rcc.c ****   {
2805:lib/src/stm32f4xx_rcc.c ****     CLEAR_BIT(RCC->DCKCFGR, RCC_DCKCFGR_CK48MSEL);
2806:lib/src/stm32f4xx_rcc.c ****   }
2807:lib/src/stm32f4xx_rcc.c **** #elif  defined(STM32F446xx)
2808:lib/src/stm32f4xx_rcc.c ****   if(RCC_ClockSource == RCC_48MHZCLKSource_PLLSAI)
2809:lib/src/stm32f4xx_rcc.c ****   {
2810:lib/src/stm32f4xx_rcc.c ****     SET_BIT(RCC->DCKCFGR2, RCC_DCKCFGR2_CK48MSEL);
2811:lib/src/stm32f4xx_rcc.c ****   }
2812:lib/src/stm32f4xx_rcc.c ****   else
2813:lib/src/stm32f4xx_rcc.c ****   {
2814:lib/src/stm32f4xx_rcc.c ****     CLEAR_BIT(RCC->DCKCFGR2, RCC_DCKCFGR2_CK48MSEL);
2815:lib/src/stm32f4xx_rcc.c ****   }
2816:lib/src/stm32f4xx_rcc.c **** #elif defined(STM32F412xG) || defined(STM32F413_423xx)
2817:lib/src/stm32f4xx_rcc.c ****   if(RCC_ClockSource == RCC_CK48CLKSOURCE_PLLI2SQ)
2818:lib/src/stm32f4xx_rcc.c ****   {
ARM GAS  C:\Users\rinck\AppData\Local\Temp\ccnBBAPb.s 			page 80


2819:lib/src/stm32f4xx_rcc.c ****     SET_BIT(RCC->DCKCFGR2, RCC_DCKCFGR2_CK48MSEL);
2820:lib/src/stm32f4xx_rcc.c ****   }
2821:lib/src/stm32f4xx_rcc.c ****   else
2822:lib/src/stm32f4xx_rcc.c ****   {
2823:lib/src/stm32f4xx_rcc.c ****     CLEAR_BIT(RCC->DCKCFGR2, RCC_DCKCFGR2_CK48MSEL);
2824:lib/src/stm32f4xx_rcc.c ****   }
2825:lib/src/stm32f4xx_rcc.c **** #else
2826:lib/src/stm32f4xx_rcc.c **** #endif /* STM32F469_479xx */  
2827:lib/src/stm32f4xx_rcc.c **** }
2828:lib/src/stm32f4xx_rcc.c **** 
2829:lib/src/stm32f4xx_rcc.c **** /**
2830:lib/src/stm32f4xx_rcc.c ****   * @brief Configures the SDIO clock Source.
2831:lib/src/stm32f4xx_rcc.c ****   * @note This feature is only available for STM32F469_479xx/STM32F446xx devices.
2832:lib/src/stm32f4xx_rcc.c ****   * @param RCC_ClockSource: specifies the SDIO clock Source.
2833:lib/src/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
2834:lib/src/stm32f4xx_rcc.c ****   *            @arg RCC_SDIOCLKSource_48MHZ: 48MHz clock selected.
2835:lib/src/stm32f4xx_rcc.c ****   *            @arg RCC_SDIOCLKSource_SYSCLK: system clock selected.
2836:lib/src/stm32f4xx_rcc.c ****   * @retval None
2837:lib/src/stm32f4xx_rcc.c ****   */
2838:lib/src/stm32f4xx_rcc.c **** void RCC_SDIOClockSourceConfig(uint8_t RCC_ClockSource)
2839:lib/src/stm32f4xx_rcc.c **** {
2840:lib/src/stm32f4xx_rcc.c ****   /* Check the parameters */
2841:lib/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_SDIO_CLOCKSOURCE(RCC_ClockSource));
2842:lib/src/stm32f4xx_rcc.c **** #if defined(STM32F469_479xx)   
2843:lib/src/stm32f4xx_rcc.c ****   if(RCC_ClockSource == RCC_SDIOCLKSource_SYSCLK)
2844:lib/src/stm32f4xx_rcc.c ****   {
2845:lib/src/stm32f4xx_rcc.c ****     SET_BIT(RCC->DCKCFGR, RCC_DCKCFGR_SDIOSEL);
2846:lib/src/stm32f4xx_rcc.c ****   }
2847:lib/src/stm32f4xx_rcc.c ****   else
2848:lib/src/stm32f4xx_rcc.c ****   {
2849:lib/src/stm32f4xx_rcc.c ****     CLEAR_BIT(RCC->DCKCFGR, RCC_DCKCFGR_SDIOSEL);
2850:lib/src/stm32f4xx_rcc.c ****   }
2851:lib/src/stm32f4xx_rcc.c **** #elif defined(STM32F412xG) || defined(STM32F413_423xx) || defined(STM32F446xx)
2852:lib/src/stm32f4xx_rcc.c ****   if(RCC_ClockSource == RCC_SDIOCLKSource_SYSCLK)
2853:lib/src/stm32f4xx_rcc.c ****   {
2854:lib/src/stm32f4xx_rcc.c ****     SET_BIT(RCC->DCKCFGR2, RCC_DCKCFGR2_SDIOSEL);
2855:lib/src/stm32f4xx_rcc.c ****   }
2856:lib/src/stm32f4xx_rcc.c ****   else
2857:lib/src/stm32f4xx_rcc.c ****   {
2858:lib/src/stm32f4xx_rcc.c ****     CLEAR_BIT(RCC->DCKCFGR2, RCC_DCKCFGR2_SDIOSEL);
2859:lib/src/stm32f4xx_rcc.c ****   }
2860:lib/src/stm32f4xx_rcc.c **** #else
2861:lib/src/stm32f4xx_rcc.c **** #endif /* STM32F469_479xx */ 
2862:lib/src/stm32f4xx_rcc.c **** }
2863:lib/src/stm32f4xx_rcc.c **** #endif /* STM32F412xG || STM32F413_423xx || STM32F446xx || STM32F469_479xx */
2864:lib/src/stm32f4xx_rcc.c **** 
2865:lib/src/stm32f4xx_rcc.c **** #if defined(STM32F446xx)
2866:lib/src/stm32f4xx_rcc.c **** /**
2867:lib/src/stm32f4xx_rcc.c ****   * @brief  Enables or disables the AHB1 clock gating for the specified IPs.
2868:lib/src/stm32f4xx_rcc.c ****   * @note This feature is only available for STM32F446xx devices.
2869:lib/src/stm32f4xx_rcc.c ****   * @param  RCC_AHB1ClockGating: specifies the AHB1 clock gating.
2870:lib/src/stm32f4xx_rcc.c ****   *          This parameter can be any combination of the following values:
2871:lib/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1ClockGating_APB1Bridge: AHB1 to APB1 clock
2872:lib/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1ClockGating_APB2Bridge: AHB1 to APB2 clock 
2873:lib/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1ClockGating_CM4DBG: Cortex M4 ETM clock
2874:lib/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1ClockGating_SPARE: Spare clock
2875:lib/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1ClockGating_SRAM: SRAM controller clock
ARM GAS  C:\Users\rinck\AppData\Local\Temp\ccnBBAPb.s 			page 81


2876:lib/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1ClockGating_FLITF: Flash interface clock
2877:lib/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1ClockGating_RCC: RCC clock
2878:lib/src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the specified peripheral clock.
2879:lib/src/stm32f4xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
2880:lib/src/stm32f4xx_rcc.c ****   * @retval None
2881:lib/src/stm32f4xx_rcc.c ****   */
2882:lib/src/stm32f4xx_rcc.c **** void RCC_AHB1ClockGatingCmd(uint32_t RCC_AHB1ClockGating, FunctionalState NewState)
2883:lib/src/stm32f4xx_rcc.c **** {
2884:lib/src/stm32f4xx_rcc.c ****   /* Check the parameters */
2885:lib/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_AHB1_CLOCKGATING(RCC_AHB1ClockGating));
2886:lib/src/stm32f4xx_rcc.c **** 
2887:lib/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
2888:lib/src/stm32f4xx_rcc.c ****   if (NewState != DISABLE)
2889:lib/src/stm32f4xx_rcc.c ****   {
2890:lib/src/stm32f4xx_rcc.c ****     RCC->CKGATENR &= ~RCC_AHB1ClockGating;
2891:lib/src/stm32f4xx_rcc.c ****   }
2892:lib/src/stm32f4xx_rcc.c ****   else
2893:lib/src/stm32f4xx_rcc.c ****   {
2894:lib/src/stm32f4xx_rcc.c ****     RCC->CKGATENR |= RCC_AHB1ClockGating;
2895:lib/src/stm32f4xx_rcc.c ****   }
2896:lib/src/stm32f4xx_rcc.c **** }
2897:lib/src/stm32f4xx_rcc.c **** 
2898:lib/src/stm32f4xx_rcc.c **** /**
2899:lib/src/stm32f4xx_rcc.c ****   * @brief Configures the SPDIFRX clock Source.
2900:lib/src/stm32f4xx_rcc.c ****   * @note This feature is only available for STM32F446xx devices.
2901:lib/src/stm32f4xx_rcc.c ****   * @param RCC_ClockSource: specifies the SPDIFRX clock Source.
2902:lib/src/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
2903:lib/src/stm32f4xx_rcc.c ****   *            @arg RCC_SPDIFRXCLKSource_PLLR: SPDIFRX clock from PLL_R selected.
2904:lib/src/stm32f4xx_rcc.c ****   *            @arg RCC_SPDIFRXCLKSource_PLLI2SP: SPDIFRX clock from PLLI2S_P selected.
2905:lib/src/stm32f4xx_rcc.c ****   * @retval None
2906:lib/src/stm32f4xx_rcc.c ****   */
2907:lib/src/stm32f4xx_rcc.c **** void RCC_SPDIFRXClockSourceConfig(uint8_t RCC_ClockSource)
2908:lib/src/stm32f4xx_rcc.c **** {
2909:lib/src/stm32f4xx_rcc.c ****   /* Check the parameters */
2910:lib/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_SPDIFRX_CLOCKSOURCE(RCC_ClockSource));
2911:lib/src/stm32f4xx_rcc.c ****   
2912:lib/src/stm32f4xx_rcc.c ****   if(RCC_ClockSource == RCC_SPDIFRXCLKSource_PLLI2SP)
2913:lib/src/stm32f4xx_rcc.c ****   {
2914:lib/src/stm32f4xx_rcc.c ****     SET_BIT(RCC->DCKCFGR2, RCC_DCKCFGR2_SPDIFRXSEL);
2915:lib/src/stm32f4xx_rcc.c ****   }
2916:lib/src/stm32f4xx_rcc.c ****   else
2917:lib/src/stm32f4xx_rcc.c ****   {
2918:lib/src/stm32f4xx_rcc.c ****     CLEAR_BIT(RCC->DCKCFGR2, RCC_DCKCFGR2_SPDIFRXSEL);
2919:lib/src/stm32f4xx_rcc.c ****   }
2920:lib/src/stm32f4xx_rcc.c **** }
2921:lib/src/stm32f4xx_rcc.c **** 
2922:lib/src/stm32f4xx_rcc.c **** /**
2923:lib/src/stm32f4xx_rcc.c ****   * @brief Configures the CEC clock Source.
2924:lib/src/stm32f4xx_rcc.c ****   * @note This feature is only available for STM32F446xx devices.
2925:lib/src/stm32f4xx_rcc.c ****   * @param RCC_ClockSource: specifies the CEC clock Source.
2926:lib/src/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
2927:lib/src/stm32f4xx_rcc.c ****   *            @arg RCC_CECCLKSource_HSIDiv488: CEC clock from HSI/488 selected.
2928:lib/src/stm32f4xx_rcc.c ****   *            @arg RCC_CECCLKSource_LSE: CEC clock from LSE selected.
2929:lib/src/stm32f4xx_rcc.c ****   * @retval None
2930:lib/src/stm32f4xx_rcc.c ****   */
2931:lib/src/stm32f4xx_rcc.c **** void RCC_CECClockSourceConfig(uint8_t RCC_ClockSource)
2932:lib/src/stm32f4xx_rcc.c **** {
ARM GAS  C:\Users\rinck\AppData\Local\Temp\ccnBBAPb.s 			page 82


2933:lib/src/stm32f4xx_rcc.c ****   /* Check the parameters */
2934:lib/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_CEC_CLOCKSOURCE(RCC_ClockSource));
2935:lib/src/stm32f4xx_rcc.c ****   
2936:lib/src/stm32f4xx_rcc.c ****   if(RCC_ClockSource == RCC_CECCLKSource_LSE)
2937:lib/src/stm32f4xx_rcc.c ****   {
2938:lib/src/stm32f4xx_rcc.c ****     SET_BIT(RCC->DCKCFGR2, RCC_DCKCFGR2_CECSEL);
2939:lib/src/stm32f4xx_rcc.c ****   }
2940:lib/src/stm32f4xx_rcc.c ****   else
2941:lib/src/stm32f4xx_rcc.c ****   {
2942:lib/src/stm32f4xx_rcc.c ****     CLEAR_BIT(RCC->DCKCFGR2, RCC_DCKCFGR2_CECSEL);
2943:lib/src/stm32f4xx_rcc.c ****   }
2944:lib/src/stm32f4xx_rcc.c **** }
2945:lib/src/stm32f4xx_rcc.c **** #endif /* STM32F446xx */
2946:lib/src/stm32f4xx_rcc.c **** 
2947:lib/src/stm32f4xx_rcc.c **** #if defined(STM32F410xx) || defined(STM32F412xG) || defined(STM32F413_423xx) || defined(STM32F446xx
2948:lib/src/stm32f4xx_rcc.c **** /**
2949:lib/src/stm32f4xx_rcc.c ****   * @brief Configures the FMPI2C1 clock Source.
2950:lib/src/stm32f4xx_rcc.c ****   * @note This feature is only available for STM32F446xx devices.
2951:lib/src/stm32f4xx_rcc.c ****   * @param RCC_ClockSource: specifies the FMPI2C1 clock Source.
2952:lib/src/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
2953:lib/src/stm32f4xx_rcc.c ****   *            @arg RCC_FMPI2C1CLKSource_APB1: FMPI2C1 clock from APB1 selected.
2954:lib/src/stm32f4xx_rcc.c ****   *            @arg RCC_FMPI2C1CLKSource_SYSCLK: FMPI2C1 clock from Sytem clock selected.
2955:lib/src/stm32f4xx_rcc.c ****   *            @arg RCC_FMPI2C1CLKSource_HSI: FMPI2C1 clock from HSI selected.
2956:lib/src/stm32f4xx_rcc.c ****   * @retval None
2957:lib/src/stm32f4xx_rcc.c ****   */
2958:lib/src/stm32f4xx_rcc.c **** void RCC_FMPI2C1ClockSourceConfig(uint32_t RCC_ClockSource)
2959:lib/src/stm32f4xx_rcc.c **** {
2960:lib/src/stm32f4xx_rcc.c ****   /* Check the parameters */
2961:lib/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_FMPI2C1_CLOCKSOURCE(RCC_ClockSource));
2962:lib/src/stm32f4xx_rcc.c **** 
2963:lib/src/stm32f4xx_rcc.c ****   /* Clear FMPI2C1 clock source selection source bits */
2964:lib/src/stm32f4xx_rcc.c ****   RCC->DCKCFGR2 &= ~RCC_DCKCFGR2_FMPI2C1SEL;
2965:lib/src/stm32f4xx_rcc.c ****   /* Set new FMPI2C1 clock source */
2966:lib/src/stm32f4xx_rcc.c ****   RCC->DCKCFGR2 |= RCC_ClockSource;
2967:lib/src/stm32f4xx_rcc.c **** }
2968:lib/src/stm32f4xx_rcc.c **** #endif /* STM32F410xx || STM32F412xG || STM32F413_423xx || STM32F446xx */
2969:lib/src/stm32f4xx_rcc.c **** /**
2970:lib/src/stm32f4xx_rcc.c ****   * @}
2971:lib/src/stm32f4xx_rcc.c ****   */
2972:lib/src/stm32f4xx_rcc.c **** 
2973:lib/src/stm32f4xx_rcc.c **** #if defined(STM32F410xx)
2974:lib/src/stm32f4xx_rcc.c **** /**
2975:lib/src/stm32f4xx_rcc.c ****   * @brief  Enables or disables the MCO1.
2976:lib/src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the MCO1.
2977:lib/src/stm32f4xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
2978:lib/src/stm32f4xx_rcc.c ****   * @retval None
2979:lib/src/stm32f4xx_rcc.c ****   */
2980:lib/src/stm32f4xx_rcc.c **** void RCC_MCO1Cmd(FunctionalState NewState)
2981:lib/src/stm32f4xx_rcc.c **** {
2982:lib/src/stm32f4xx_rcc.c ****   /* Check the parameters */
2983:lib/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
2984:lib/src/stm32f4xx_rcc.c **** 
2985:lib/src/stm32f4xx_rcc.c ****   *(__IO uint32_t *) RCC_CFGR_MCO1EN_BB = (uint32_t)NewState;
2986:lib/src/stm32f4xx_rcc.c **** }
2987:lib/src/stm32f4xx_rcc.c **** 
2988:lib/src/stm32f4xx_rcc.c **** /**
2989:lib/src/stm32f4xx_rcc.c ****   * @brief  Enables or disables the MCO2.
ARM GAS  C:\Users\rinck\AppData\Local\Temp\ccnBBAPb.s 			page 83


2990:lib/src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the MCO2.
2991:lib/src/stm32f4xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
2992:lib/src/stm32f4xx_rcc.c ****   * @retval None
2993:lib/src/stm32f4xx_rcc.c ****   */
2994:lib/src/stm32f4xx_rcc.c **** void RCC_MCO2Cmd(FunctionalState NewState)
2995:lib/src/stm32f4xx_rcc.c **** {
2996:lib/src/stm32f4xx_rcc.c ****   /* Check the parameters */
2997:lib/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
2998:lib/src/stm32f4xx_rcc.c **** 
2999:lib/src/stm32f4xx_rcc.c ****   *(__IO uint32_t *) RCC_CFGR_MCO2EN_BB = (uint32_t)NewState;
3000:lib/src/stm32f4xx_rcc.c **** }
3001:lib/src/stm32f4xx_rcc.c **** #endif /* STM32F410xx */
3002:lib/src/stm32f4xx_rcc.c **** 
3003:lib/src/stm32f4xx_rcc.c **** /** @defgroup RCC_Group4 Interrupts and flags management functions
3004:lib/src/stm32f4xx_rcc.c ****  *  @brief   Interrupts and flags management functions 
3005:lib/src/stm32f4xx_rcc.c ****  *
3006:lib/src/stm32f4xx_rcc.c **** @verbatim   
3007:lib/src/stm32f4xx_rcc.c ****  ===============================================================================
3008:lib/src/stm32f4xx_rcc.c ****                 ##### Interrupts and flags management functions #####
3009:lib/src/stm32f4xx_rcc.c ****  ===============================================================================  
3010:lib/src/stm32f4xx_rcc.c **** 
3011:lib/src/stm32f4xx_rcc.c **** @endverbatim
3012:lib/src/stm32f4xx_rcc.c ****   * @{
3013:lib/src/stm32f4xx_rcc.c ****   */
3014:lib/src/stm32f4xx_rcc.c **** 
3015:lib/src/stm32f4xx_rcc.c **** /**
3016:lib/src/stm32f4xx_rcc.c ****   * @brief  Enables or disables the specified RCC interrupts.
3017:lib/src/stm32f4xx_rcc.c ****   * @param  RCC_IT: specifies the RCC interrupt sources to be enabled or disabled.
3018:lib/src/stm32f4xx_rcc.c ****   *          This parameter can be any combination of the following values:
3019:lib/src/stm32f4xx_rcc.c ****   *            @arg RCC_IT_LSIRDY: LSI ready interrupt
3020:lib/src/stm32f4xx_rcc.c ****   *            @arg RCC_IT_LSERDY: LSE ready interrupt
3021:lib/src/stm32f4xx_rcc.c ****   *            @arg RCC_IT_HSIRDY: HSI ready interrupt
3022:lib/src/stm32f4xx_rcc.c ****   *            @arg RCC_IT_HSERDY: HSE ready interrupt
3023:lib/src/stm32f4xx_rcc.c ****   *            @arg RCC_IT_PLLRDY: main PLL ready interrupt
3024:lib/src/stm32f4xx_rcc.c ****   *            @arg RCC_IT_PLLI2SRDY: PLLI2S ready interrupt
3025:lib/src/stm32f4xx_rcc.c ****   *            @arg RCC_IT_PLLSAIRDY: PLLSAI ready interrupt (only for STM32F42xxx/43xxx/446xx/469x
3026:lib/src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the specified RCC interrupts.
3027:lib/src/stm32f4xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
3028:lib/src/stm32f4xx_rcc.c ****   * @retval None
3029:lib/src/stm32f4xx_rcc.c ****   */
3030:lib/src/stm32f4xx_rcc.c **** void RCC_ITConfig(uint8_t RCC_IT, FunctionalState NewState)
3031:lib/src/stm32f4xx_rcc.c **** {
 1781              		.loc 1 3031 0
 1782              		.cfi_startproc
 1783              		@ args = 0, pretend = 0, frame = 0
 1784              		@ frame_needed = 0, uses_anonymous_args = 0
 1785              		@ link register save eliminated.
 1786              	.LVL178:
3032:lib/src/stm32f4xx_rcc.c ****   /* Check the parameters */
3033:lib/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_IT(RCC_IT));
3034:lib/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
3035:lib/src/stm32f4xx_rcc.c ****   if (NewState != DISABLE)
 1787              		.loc 1 3035 0
 1788 0000 21B1     		cbz	r1, .L188
3036:lib/src/stm32f4xx_rcc.c ****   {
3037:lib/src/stm32f4xx_rcc.c ****     /* Perform Byte access to RCC_CIR[14:8] bits to enable the selected interrupts */
3038:lib/src/stm32f4xx_rcc.c ****     *(__IO uint8_t *) CIR_BYTE2_ADDRESS |= RCC_IT;
ARM GAS  C:\Users\rinck\AppData\Local\Temp\ccnBBAPb.s 			page 84


 1789              		.loc 1 3038 0
 1790 0002 054B     		ldr	r3, .L190
 1791 0004 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 1792 0006 1043     		orrs	r0, r0, r2
 1793              	.LVL179:
 1794 0008 1870     		strb	r0, [r3]
 1795 000a 7047     		bx	lr
 1796              	.LVL180:
 1797              	.L188:
3039:lib/src/stm32f4xx_rcc.c ****   }
3040:lib/src/stm32f4xx_rcc.c ****   else
3041:lib/src/stm32f4xx_rcc.c ****   {
3042:lib/src/stm32f4xx_rcc.c ****     /* Perform Byte access to RCC_CIR[14:8] bits to disable the selected interrupts */
3043:lib/src/stm32f4xx_rcc.c ****     *(__IO uint8_t *) CIR_BYTE2_ADDRESS &= (uint8_t)~RCC_IT;
 1798              		.loc 1 3043 0
 1799 000c 024A     		ldr	r2, .L190
 1800 000e 1378     		ldrb	r3, [r2]	@ zero_extendqisi2
 1801 0010 23EA0000 		bic	r0, r3, r0
 1802              	.LVL181:
 1803 0014 1070     		strb	r0, [r2]
 1804 0016 7047     		bx	lr
 1805              	.L191:
 1806              		.align	2
 1807              	.L190:
 1808 0018 0D380240 		.word	1073887245
 1809              		.cfi_endproc
 1810              	.LFE171:
 1812              		.section	.text.RCC_GetFlagStatus,"ax",%progbits
 1813              		.align	2
 1814              		.global	RCC_GetFlagStatus
 1815              		.thumb
 1816              		.thumb_func
 1818              	RCC_GetFlagStatus:
 1819              	.LFB172:
3044:lib/src/stm32f4xx_rcc.c ****   }
3045:lib/src/stm32f4xx_rcc.c **** }
3046:lib/src/stm32f4xx_rcc.c **** 
3047:lib/src/stm32f4xx_rcc.c **** /**
3048:lib/src/stm32f4xx_rcc.c ****   * @brief  Checks whether the specified RCC flag is set or not.
3049:lib/src/stm32f4xx_rcc.c ****   * @param  RCC_FLAG: specifies the flag to check.
3050:lib/src/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
3051:lib/src/stm32f4xx_rcc.c ****   *            @arg RCC_FLAG_HSIRDY: HSI oscillator clock ready
3052:lib/src/stm32f4xx_rcc.c ****   *            @arg RCC_FLAG_HSERDY: HSE oscillator clock ready
3053:lib/src/stm32f4xx_rcc.c ****   *            @arg RCC_FLAG_PLLRDY: main PLL clock ready
3054:lib/src/stm32f4xx_rcc.c ****   *            @arg RCC_FLAG_PLLI2SRDY: PLLI2S clock ready
3055:lib/src/stm32f4xx_rcc.c ****   *            @arg RCC_FLAG_PLLSAIRDY: PLLSAI clock ready (only for STM32F42xxx/43xxx/446xx/469xx/
3056:lib/src/stm32f4xx_rcc.c ****   *            @arg RCC_FLAG_LSERDY: LSE oscillator clock ready
3057:lib/src/stm32f4xx_rcc.c ****   *            @arg RCC_FLAG_LSIRDY: LSI oscillator clock ready
3058:lib/src/stm32f4xx_rcc.c ****   *            @arg RCC_FLAG_BORRST: POR/PDR or BOR reset
3059:lib/src/stm32f4xx_rcc.c ****   *            @arg RCC_FLAG_PINRST: Pin reset
3060:lib/src/stm32f4xx_rcc.c ****   *            @arg RCC_FLAG_PORRST: POR/PDR reset
3061:lib/src/stm32f4xx_rcc.c ****   *            @arg RCC_FLAG_SFTRST: Software reset
3062:lib/src/stm32f4xx_rcc.c ****   *            @arg RCC_FLAG_IWDGRST: Independent Watchdog reset
3063:lib/src/stm32f4xx_rcc.c ****   *            @arg RCC_FLAG_WWDGRST: Window Watchdog reset
3064:lib/src/stm32f4xx_rcc.c ****   *            @arg RCC_FLAG_LPWRRST: Low Power reset
3065:lib/src/stm32f4xx_rcc.c ****   * @retval The new state of RCC_FLAG (SET or RESET).
3066:lib/src/stm32f4xx_rcc.c ****   */
ARM GAS  C:\Users\rinck\AppData\Local\Temp\ccnBBAPb.s 			page 85


3067:lib/src/stm32f4xx_rcc.c **** FlagStatus RCC_GetFlagStatus(uint8_t RCC_FLAG)
3068:lib/src/stm32f4xx_rcc.c **** {
 1820              		.loc 1 3068 0
 1821              		.cfi_startproc
 1822              		@ args = 0, pretend = 0, frame = 0
 1823              		@ frame_needed = 0, uses_anonymous_args = 0
 1824              		@ link register save eliminated.
 1825              	.LVL182:
3069:lib/src/stm32f4xx_rcc.c ****   uint32_t tmp = 0;
3070:lib/src/stm32f4xx_rcc.c ****   uint32_t statusreg = 0;
3071:lib/src/stm32f4xx_rcc.c ****   FlagStatus bitstatus = RESET;
3072:lib/src/stm32f4xx_rcc.c **** 
3073:lib/src/stm32f4xx_rcc.c ****   /* Check the parameters */
3074:lib/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_FLAG(RCC_FLAG));
3075:lib/src/stm32f4xx_rcc.c **** 
3076:lib/src/stm32f4xx_rcc.c ****   /* Get the RCC register index */
3077:lib/src/stm32f4xx_rcc.c ****   tmp = RCC_FLAG >> 5;
 1826              		.loc 1 3077 0
 1827 0000 4309     		lsrs	r3, r0, #5
 1828              	.LVL183:
3078:lib/src/stm32f4xx_rcc.c ****   if (tmp == 1)               /* The flag to check is in CR register */
 1829              		.loc 1 3078 0
 1830 0002 012B     		cmp	r3, #1
 1831 0004 02D1     		bne	.L193
3079:lib/src/stm32f4xx_rcc.c ****   {
3080:lib/src/stm32f4xx_rcc.c ****     statusreg = RCC->CR;
 1832              		.loc 1 3080 0
 1833 0006 0A4B     		ldr	r3, .L198
 1834              	.LVL184:
 1835 0008 1B68     		ldr	r3, [r3]
 1836              	.LVL185:
 1837 000a 06E0     		b	.L194
 1838              	.LVL186:
 1839              	.L193:
3081:lib/src/stm32f4xx_rcc.c ****   }
3082:lib/src/stm32f4xx_rcc.c ****   else if (tmp == 2)          /* The flag to check is in BDCR register */
 1840              		.loc 1 3082 0
 1841 000c 022B     		cmp	r3, #2
 1842 000e 02D1     		bne	.L195
3083:lib/src/stm32f4xx_rcc.c ****   {
3084:lib/src/stm32f4xx_rcc.c ****     statusreg = RCC->BDCR;
 1843              		.loc 1 3084 0
 1844 0010 074B     		ldr	r3, .L198
 1845              	.LVL187:
 1846 0012 1B6F     		ldr	r3, [r3, #112]
 1847              	.LVL188:
 1848 0014 01E0     		b	.L194
 1849              	.LVL189:
 1850              	.L195:
3085:lib/src/stm32f4xx_rcc.c ****   }
3086:lib/src/stm32f4xx_rcc.c ****   else                       /* The flag to check is in CSR register */
3087:lib/src/stm32f4xx_rcc.c ****   {
3088:lib/src/stm32f4xx_rcc.c ****     statusreg = RCC->CSR;
 1851              		.loc 1 3088 0
 1852 0016 064B     		ldr	r3, .L198
 1853              	.LVL190:
 1854 0018 5B6F     		ldr	r3, [r3, #116]
ARM GAS  C:\Users\rinck\AppData\Local\Temp\ccnBBAPb.s 			page 86


 1855              	.LVL191:
 1856              	.L194:
3089:lib/src/stm32f4xx_rcc.c ****   }
3090:lib/src/stm32f4xx_rcc.c **** 
3091:lib/src/stm32f4xx_rcc.c ****   /* Get the flag position */
3092:lib/src/stm32f4xx_rcc.c ****   tmp = RCC_FLAG & FLAG_MASK;
 1857              		.loc 1 3092 0
 1858 001a 00F01F00 		and	r0, r0, #31
 1859              	.LVL192:
3093:lib/src/stm32f4xx_rcc.c ****   if ((statusreg & ((uint32_t)1 << tmp)) != (uint32_t)RESET)
 1860              		.loc 1 3093 0
 1861 001e 23FA00F0 		lsr	r0, r3, r0
 1862              	.LVL193:
 1863 0022 10F0010F 		tst	r0, #1
 1864 0026 01D0     		beq	.L197
3094:lib/src/stm32f4xx_rcc.c ****   {
3095:lib/src/stm32f4xx_rcc.c ****     bitstatus = SET;
 1865              		.loc 1 3095 0
 1866 0028 0120     		movs	r0, #1
 1867 002a 7047     		bx	lr
 1868              	.L197:
3096:lib/src/stm32f4xx_rcc.c ****   }
3097:lib/src/stm32f4xx_rcc.c ****   else
3098:lib/src/stm32f4xx_rcc.c ****   {
3099:lib/src/stm32f4xx_rcc.c ****     bitstatus = RESET;
 1869              		.loc 1 3099 0
 1870 002c 0020     		movs	r0, #0
 1871              	.LVL194:
3100:lib/src/stm32f4xx_rcc.c ****   }
3101:lib/src/stm32f4xx_rcc.c ****   /* Return the flag status */
3102:lib/src/stm32f4xx_rcc.c ****   return bitstatus;
3103:lib/src/stm32f4xx_rcc.c **** }
 1872              		.loc 1 3103 0
 1873 002e 7047     		bx	lr
 1874              	.L199:
 1875              		.align	2
 1876              	.L198:
 1877 0030 00380240 		.word	1073887232
 1878              		.cfi_endproc
 1879              	.LFE172:
 1881              		.section	.text.RCC_WaitForHSEStartUp,"ax",%progbits
 1882              		.align	2
 1883              		.global	RCC_WaitForHSEStartUp
 1884              		.thumb
 1885              		.thumb_func
 1887              	RCC_WaitForHSEStartUp:
 1888              	.LFB125:
 309:lib/src/stm32f4xx_rcc.c ****   __IO uint32_t startupcounter = 0;
 1889              		.loc 1 309 0
 1890              		.cfi_startproc
 1891              		@ args = 0, pretend = 0, frame = 8
 1892              		@ frame_needed = 0, uses_anonymous_args = 0
 1893 0000 00B5     		push	{lr}
 1894              	.LCFI2:
 1895              		.cfi_def_cfa_offset 4
 1896              		.cfi_offset 14, -4
 1897 0002 83B0     		sub	sp, sp, #12
ARM GAS  C:\Users\rinck\AppData\Local\Temp\ccnBBAPb.s 			page 87


 1898              	.LCFI3:
 1899              		.cfi_def_cfa_offset 16
 310:lib/src/stm32f4xx_rcc.c ****   ErrorStatus status = ERROR;
 1900              		.loc 1 310 0
 1901 0004 0023     		movs	r3, #0
 1902 0006 0193     		str	r3, [sp, #4]
 1903              	.LVL195:
 1904              	.L202:
 316:lib/src/stm32f4xx_rcc.c ****     startupcounter++;
 1905              		.loc 1 316 0 discriminator 2
 1906 0008 3120     		movs	r0, #49
 1907 000a FFF7FEFF 		bl	RCC_GetFlagStatus
 1908              	.LVL196:
 317:lib/src/stm32f4xx_rcc.c ****   } while((startupcounter != HSE_STARTUP_TIMEOUT) && (hsestatus == RESET));
 1909              		.loc 1 317 0 discriminator 2
 1910 000e 019B     		ldr	r3, [sp, #4]
 1911 0010 0133     		adds	r3, r3, #1
 1912 0012 0193     		str	r3, [sp, #4]
 318:lib/src/stm32f4xx_rcc.c **** 
 1913              		.loc 1 318 0 discriminator 2
 1914 0014 019B     		ldr	r3, [sp, #4]
 1915 0016 B3F5A04F 		cmp	r3, #20480
 1916 001a 01D0     		beq	.L201
 318:lib/src/stm32f4xx_rcc.c **** 
 1917              		.loc 1 318 0 is_stmt 0 discriminator 1
 1918 001c 0028     		cmp	r0, #0
 1919 001e F3D0     		beq	.L202
 1920              	.L201:
 320:lib/src/stm32f4xx_rcc.c ****   {
 1921              		.loc 1 320 0 is_stmt 1
 1922 0020 3120     		movs	r0, #49
 1923              	.LVL197:
 1924 0022 FFF7FEFF 		bl	RCC_GetFlagStatus
 1925              	.LVL198:
 1926 0026 08B1     		cbz	r0, .L204
 322:lib/src/stm32f4xx_rcc.c ****   }
 1927              		.loc 1 322 0
 1928 0028 0120     		movs	r0, #1
 1929 002a 00E0     		b	.L203
 1930              	.L204:
 326:lib/src/stm32f4xx_rcc.c ****   }
 1931              		.loc 1 326 0
 1932 002c 0020     		movs	r0, #0
 1933              	.L203:
 1934              	.LVL199:
 329:lib/src/stm32f4xx_rcc.c **** 
 1935              		.loc 1 329 0
 1936 002e 03B0     		add	sp, sp, #12
 1937              	.LCFI4:
 1938              		.cfi_def_cfa_offset 4
 1939              		@ sp needed
 1940 0030 5DF804FB 		ldr	pc, [sp], #4
 1941              		.cfi_endproc
 1942              	.LFE125:
 1944              		.section	.text.RCC_ClearFlag,"ax",%progbits
 1945              		.align	2
 1946              		.global	RCC_ClearFlag
ARM GAS  C:\Users\rinck\AppData\Local\Temp\ccnBBAPb.s 			page 88


 1947              		.thumb
 1948              		.thumb_func
 1950              	RCC_ClearFlag:
 1951              	.LFB173:
3104:lib/src/stm32f4xx_rcc.c **** 
3105:lib/src/stm32f4xx_rcc.c **** /**
3106:lib/src/stm32f4xx_rcc.c ****   * @brief  Clears the RCC reset flags.
3107:lib/src/stm32f4xx_rcc.c ****   *         The reset flags are: RCC_FLAG_PINRST, RCC_FLAG_PORRST,  RCC_FLAG_SFTRST,
3108:lib/src/stm32f4xx_rcc.c ****   *         RCC_FLAG_IWDGRST, RCC_FLAG_WWDGRST, RCC_FLAG_LPWRRST
3109:lib/src/stm32f4xx_rcc.c ****   * @param  None
3110:lib/src/stm32f4xx_rcc.c ****   * @retval None
3111:lib/src/stm32f4xx_rcc.c ****   */
3112:lib/src/stm32f4xx_rcc.c **** void RCC_ClearFlag(void)
3113:lib/src/stm32f4xx_rcc.c **** {
 1952              		.loc 1 3113 0
 1953              		.cfi_startproc
 1954              		@ args = 0, pretend = 0, frame = 0
 1955              		@ frame_needed = 0, uses_anonymous_args = 0
 1956              		@ link register save eliminated.
3114:lib/src/stm32f4xx_rcc.c ****   /* Set RMVF bit to clear the reset flags */
3115:lib/src/stm32f4xx_rcc.c ****   RCC->CSR |= RCC_CSR_RMVF;
 1957              		.loc 1 3115 0
 1958 0000 024A     		ldr	r2, .L207
 1959 0002 536F     		ldr	r3, [r2, #116]
 1960 0004 43F08073 		orr	r3, r3, #16777216
 1961 0008 5367     		str	r3, [r2, #116]
 1962 000a 7047     		bx	lr
 1963              	.L208:
 1964              		.align	2
 1965              	.L207:
 1966 000c 00380240 		.word	1073887232
 1967              		.cfi_endproc
 1968              	.LFE173:
 1970              		.section	.text.RCC_GetITStatus,"ax",%progbits
 1971              		.align	2
 1972              		.global	RCC_GetITStatus
 1973              		.thumb
 1974              		.thumb_func
 1976              	RCC_GetITStatus:
 1977              	.LFB174:
3116:lib/src/stm32f4xx_rcc.c **** }
3117:lib/src/stm32f4xx_rcc.c **** 
3118:lib/src/stm32f4xx_rcc.c **** /**
3119:lib/src/stm32f4xx_rcc.c ****   * @brief  Checks whether the specified RCC interrupt has occurred or not.
3120:lib/src/stm32f4xx_rcc.c ****   * @param  RCC_IT: specifies the RCC interrupt source to check.
3121:lib/src/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
3122:lib/src/stm32f4xx_rcc.c ****   *            @arg RCC_IT_LSIRDY: LSI ready interrupt
3123:lib/src/stm32f4xx_rcc.c ****   *            @arg RCC_IT_LSERDY: LSE ready interrupt
3124:lib/src/stm32f4xx_rcc.c ****   *            @arg RCC_IT_HSIRDY: HSI ready interrupt
3125:lib/src/stm32f4xx_rcc.c ****   *            @arg RCC_IT_HSERDY: HSE ready interrupt
3126:lib/src/stm32f4xx_rcc.c ****   *            @arg RCC_IT_PLLRDY: main PLL ready interrupt
3127:lib/src/stm32f4xx_rcc.c ****   *            @arg RCC_IT_PLLI2SRDY: PLLI2S ready interrupt
3128:lib/src/stm32f4xx_rcc.c ****   *            @arg RCC_IT_PLLSAIRDY: PLLSAI clock ready interrupt (only for STM32F42xxx/43xxx/446x
3129:lib/src/stm32f4xx_rcc.c ****   *            @arg RCC_IT_CSS: Clock Security System interrupt
3130:lib/src/stm32f4xx_rcc.c ****   * @retval The new state of RCC_IT (SET or RESET).
3131:lib/src/stm32f4xx_rcc.c ****   */
3132:lib/src/stm32f4xx_rcc.c **** ITStatus RCC_GetITStatus(uint8_t RCC_IT)
ARM GAS  C:\Users\rinck\AppData\Local\Temp\ccnBBAPb.s 			page 89


3133:lib/src/stm32f4xx_rcc.c **** {
 1978              		.loc 1 3133 0
 1979              		.cfi_startproc
 1980              		@ args = 0, pretend = 0, frame = 0
 1981              		@ frame_needed = 0, uses_anonymous_args = 0
 1982              		@ link register save eliminated.
 1983              	.LVL200:
3134:lib/src/stm32f4xx_rcc.c ****   ITStatus bitstatus = RESET;
3135:lib/src/stm32f4xx_rcc.c **** 
3136:lib/src/stm32f4xx_rcc.c ****   /* Check the parameters */
3137:lib/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_GET_IT(RCC_IT));
3138:lib/src/stm32f4xx_rcc.c **** 
3139:lib/src/stm32f4xx_rcc.c ****   /* Check the status of the specified RCC interrupt */
3140:lib/src/stm32f4xx_rcc.c ****   if ((RCC->CIR & RCC_IT) != (uint32_t)RESET)
 1984              		.loc 1 3140 0
 1985 0000 034B     		ldr	r3, .L212
 1986 0002 DB68     		ldr	r3, [r3, #12]
 1987 0004 1842     		tst	r0, r3
 1988 0006 01D0     		beq	.L211
3141:lib/src/stm32f4xx_rcc.c ****   {
3142:lib/src/stm32f4xx_rcc.c ****     bitstatus = SET;
 1989              		.loc 1 3142 0
 1990 0008 0120     		movs	r0, #1
 1991              	.LVL201:
 1992 000a 7047     		bx	lr
 1993              	.LVL202:
 1994              	.L211:
3143:lib/src/stm32f4xx_rcc.c ****   }
3144:lib/src/stm32f4xx_rcc.c ****   else
3145:lib/src/stm32f4xx_rcc.c ****   {
3146:lib/src/stm32f4xx_rcc.c ****     bitstatus = RESET;
 1995              		.loc 1 3146 0
 1996 000c 0020     		movs	r0, #0
 1997              	.LVL203:
3147:lib/src/stm32f4xx_rcc.c ****   }
3148:lib/src/stm32f4xx_rcc.c ****   /* Return the RCC_IT status */
3149:lib/src/stm32f4xx_rcc.c ****   return  bitstatus;
3150:lib/src/stm32f4xx_rcc.c **** }
 1998              		.loc 1 3150 0
 1999 000e 7047     		bx	lr
 2000              	.L213:
 2001              		.align	2
 2002              	.L212:
 2003 0010 00380240 		.word	1073887232
 2004              		.cfi_endproc
 2005              	.LFE174:
 2007              		.section	.text.RCC_ClearITPendingBit,"ax",%progbits
 2008              		.align	2
 2009              		.global	RCC_ClearITPendingBit
 2010              		.thumb
 2011              		.thumb_func
 2013              	RCC_ClearITPendingBit:
 2014              	.LFB175:
3151:lib/src/stm32f4xx_rcc.c **** 
3152:lib/src/stm32f4xx_rcc.c **** /**
3153:lib/src/stm32f4xx_rcc.c ****   * @brief  Clears the RCC's interrupt pending bits.
3154:lib/src/stm32f4xx_rcc.c ****   * @param  RCC_IT: specifies the interrupt pending bit to clear.
ARM GAS  C:\Users\rinck\AppData\Local\Temp\ccnBBAPb.s 			page 90


3155:lib/src/stm32f4xx_rcc.c ****   *          This parameter can be any combination of the following values:
3156:lib/src/stm32f4xx_rcc.c ****   *            @arg RCC_IT_LSIRDY: LSI ready interrupt
3157:lib/src/stm32f4xx_rcc.c ****   *            @arg RCC_IT_LSERDY: LSE ready interrupt
3158:lib/src/stm32f4xx_rcc.c ****   *            @arg RCC_IT_HSIRDY: HSI ready interrupt
3159:lib/src/stm32f4xx_rcc.c ****   *            @arg RCC_IT_HSERDY: HSE ready interrupt
3160:lib/src/stm32f4xx_rcc.c ****   *            @arg RCC_IT_PLLRDY: main PLL ready interrupt
3161:lib/src/stm32f4xx_rcc.c ****   *            @arg RCC_IT_PLLI2SRDY: PLLI2S ready interrupt  
3162:lib/src/stm32f4xx_rcc.c ****   *            @arg RCC_IT_PLLSAIRDY: PLLSAI ready interrupt (only for STM32F42xxx/43xxx/446xx/469x
3163:lib/src/stm32f4xx_rcc.c ****   *            @arg RCC_IT_CSS: Clock Security System interrupt
3164:lib/src/stm32f4xx_rcc.c ****   * @retval None
3165:lib/src/stm32f4xx_rcc.c ****   */
3166:lib/src/stm32f4xx_rcc.c **** void RCC_ClearITPendingBit(uint8_t RCC_IT)
3167:lib/src/stm32f4xx_rcc.c **** {
 2015              		.loc 1 3167 0
 2016              		.cfi_startproc
 2017              		@ args = 0, pretend = 0, frame = 0
 2018              		@ frame_needed = 0, uses_anonymous_args = 0
 2019              		@ link register save eliminated.
 2020              	.LVL204:
3168:lib/src/stm32f4xx_rcc.c ****   /* Check the parameters */
3169:lib/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_CLEAR_IT(RCC_IT));
3170:lib/src/stm32f4xx_rcc.c **** 
3171:lib/src/stm32f4xx_rcc.c ****   /* Perform Byte access to RCC_CIR[23:16] bits to clear the selected interrupt
3172:lib/src/stm32f4xx_rcc.c ****      pending bits */
3173:lib/src/stm32f4xx_rcc.c ****   *(__IO uint8_t *) CIR_BYTE3_ADDRESS = RCC_IT;
 2021              		.loc 1 3173 0
 2022 0000 014B     		ldr	r3, .L215
 2023 0002 1870     		strb	r0, [r3]
 2024 0004 7047     		bx	lr
 2025              	.L216:
 2026 0006 00BF     		.align	2
 2027              	.L215:
 2028 0008 0E380240 		.word	1073887246
 2029              		.cfi_endproc
 2030              	.LFE175:
 2032              		.section	.data.APBAHBPrescTable,"aw",%progbits
 2033              		.align	2
 2034              		.set	.LANCHOR0,. + 0
 2037              	APBAHBPrescTable:
 2038 0000 00       		.byte	0
 2039 0001 00       		.byte	0
 2040 0002 00       		.byte	0
 2041 0003 00       		.byte	0
 2042 0004 01       		.byte	1
 2043 0005 02       		.byte	2
 2044 0006 03       		.byte	3
 2045 0007 04       		.byte	4
 2046 0008 01       		.byte	1
 2047 0009 02       		.byte	2
 2048 000a 03       		.byte	3
 2049 000b 04       		.byte	4
 2050 000c 06       		.byte	6
 2051 000d 07       		.byte	7
 2052 000e 08       		.byte	8
 2053 000f 09       		.byte	9
 2054              		.text
 2055              	.Letext0:
ARM GAS  C:\Users\rinck\AppData\Local\Temp\ccnBBAPb.s 			page 91


 2056              		.file 2 "d:\\arm-none-eabi-gcc\\5.4 2016q3\\arm-none-eabi\\include\\machine\\_default_types.h"
 2057              		.file 3 "d:\\arm-none-eabi-gcc\\5.4 2016q3\\arm-none-eabi\\include\\sys\\_stdint.h"
 2058              		.file 4 "lib/stm32f4xx.h"
 2059              		.file 5 "lib/inc/stm32f4xx_rcc.h"
 2060              		.file 6 "lib/system/core_cm4.h"
ARM GAS  C:\Users\rinck\AppData\Local\Temp\ccnBBAPb.s 			page 92


DEFINED SYMBOLS
                            *ABS*:00000000 stm32f4xx_rcc.c
C:\Users\rinck\AppData\Local\Temp\ccnBBAPb.s:22     .text.RCC_DeInit:00000000 $t
C:\Users\rinck\AppData\Local\Temp\ccnBBAPb.s:27     .text.RCC_DeInit:00000000 RCC_DeInit
C:\Users\rinck\AppData\Local\Temp\ccnBBAPb.s:69     .text.RCC_DeInit:0000003c $d
C:\Users\rinck\AppData\Local\Temp\ccnBBAPb.s:76     .text.RCC_HSEConfig:00000000 $t
C:\Users\rinck\AppData\Local\Temp\ccnBBAPb.s:81     .text.RCC_HSEConfig:00000000 RCC_HSEConfig
C:\Users\rinck\AppData\Local\Temp\ccnBBAPb.s:99     .text.RCC_HSEConfig:0000000c $d
C:\Users\rinck\AppData\Local\Temp\ccnBBAPb.s:104    .text.RCC_AdjustHSICalibrationValue:00000000 $t
C:\Users\rinck\AppData\Local\Temp\ccnBBAPb.s:109    .text.RCC_AdjustHSICalibrationValue:00000000 RCC_AdjustHSICalibrationValue
C:\Users\rinck\AppData\Local\Temp\ccnBBAPb.s:133    .text.RCC_AdjustHSICalibrationValue:00000010 $d
C:\Users\rinck\AppData\Local\Temp\ccnBBAPb.s:138    .text.RCC_HSICmd:00000000 $t
C:\Users\rinck\AppData\Local\Temp\ccnBBAPb.s:143    .text.RCC_HSICmd:00000000 RCC_HSICmd
C:\Users\rinck\AppData\Local\Temp\ccnBBAPb.s:158    .text.RCC_HSICmd:00000008 $d
C:\Users\rinck\AppData\Local\Temp\ccnBBAPb.s:163    .text.RCC_LSEConfig:00000000 $t
C:\Users\rinck\AppData\Local\Temp\ccnBBAPb.s:168    .text.RCC_LSEConfig:00000000 RCC_LSEConfig
C:\Users\rinck\AppData\Local\Temp\ccnBBAPb.s:204    .text.RCC_LSEConfig:00000024 $d
C:\Users\rinck\AppData\Local\Temp\ccnBBAPb.s:209    .text.RCC_LSICmd:00000000 $t
C:\Users\rinck\AppData\Local\Temp\ccnBBAPb.s:214    .text.RCC_LSICmd:00000000 RCC_LSICmd
C:\Users\rinck\AppData\Local\Temp\ccnBBAPb.s:229    .text.RCC_LSICmd:00000008 $d
C:\Users\rinck\AppData\Local\Temp\ccnBBAPb.s:234    .text.RCC_PLLConfig:00000000 $t
C:\Users\rinck\AppData\Local\Temp\ccnBBAPb.s:239    .text.RCC_PLLConfig:00000000 RCC_PLLConfig
C:\Users\rinck\AppData\Local\Temp\ccnBBAPb.s:265    .text.RCC_PLLConfig:0000001c $d
C:\Users\rinck\AppData\Local\Temp\ccnBBAPb.s:270    .text.RCC_PLLCmd:00000000 $t
C:\Users\rinck\AppData\Local\Temp\ccnBBAPb.s:275    .text.RCC_PLLCmd:00000000 RCC_PLLCmd
C:\Users\rinck\AppData\Local\Temp\ccnBBAPb.s:290    .text.RCC_PLLCmd:00000008 $d
C:\Users\rinck\AppData\Local\Temp\ccnBBAPb.s:295    .text.RCC_PLLI2SConfig:00000000 $t
C:\Users\rinck\AppData\Local\Temp\ccnBBAPb.s:300    .text.RCC_PLLI2SConfig:00000000 RCC_PLLI2SConfig
C:\Users\rinck\AppData\Local\Temp\ccnBBAPb.s:319    .text.RCC_PLLI2SConfig:00000010 $d
C:\Users\rinck\AppData\Local\Temp\ccnBBAPb.s:324    .text.RCC_PLLI2SCmd:00000000 $t
C:\Users\rinck\AppData\Local\Temp\ccnBBAPb.s:329    .text.RCC_PLLI2SCmd:00000000 RCC_PLLI2SCmd
C:\Users\rinck\AppData\Local\Temp\ccnBBAPb.s:344    .text.RCC_PLLI2SCmd:00000008 $d
C:\Users\rinck\AppData\Local\Temp\ccnBBAPb.s:349    .text.RCC_PLLSAIConfig:00000000 $t
C:\Users\rinck\AppData\Local\Temp\ccnBBAPb.s:354    .text.RCC_PLLSAIConfig:00000000 RCC_PLLSAIConfig
C:\Users\rinck\AppData\Local\Temp\ccnBBAPb.s:375    .text.RCC_PLLSAIConfig:00000014 $d
C:\Users\rinck\AppData\Local\Temp\ccnBBAPb.s:380    .text.RCC_PLLSAICmd:00000000 $t
C:\Users\rinck\AppData\Local\Temp\ccnBBAPb.s:385    .text.RCC_PLLSAICmd:00000000 RCC_PLLSAICmd
C:\Users\rinck\AppData\Local\Temp\ccnBBAPb.s:400    .text.RCC_PLLSAICmd:00000008 $d
C:\Users\rinck\AppData\Local\Temp\ccnBBAPb.s:405    .text.RCC_ClockSecuritySystemCmd:00000000 $t
C:\Users\rinck\AppData\Local\Temp\ccnBBAPb.s:410    .text.RCC_ClockSecuritySystemCmd:00000000 RCC_ClockSecuritySystemCmd
C:\Users\rinck\AppData\Local\Temp\ccnBBAPb.s:425    .text.RCC_ClockSecuritySystemCmd:00000008 $d
C:\Users\rinck\AppData\Local\Temp\ccnBBAPb.s:430    .text.RCC_MCO1Config:00000000 $t
C:\Users\rinck\AppData\Local\Temp\ccnBBAPb.s:435    .text.RCC_MCO1Config:00000000 RCC_MCO1Config
C:\Users\rinck\AppData\Local\Temp\ccnBBAPb.s:461    .text.RCC_MCO1Config:00000010 $d
C:\Users\rinck\AppData\Local\Temp\ccnBBAPb.s:466    .text.RCC_MCO2Config:00000000 $t
C:\Users\rinck\AppData\Local\Temp\ccnBBAPb.s:471    .text.RCC_MCO2Config:00000000 RCC_MCO2Config
C:\Users\rinck\AppData\Local\Temp\ccnBBAPb.s:497    .text.RCC_MCO2Config:00000010 $d
C:\Users\rinck\AppData\Local\Temp\ccnBBAPb.s:502    .text.RCC_SYSCLKConfig:00000000 $t
C:\Users\rinck\AppData\Local\Temp\ccnBBAPb.s:507    .text.RCC_SYSCLKConfig:00000000 RCC_SYSCLKConfig
C:\Users\rinck\AppData\Local\Temp\ccnBBAPb.s:531    .text.RCC_SYSCLKConfig:00000010 $d
C:\Users\rinck\AppData\Local\Temp\ccnBBAPb.s:536    .text.RCC_GetSYSCLKSource:00000000 $t
C:\Users\rinck\AppData\Local\Temp\ccnBBAPb.s:541    .text.RCC_GetSYSCLKSource:00000000 RCC_GetSYSCLKSource
C:\Users\rinck\AppData\Local\Temp\ccnBBAPb.s:557    .text.RCC_GetSYSCLKSource:0000000c $d
C:\Users\rinck\AppData\Local\Temp\ccnBBAPb.s:562    .text.RCC_HCLKConfig:00000000 $t
C:\Users\rinck\AppData\Local\Temp\ccnBBAPb.s:567    .text.RCC_HCLKConfig:00000000 RCC_HCLKConfig
C:\Users\rinck\AppData\Local\Temp\ccnBBAPb.s:591    .text.RCC_HCLKConfig:00000010 $d
C:\Users\rinck\AppData\Local\Temp\ccnBBAPb.s:596    .text.RCC_PCLK1Config:00000000 $t
ARM GAS  C:\Users\rinck\AppData\Local\Temp\ccnBBAPb.s 			page 93


C:\Users\rinck\AppData\Local\Temp\ccnBBAPb.s:601    .text.RCC_PCLK1Config:00000000 RCC_PCLK1Config
C:\Users\rinck\AppData\Local\Temp\ccnBBAPb.s:625    .text.RCC_PCLK1Config:00000010 $d
C:\Users\rinck\AppData\Local\Temp\ccnBBAPb.s:630    .text.RCC_PCLK2Config:00000000 $t
C:\Users\rinck\AppData\Local\Temp\ccnBBAPb.s:635    .text.RCC_PCLK2Config:00000000 RCC_PCLK2Config
C:\Users\rinck\AppData\Local\Temp\ccnBBAPb.s:659    .text.RCC_PCLK2Config:00000010 $d
C:\Users\rinck\AppData\Local\Temp\ccnBBAPb.s:664    .text.RCC_GetClocksFreq:00000000 $t
C:\Users\rinck\AppData\Local\Temp\ccnBBAPb.s:669    .text.RCC_GetClocksFreq:00000000 RCC_GetClocksFreq
C:\Users\rinck\AppData\Local\Temp\ccnBBAPb.s:821    .text.RCC_GetClocksFreq:000000a8 $d
C:\Users\rinck\AppData\Local\Temp\ccnBBAPb.s:829    .text.RCC_RTCCLKConfig:00000000 $t
C:\Users\rinck\AppData\Local\Temp\ccnBBAPb.s:834    .text.RCC_RTCCLKConfig:00000000 RCC_RTCCLKConfig
C:\Users\rinck\AppData\Local\Temp\ccnBBAPb.s:873    .text.RCC_RTCCLKConfig:0000002c $d
C:\Users\rinck\AppData\Local\Temp\ccnBBAPb.s:878    .text.RCC_RTCCLKCmd:00000000 $t
C:\Users\rinck\AppData\Local\Temp\ccnBBAPb.s:883    .text.RCC_RTCCLKCmd:00000000 RCC_RTCCLKCmd
C:\Users\rinck\AppData\Local\Temp\ccnBBAPb.s:898    .text.RCC_RTCCLKCmd:00000008 $d
C:\Users\rinck\AppData\Local\Temp\ccnBBAPb.s:903    .text.RCC_BackupResetCmd:00000000 $t
C:\Users\rinck\AppData\Local\Temp\ccnBBAPb.s:908    .text.RCC_BackupResetCmd:00000000 RCC_BackupResetCmd
C:\Users\rinck\AppData\Local\Temp\ccnBBAPb.s:923    .text.RCC_BackupResetCmd:00000008 $d
C:\Users\rinck\AppData\Local\Temp\ccnBBAPb.s:928    .text.RCC_I2SCLKConfig:00000000 $t
C:\Users\rinck\AppData\Local\Temp\ccnBBAPb.s:933    .text.RCC_I2SCLKConfig:00000000 RCC_I2SCLKConfig
C:\Users\rinck\AppData\Local\Temp\ccnBBAPb.s:948    .text.RCC_I2SCLKConfig:00000008 $d
C:\Users\rinck\AppData\Local\Temp\ccnBBAPb.s:953    .text.RCC_SAIBlockACLKConfig:00000000 $t
C:\Users\rinck\AppData\Local\Temp\ccnBBAPb.s:958    .text.RCC_SAIBlockACLKConfig:00000000 RCC_SAIBlockACLKConfig
C:\Users\rinck\AppData\Local\Temp\ccnBBAPb.s:982    .text.RCC_SAIBlockACLKConfig:00000014 $d
C:\Users\rinck\AppData\Local\Temp\ccnBBAPb.s:987    .text.RCC_SAIBlockBCLKConfig:00000000 $t
C:\Users\rinck\AppData\Local\Temp\ccnBBAPb.s:992    .text.RCC_SAIBlockBCLKConfig:00000000 RCC_SAIBlockBCLKConfig
C:\Users\rinck\AppData\Local\Temp\ccnBBAPb.s:1016   .text.RCC_SAIBlockBCLKConfig:00000014 $d
C:\Users\rinck\AppData\Local\Temp\ccnBBAPb.s:1021   .text.RCC_SAIPLLI2SClkDivConfig:00000000 $t
C:\Users\rinck\AppData\Local\Temp\ccnBBAPb.s:1026   .text.RCC_SAIPLLI2SClkDivConfig:00000000 RCC_SAIPLLI2SClkDivConfig
C:\Users\rinck\AppData\Local\Temp\ccnBBAPb.s:1052   .text.RCC_SAIPLLI2SClkDivConfig:00000014 $d
C:\Users\rinck\AppData\Local\Temp\ccnBBAPb.s:1057   .text.RCC_SAIPLLSAIClkDivConfig:00000000 $t
C:\Users\rinck\AppData\Local\Temp\ccnBBAPb.s:1062   .text.RCC_SAIPLLSAIClkDivConfig:00000000 RCC_SAIPLLSAIClkDivConfig
C:\Users\rinck\AppData\Local\Temp\ccnBBAPb.s:1088   .text.RCC_SAIPLLSAIClkDivConfig:00000018 $d
C:\Users\rinck\AppData\Local\Temp\ccnBBAPb.s:1093   .text.RCC_LTDCCLKDivConfig:00000000 $t
C:\Users\rinck\AppData\Local\Temp\ccnBBAPb.s:1098   .text.RCC_LTDCCLKDivConfig:00000000 RCC_LTDCCLKDivConfig
C:\Users\rinck\AppData\Local\Temp\ccnBBAPb.s:1122   .text.RCC_LTDCCLKDivConfig:00000014 $d
C:\Users\rinck\AppData\Local\Temp\ccnBBAPb.s:1127   .text.RCC_TIMCLKPresConfig:00000000 $t
C:\Users\rinck\AppData\Local\Temp\ccnBBAPb.s:1132   .text.RCC_TIMCLKPresConfig:00000000 RCC_TIMCLKPresConfig
C:\Users\rinck\AppData\Local\Temp\ccnBBAPb.s:1147   .text.RCC_TIMCLKPresConfig:00000008 $d
C:\Users\rinck\AppData\Local\Temp\ccnBBAPb.s:1152   .text.RCC_AHB1PeriphClockCmd:00000000 $t
C:\Users\rinck\AppData\Local\Temp\ccnBBAPb.s:1157   .text.RCC_AHB1PeriphClockCmd:00000000 RCC_AHB1PeriphClockCmd
C:\Users\rinck\AppData\Local\Temp\ccnBBAPb.s:1186   .text.RCC_AHB1PeriphClockCmd:00000018 $d
C:\Users\rinck\AppData\Local\Temp\ccnBBAPb.s:1191   .text.RCC_AHB2PeriphClockCmd:00000000 $t
C:\Users\rinck\AppData\Local\Temp\ccnBBAPb.s:1196   .text.RCC_AHB2PeriphClockCmd:00000000 RCC_AHB2PeriphClockCmd
C:\Users\rinck\AppData\Local\Temp\ccnBBAPb.s:1225   .text.RCC_AHB2PeriphClockCmd:00000018 $d
C:\Users\rinck\AppData\Local\Temp\ccnBBAPb.s:1230   .text.RCC_AHB3PeriphClockCmd:00000000 $t
C:\Users\rinck\AppData\Local\Temp\ccnBBAPb.s:1235   .text.RCC_AHB3PeriphClockCmd:00000000 RCC_AHB3PeriphClockCmd
C:\Users\rinck\AppData\Local\Temp\ccnBBAPb.s:1264   .text.RCC_AHB3PeriphClockCmd:00000018 $d
C:\Users\rinck\AppData\Local\Temp\ccnBBAPb.s:1269   .text.RCC_APB1PeriphClockCmd:00000000 $t
C:\Users\rinck\AppData\Local\Temp\ccnBBAPb.s:1274   .text.RCC_APB1PeriphClockCmd:00000000 RCC_APB1PeriphClockCmd
C:\Users\rinck\AppData\Local\Temp\ccnBBAPb.s:1303   .text.RCC_APB1PeriphClockCmd:00000018 $d
C:\Users\rinck\AppData\Local\Temp\ccnBBAPb.s:1308   .text.RCC_APB2PeriphClockCmd:00000000 $t
C:\Users\rinck\AppData\Local\Temp\ccnBBAPb.s:1313   .text.RCC_APB2PeriphClockCmd:00000000 RCC_APB2PeriphClockCmd
C:\Users\rinck\AppData\Local\Temp\ccnBBAPb.s:1342   .text.RCC_APB2PeriphClockCmd:00000018 $d
C:\Users\rinck\AppData\Local\Temp\ccnBBAPb.s:1347   .text.RCC_AHB1PeriphResetCmd:00000000 $t
C:\Users\rinck\AppData\Local\Temp\ccnBBAPb.s:1352   .text.RCC_AHB1PeriphResetCmd:00000000 RCC_AHB1PeriphResetCmd
C:\Users\rinck\AppData\Local\Temp\ccnBBAPb.s:1381   .text.RCC_AHB1PeriphResetCmd:00000018 $d
C:\Users\rinck\AppData\Local\Temp\ccnBBAPb.s:1386   .text.RCC_AHB2PeriphResetCmd:00000000 $t
ARM GAS  C:\Users\rinck\AppData\Local\Temp\ccnBBAPb.s 			page 94


C:\Users\rinck\AppData\Local\Temp\ccnBBAPb.s:1391   .text.RCC_AHB2PeriphResetCmd:00000000 RCC_AHB2PeriphResetCmd
C:\Users\rinck\AppData\Local\Temp\ccnBBAPb.s:1420   .text.RCC_AHB2PeriphResetCmd:00000018 $d
C:\Users\rinck\AppData\Local\Temp\ccnBBAPb.s:1425   .text.RCC_AHB3PeriphResetCmd:00000000 $t
C:\Users\rinck\AppData\Local\Temp\ccnBBAPb.s:1430   .text.RCC_AHB3PeriphResetCmd:00000000 RCC_AHB3PeriphResetCmd
C:\Users\rinck\AppData\Local\Temp\ccnBBAPb.s:1459   .text.RCC_AHB3PeriphResetCmd:00000018 $d
C:\Users\rinck\AppData\Local\Temp\ccnBBAPb.s:1464   .text.RCC_APB1PeriphResetCmd:00000000 $t
C:\Users\rinck\AppData\Local\Temp\ccnBBAPb.s:1469   .text.RCC_APB1PeriphResetCmd:00000000 RCC_APB1PeriphResetCmd
C:\Users\rinck\AppData\Local\Temp\ccnBBAPb.s:1498   .text.RCC_APB1PeriphResetCmd:00000018 $d
C:\Users\rinck\AppData\Local\Temp\ccnBBAPb.s:1503   .text.RCC_APB2PeriphResetCmd:00000000 $t
C:\Users\rinck\AppData\Local\Temp\ccnBBAPb.s:1508   .text.RCC_APB2PeriphResetCmd:00000000 RCC_APB2PeriphResetCmd
C:\Users\rinck\AppData\Local\Temp\ccnBBAPb.s:1537   .text.RCC_APB2PeriphResetCmd:00000018 $d
C:\Users\rinck\AppData\Local\Temp\ccnBBAPb.s:1542   .text.RCC_AHB1PeriphClockLPModeCmd:00000000 $t
C:\Users\rinck\AppData\Local\Temp\ccnBBAPb.s:1547   .text.RCC_AHB1PeriphClockLPModeCmd:00000000 RCC_AHB1PeriphClockLPModeCmd
C:\Users\rinck\AppData\Local\Temp\ccnBBAPb.s:1576   .text.RCC_AHB1PeriphClockLPModeCmd:00000018 $d
C:\Users\rinck\AppData\Local\Temp\ccnBBAPb.s:1581   .text.RCC_AHB2PeriphClockLPModeCmd:00000000 $t
C:\Users\rinck\AppData\Local\Temp\ccnBBAPb.s:1586   .text.RCC_AHB2PeriphClockLPModeCmd:00000000 RCC_AHB2PeriphClockLPModeCmd
C:\Users\rinck\AppData\Local\Temp\ccnBBAPb.s:1615   .text.RCC_AHB2PeriphClockLPModeCmd:00000018 $d
C:\Users\rinck\AppData\Local\Temp\ccnBBAPb.s:1620   .text.RCC_AHB3PeriphClockLPModeCmd:00000000 $t
C:\Users\rinck\AppData\Local\Temp\ccnBBAPb.s:1625   .text.RCC_AHB3PeriphClockLPModeCmd:00000000 RCC_AHB3PeriphClockLPModeCmd
C:\Users\rinck\AppData\Local\Temp\ccnBBAPb.s:1654   .text.RCC_AHB3PeriphClockLPModeCmd:00000018 $d
C:\Users\rinck\AppData\Local\Temp\ccnBBAPb.s:1659   .text.RCC_APB1PeriphClockLPModeCmd:00000000 $t
C:\Users\rinck\AppData\Local\Temp\ccnBBAPb.s:1664   .text.RCC_APB1PeriphClockLPModeCmd:00000000 RCC_APB1PeriphClockLPModeCmd
C:\Users\rinck\AppData\Local\Temp\ccnBBAPb.s:1693   .text.RCC_APB1PeriphClockLPModeCmd:00000018 $d
C:\Users\rinck\AppData\Local\Temp\ccnBBAPb.s:1698   .text.RCC_APB2PeriphClockLPModeCmd:00000000 $t
C:\Users\rinck\AppData\Local\Temp\ccnBBAPb.s:1703   .text.RCC_APB2PeriphClockLPModeCmd:00000000 RCC_APB2PeriphClockLPModeCmd
C:\Users\rinck\AppData\Local\Temp\ccnBBAPb.s:1732   .text.RCC_APB2PeriphClockLPModeCmd:00000018 $d
C:\Users\rinck\AppData\Local\Temp\ccnBBAPb.s:1737   .text.RCC_LSEModeConfig:00000000 $t
C:\Users\rinck\AppData\Local\Temp\ccnBBAPb.s:1742   .text.RCC_LSEModeConfig:00000000 RCC_LSEModeConfig
C:\Users\rinck\AppData\Local\Temp\ccnBBAPb.s:1769   .text.RCC_LSEModeConfig:0000001c $d
C:\Users\rinck\AppData\Local\Temp\ccnBBAPb.s:1774   .text.RCC_ITConfig:00000000 $t
C:\Users\rinck\AppData\Local\Temp\ccnBBAPb.s:1779   .text.RCC_ITConfig:00000000 RCC_ITConfig
C:\Users\rinck\AppData\Local\Temp\ccnBBAPb.s:1808   .text.RCC_ITConfig:00000018 $d
C:\Users\rinck\AppData\Local\Temp\ccnBBAPb.s:1813   .text.RCC_GetFlagStatus:00000000 $t
C:\Users\rinck\AppData\Local\Temp\ccnBBAPb.s:1818   .text.RCC_GetFlagStatus:00000000 RCC_GetFlagStatus
C:\Users\rinck\AppData\Local\Temp\ccnBBAPb.s:1877   .text.RCC_GetFlagStatus:00000030 $d
C:\Users\rinck\AppData\Local\Temp\ccnBBAPb.s:1882   .text.RCC_WaitForHSEStartUp:00000000 $t
C:\Users\rinck\AppData\Local\Temp\ccnBBAPb.s:1887   .text.RCC_WaitForHSEStartUp:00000000 RCC_WaitForHSEStartUp
C:\Users\rinck\AppData\Local\Temp\ccnBBAPb.s:1945   .text.RCC_ClearFlag:00000000 $t
C:\Users\rinck\AppData\Local\Temp\ccnBBAPb.s:1950   .text.RCC_ClearFlag:00000000 RCC_ClearFlag
C:\Users\rinck\AppData\Local\Temp\ccnBBAPb.s:1966   .text.RCC_ClearFlag:0000000c $d
C:\Users\rinck\AppData\Local\Temp\ccnBBAPb.s:1971   .text.RCC_GetITStatus:00000000 $t
C:\Users\rinck\AppData\Local\Temp\ccnBBAPb.s:1976   .text.RCC_GetITStatus:00000000 RCC_GetITStatus
C:\Users\rinck\AppData\Local\Temp\ccnBBAPb.s:2003   .text.RCC_GetITStatus:00000010 $d
C:\Users\rinck\AppData\Local\Temp\ccnBBAPb.s:2008   .text.RCC_ClearITPendingBit:00000000 $t
C:\Users\rinck\AppData\Local\Temp\ccnBBAPb.s:2013   .text.RCC_ClearITPendingBit:00000000 RCC_ClearITPendingBit
C:\Users\rinck\AppData\Local\Temp\ccnBBAPb.s:2028   .text.RCC_ClearITPendingBit:00000008 $d
C:\Users\rinck\AppData\Local\Temp\ccnBBAPb.s:2033   .data.APBAHBPrescTable:00000000 $d
C:\Users\rinck\AppData\Local\Temp\ccnBBAPb.s:2037   .data.APBAHBPrescTable:00000000 APBAHBPrescTable
                     .debug_frame:00000010 $d

NO UNDEFINED SYMBOLS
